# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pymaxwell', [dirname(__file__)])
        except ImportError:
            import _pymaxwell
            return _pymaxwell
        if fp is not None:
            try:
                _mod = imp.load_module('_pymaxwell', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pymaxwell = swig_import_helper()
    del swig_import_helper
else:
    import _pymaxwell
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import os;
import sys;
import subprocess;

def getFilesFromPath( path, extension ):
	"""getFromPath( path, extension ) -> file names list
	Description: Obtain all file names from within a directory given its extension."""
	res = [];
	filelist = os.listdir(path);
	el = len(extension)
	for file in filelist:
		if extension in file[-el:]:
			res.append(file);
	return res;

def runMaxwell( parameters ):
	"""Description: Runs Maxwell Render with the given parameters.
	Example code:
		parameters = [];
		parameters.append('-mxs:c:/scenes/sphere.mxs');
		parameters.append('-o:c:/scenes/sphere-render.exr');
		parameters.append('-mxi:c:/scenes/sphere-render.mxi');
		parameters.append('-res:1920x1080');
		parameters.append('-time:10');
		runMaxwell(parameters);"""
	if sys.platform == 'win32' or sys.platform == 'linux2':
		try:
			mwroot = os.environ['MAXWELL3_ROOT'];
		except:
			print('MAXWELL3_ROOT environment variable not found!');
	
	if sys.platform == 'win32':
		parameters.insert(0,mwroot+'/maxwell.exe');
	elif sys.platform == 'linux2':
		parameters.insert(0,mwroot+'/maxwell');
	elif sys.platform == 'darwin':
		parameters.insert(0,'/Applications/Maxwell 3/Maxwell.app/Contents/MacOs/Maxwell');
	else:
		error;

	subprocess.call(parameters);

def getPyMaxwellModuleVersion():
	"""Description: Gets the PyMaxwell Python module version.
		     It always will be > Cmaxwell.getEngineVersion()"""
	return PYMAXWELL_VERSION;
	
def getRenderOptions():
	"""Method:    getRenderOptions() -> string list
		Description: get all render options available."""
	plist = ['ENGINE','NUM THREADS','STOP TIME','SAMPLING LEVEL','USE MULTILIGHT','SAVE LIGHTS IN SEPARATE FILES','MXI FULLNAME','DO NOT SAVE MXI FILE','DO NOT SAVE IMAGE FILE','RENAME AFTER SAVING','COPY MXI AFTER RENDER','COPY IMAGE AFTER RENDER','REMOVE FILES AFTER COPY','DO MOTION BLUR','DO DISPLACEMENT','DO DISPERSION','DO DIFFUSE LAYER','DO REFLECTION LAYER','DO DIRECT LAYER','DO INDIRECT LAYER','DO DIRECT REFLECTION CAUSTIC LAYER','DO INDIRECT REFLECTION CAUSTIC LAYER','DO DIRECT REFRACTION CAUSTIC LAYER','DO INDIRECT REFRACTION CAUSTIC LAYER','DO RENDER CHANNEL','DO ALPHA CHANNEL','OPAQUE ALPHA','EMBED CHANNELS','DO IDOBJECT CHANNEL','DO IDMATERIAL CHANNEL','DO SHADOW PASS CHANNEL','DO MOTION CHANNEL','DO ROUGHNESS CHANNEL','DO FRESNEL CHANNEL','DO NORMALS CHANNEL','NORMALS CHANNEL SPACE','POSITION CHANNEL SPACE','MOTION CHANNEL TYPE','DO POSITION CHANNEL','DO ZBUFFER CHANNEL','ZBUFFER RANGE','DO DEVIGNETTING','DEVIGNETTING','DO SCATTERING_LENS','SCATTERING_LENS','DO SHARPNESS','SHARPNESS']
	return plist
	
def getChannelsList():
	"""Method:    getChannelsList() -> string list
		Description: get all channel types available."""
	plist = ['RENDER','ALPHA','OBJECT','MATERIAL','SHADOW','MOTION','Z','ROUGHNESS','FRESNEL','NORMALS','POSITION','DEEP','UV','CUSTOM_ALPHA']
	return plist

FLAG_NONE = _pymaxwell.FLAG_NONE
FLAG_RENDER = _pymaxwell.FLAG_RENDER
FLAG_ALPHA = _pymaxwell.FLAG_ALPHA
FLAG_ID_OBJECT = _pymaxwell.FLAG_ID_OBJECT
FLAG_ID_MATERIAL = _pymaxwell.FLAG_ID_MATERIAL
FLAG_SHADOW_PASS = _pymaxwell.FLAG_SHADOW_PASS
FLAG_MOTION = _pymaxwell.FLAG_MOTION
FLAG_ROUGHNESS = _pymaxwell.FLAG_ROUGHNESS
FLAG_Z = _pymaxwell.FLAG_Z
FLAG_ALPHA_OPAQUE = _pymaxwell.FLAG_ALPHA_OPAQUE
FLAG_EMBED_ALL_ENABLED = _pymaxwell.FLAG_EMBED_ALL_ENABLED
FLAG_FRESNEL = _pymaxwell.FLAG_FRESNEL
FLAG_NORMALS = _pymaxwell.FLAG_NORMALS
FLAG_POSITION = _pymaxwell.FLAG_POSITION
FLAG_FALSE_COLOR = _pymaxwell.FLAG_FALSE_COLOR
FLAG_DEEP = _pymaxwell.FLAG_DEEP
FLAG_UV = _pymaxwell.FLAG_UV
FLAG_ALPHA_CUSTOM = _pymaxwell.FLAG_ALPHA_CUSTOM
FLAG_SAMPLES_3X3 = _pymaxwell.FLAG_SAMPLES_3X3
FLAG_END = _pymaxwell.FLAG_END
FLAG_ALL = _pymaxwell.FLAG_ALL
FLAG_EXTRAS = _pymaxwell.FLAG_EXTRAS
FLAG_BUFFERS = _pymaxwell.FLAG_BUFFERS
OUTPUT_NONE = _pymaxwell.OUTPUT_NONE
OUTPUT_PNG_8 = _pymaxwell.OUTPUT_PNG_8
OUTPUT_PNG_16 = _pymaxwell.OUTPUT_PNG_16
OUTPUT_TGA = _pymaxwell.OUTPUT_TGA
OUTPUT_TIF_8 = _pymaxwell.OUTPUT_TIF_8
OUTPUT_TIF_16 = _pymaxwell.OUTPUT_TIF_16
OUTPUT_TIF_32 = _pymaxwell.OUTPUT_TIF_32
OUTPUT_EXR_16 = _pymaxwell.OUTPUT_EXR_16
OUTPUT_EXR_32 = _pymaxwell.OUTPUT_EXR_32
OUTPUT_EXR_DEEP = _pymaxwell.OUTPUT_EXR_DEEP
OUTPUT_JPG = _pymaxwell.OUTPUT_JPG
OUTPUT_JP2 = _pymaxwell.OUTPUT_JP2
OUTPUT_HDR = _pymaxwell.OUTPUT_HDR
OUTPUT_DTEX = _pymaxwell.OUTPUT_DTEX
OUTPUT_END = _pymaxwell.OUTPUT_END
OUTPUT_ALL_USUAL = _pymaxwell.OUTPUT_ALL_USUAL
MAP_TYPE_VALUE = _pymaxwell.MAP_TYPE_VALUE
MAP_TYPE_RGB = _pymaxwell.MAP_TYPE_RGB
MAP_TYPE_BITMAP = _pymaxwell.MAP_TYPE_BITMAP
MAP_TYPE_SPECTRUM_FILE = _pymaxwell.MAP_TYPE_SPECTRUM_FILE
BLENDING_NORMAL = _pymaxwell.BLENDING_NORMAL
BLENDING_ADDITIVE = _pymaxwell.BLENDING_ADDITIVE
DISTANCE_NANOMETERS = _pymaxwell.DISTANCE_NANOMETERS
DISTANCE_MICRONS = _pymaxwell.DISTANCE_MICRONS
DISTANCE_MILLIMETERS = _pymaxwell.DISTANCE_MILLIMETERS
DISTANCE_METERS = _pymaxwell.DISTANCE_METERS
DISTANCE_CENTIMETERS = _pymaxwell.DISTANCE_CENTIMETERS
DISTANCE_DECIMETERS = _pymaxwell.DISTANCE_DECIMETERS
EMISSION_TYPE_PAIR = _pymaxwell.EMISSION_TYPE_PAIR
EMISSION_TYPE_TEMPERATURE = _pymaxwell.EMISSION_TYPE_TEMPERATURE
EMISSION_TYPE_MXI = _pymaxwell.EMISSION_TYPE_MXI
EMISSION_TYPE_SPECTRUM_FILE = _pymaxwell.EMISSION_TYPE_SPECTRUM_FILE
EMISSION_RGB = _pymaxwell.EMISSION_RGB
EMISSION_XYZ = _pymaxwell.EMISSION_XYZ
EMISSION_COLOR_TEMPERATURE = _pymaxwell.EMISSION_COLOR_TEMPERATURE
EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY = _pymaxwell.EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY
EMISSION_UNITS_LUMINOUS_POWER = _pymaxwell.EMISSION_UNITS_LUMINOUS_POWER
EMISSION_UNITS_ILLUMINANCE = _pymaxwell.EMISSION_UNITS_ILLUMINANCE
EMISSION_UNITS_LUMINOUS_INTENSITY = _pymaxwell.EMISSION_UNITS_LUMINOUS_INTENSITY
EMISSION_UNITS_LUMINANCE = _pymaxwell.EMISSION_UNITS_LUMINANCE
EMISSION_LOBE_DEFAULT = _pymaxwell.EMISSION_LOBE_DEFAULT
EMISSION_LOBE_IES = _pymaxwell.EMISSION_LOBE_IES
EMISSION_LOBE_BITMAP = _pymaxwell.EMISSION_LOBE_BITMAP
DISPLACEMENT_TYPE_ON_THE_FLY = _pymaxwell.DISPLACEMENT_TYPE_ON_THE_FLY
DISPLACEMENT_TYPE_PRETESSELLATED = _pymaxwell.DISPLACEMENT_TYPE_PRETESSELLATED
DISPLACEMENT_TYPE_VECTOR_3D = _pymaxwell.DISPLACEMENT_TYPE_VECTOR_3D
DISPLACEMENT_SUBDIVISION_FLAT = _pymaxwell.DISPLACEMENT_SUBDIVISION_FLAT
DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL = _pymaxwell.DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL
VD_TANGENT = _pymaxwell.VD_TANGENT
VD_OBJECT = _pymaxwell.VD_OBJECT
VD_WORLD = _pymaxwell.VD_WORLD
VD_REALFLOW = _pymaxwell.VD_REALFLOW
DISPLACEMENT_UV_NONE = _pymaxwell.DISPLACEMENT_UV_NONE
DISPLACEMENT_UV_EDGES = _pymaxwell.DISPLACEMENT_UV_EDGES
DISPLACEMENT_UV_EDGES_AND_CORNERS = _pymaxwell.DISPLACEMENT_UV_EDGES_AND_CORNERS
DISPLACEMENT_UV_SHARP = _pymaxwell.DISPLACEMENT_UV_SHARP
VD_XYZ = _pymaxwell.VD_XYZ
VD_XZY = _pymaxwell.VD_XZY
VD_YZX = _pymaxwell.VD_YZX
VD_YXZ = _pymaxwell.VD_YXZ
VD_ZXY = _pymaxwell.VD_ZXY
VD_ZYX = _pymaxwell.VD_ZYX
VD_PRESET_CUSTOM = _pymaxwell.VD_PRESET_CUSTOM
VD_PRESET_ZBRUSH_TANGENT_TYPE_3 = _pymaxwell.VD_PRESET_ZBRUSH_TANGENT_TYPE_3
VD_PRESET_ZBRUSH_WORLD = _pymaxwell.VD_PRESET_ZBRUSH_WORLD
VD_PRESET_MUDBOX_ABSOLUTE_TANGENT = _pymaxwell.VD_PRESET_MUDBOX_ABSOLUTE_TANGENT
VD_PRESET_MUDBOX_OBJECT = _pymaxwell.VD_PRESET_MUDBOX_OBJECT
VD_PRESET_MUDBOX_WORLD = _pymaxwell.VD_PRESET_MUDBOX_WORLD
VD_PRESET_REALFLOW = _pymaxwell.VD_PRESET_REALFLOW
VD_PRESET_MODO = _pymaxwell.VD_PRESET_MODO
FLAG_DO_NOT_OVERRIDE = _pymaxwell.FLAG_DO_NOT_OVERRIDE
FLAG_OVERRIDE_HIDE = _pymaxwell.FLAG_OVERRIDE_HIDE
FLAG_OVERRIDE_HIDE_TO_CAMERA = _pymaxwell.FLAG_OVERRIDE_HIDE_TO_CAMERA
FLAG_OVERRIDE_HIDE_TO_REFL_REFR = _pymaxwell.FLAG_OVERRIDE_HIDE_TO_REFL_REFR
FLAG_OVERRIDE_HIDE_TO_GI = _pymaxwell.FLAG_OVERRIDE_HIDE_TO_GI
FLAG_OVERRIDE_ALL = _pymaxwell.FLAG_OVERRIDE_ALL
BOOLEAN_NONE = _pymaxwell.BOOLEAN_NONE
BOOLEAN_BOX = _pymaxwell.BOOLEAN_BOX
BOOLEAN_SPHERE = _pymaxwell.BOOLEAN_SPHERE
BOOLEAN_PLANE_XY = _pymaxwell.BOOLEAN_PLANE_XY
BOOLEAN_PLANE_YZ = _pymaxwell.BOOLEAN_PLANE_YZ
BOOLEAN_PLANE_ZX = _pymaxwell.BOOLEAN_PLANE_ZX
TYPE_THIN_LENS = _pymaxwell.TYPE_THIN_LENS
TYPE_PINHOLE = _pymaxwell.TYPE_PINHOLE
TYPE_ORTHO = _pymaxwell.TYPE_ORTHO
TYPE_FISHEYE = _pymaxwell.TYPE_FISHEYE
TYPE_SPHERICAL = _pymaxwell.TYPE_SPHERICAL
TYPE_CYLINDRICAL = _pymaxwell.TYPE_CYLINDRICAL
TYPE_PERSPECTIVE = _pymaxwell.TYPE_PERSPECTIVE
TYPE_FRONT = _pymaxwell.TYPE_FRONT
TYPE_TOP = _pymaxwell.TYPE_TOP
TYPE_LEFT = _pymaxwell.TYPE_LEFT
TYPE_BACK = _pymaxwell.TYPE_BACK
TYPE_BOTTOM = _pymaxwell.TYPE_BOTTOM
TYPE_RIGHT = _pymaxwell.TYPE_RIGHT
SUN_DISABLED = _pymaxwell.SUN_DISABLED
SUN_PHYSICAL = _pymaxwell.SUN_PHYSICAL
SUN_CONSTANT = _pymaxwell.SUN_CONSTANT
IBL_LAYER_BACKGROUND = _pymaxwell.IBL_LAYER_BACKGROUND
IBL_LAYER_REFLECTION = _pymaxwell.IBL_LAYER_REFLECTION
IBL_LAYER_REFRACTION = _pymaxwell.IBL_LAYER_REFRACTION
IBL_LAYER_ILLUMINATION = _pymaxwell.IBL_LAYER_ILLUMINATION
COLOR_SPACE_SRGB = _pymaxwell.COLOR_SPACE_SRGB
COLOR_SPACE_ADOBE98 = _pymaxwell.COLOR_SPACE_ADOBE98
COLOR_SPACE_APPLE = _pymaxwell.COLOR_SPACE_APPLE
COLOR_SPACE_PAL = _pymaxwell.COLOR_SPACE_PAL
COLOR_SPACE_NTSC = _pymaxwell.COLOR_SPACE_NTSC
COLOR_SPACE_NTSC1979 = _pymaxwell.COLOR_SPACE_NTSC1979
COLOR_SPACE_WIDEGAMUT = _pymaxwell.COLOR_SPACE_WIDEGAMUT
COLOR_SPACE_PROPHOTO = _pymaxwell.COLOR_SPACE_PROPHOTO
COLOR_SPACE_ECIRRGB = _pymaxwell.COLOR_SPACE_ECIRRGB
COLOR_SPACE_CIE1931 = _pymaxwell.COLOR_SPACE_CIE1931
COLOR_SPACE_BRUCERGB = _pymaxwell.COLOR_SPACE_BRUCERGB
COLOR_SPACE_COLORMATCH = _pymaxwell.COLOR_SPACE_COLORMATCH
COLOR_SPACE_BESTRGB = _pymaxwell.COLOR_SPACE_BESTRGB
COLOR_SPACE_DONRGB4 = _pymaxwell.COLOR_SPACE_DONRGB4
COLOR_SPACE_REC709 = _pymaxwell.COLOR_SPACE_REC709
COLOR_SPACE_UNKNOWN = _pymaxwell.COLOR_SPACE_UNKNOWN
class CsceneInfo(_object):
    """
    Class CsceneInfo

      Small structure that stores information of the scene.

      Example code:

        scene = Cmaxwell(mwcallback);
        info = scene.getSceneInfo();
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CsceneInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CsceneInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["nObjects"] = _pymaxwell.CsceneInfo_nObjects_set
    __swig_getmethods__["nObjects"] = _pymaxwell.CsceneInfo_nObjects_get
    if _newclass:nObjects = _swig_property(_pymaxwell.CsceneInfo_nObjects_get, _pymaxwell.CsceneInfo_nObjects_set)
    __swig_setmethods__["nMeshes"] = _pymaxwell.CsceneInfo_nMeshes_set
    __swig_getmethods__["nMeshes"] = _pymaxwell.CsceneInfo_nMeshes_get
    if _newclass:nMeshes = _swig_property(_pymaxwell.CsceneInfo_nMeshes_get, _pymaxwell.CsceneInfo_nMeshes_set)
    __swig_setmethods__["nTriangles"] = _pymaxwell.CsceneInfo_nTriangles_set
    __swig_getmethods__["nTriangles"] = _pymaxwell.CsceneInfo_nTriangles_get
    if _newclass:nTriangles = _swig_property(_pymaxwell.CsceneInfo_nTriangles_get, _pymaxwell.CsceneInfo_nTriangles_set)
    __swig_setmethods__["nVertexes"] = _pymaxwell.CsceneInfo_nVertexes_set
    __swig_getmethods__["nVertexes"] = _pymaxwell.CsceneInfo_nVertexes_get
    if _newclass:nVertexes = _swig_property(_pymaxwell.CsceneInfo_nVertexes_get, _pymaxwell.CsceneInfo_nVertexes_set)
    __swig_setmethods__["nNormals"] = _pymaxwell.CsceneInfo_nNormals_set
    __swig_getmethods__["nNormals"] = _pymaxwell.CsceneInfo_nNormals_get
    if _newclass:nNormals = _swig_property(_pymaxwell.CsceneInfo_nNormals_get, _pymaxwell.CsceneInfo_nNormals_set)
    __swig_setmethods__["nMaterials"] = _pymaxwell.CsceneInfo_nMaterials_set
    __swig_getmethods__["nMaterials"] = _pymaxwell.CsceneInfo_nMaterials_get
    if _newclass:nMaterials = _swig_property(_pymaxwell.CsceneInfo_nMaterials_get, _pymaxwell.CsceneInfo_nMaterials_set)
    __swig_setmethods__["nBitmaps"] = _pymaxwell.CsceneInfo_nBitmaps_set
    __swig_getmethods__["nBitmaps"] = _pymaxwell.CsceneInfo_nBitmaps_get
    if _newclass:nBitmaps = _swig_property(_pymaxwell.CsceneInfo_nBitmaps_get, _pymaxwell.CsceneInfo_nBitmaps_set)
    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CsceneInfo___str__(self)

    __swig_destroy__ = _pymaxwell.delete_CsceneInfo
    __del__ = lambda self : None;
CsceneInfo_swigregister = _pymaxwell.CsceneInfo_swigregister
CsceneInfo_swigregister(CsceneInfo)

class Cattribute(_object):
    """
    Class Cattribute

      Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
      three components and also a byte marking the default type. Cattribute.activeType can be:
      MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
      Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
      be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
      a bitmap.
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cattribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cattribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["activeType"] = _pymaxwell.Cattribute_activeType_set
    __swig_getmethods__["activeType"] = _pymaxwell.Cattribute_activeType_get
    if _newclass:activeType = _swig_property(_pymaxwell.Cattribute_activeType_get, _pymaxwell.Cattribute_activeType_set)
    __swig_setmethods__["value"] = _pymaxwell.Cattribute_value_set
    __swig_getmethods__["value"] = _pymaxwell.Cattribute_value_get
    if _newclass:value = _swig_property(_pymaxwell.Cattribute_value_get, _pymaxwell.Cattribute_value_set)
    __swig_setmethods__["rgb"] = _pymaxwell.Cattribute_rgb_set
    __swig_getmethods__["rgb"] = _pymaxwell.Cattribute_rgb_get
    if _newclass:rgb = _swig_property(_pymaxwell.Cattribute_rgb_get, _pymaxwell.Cattribute_rgb_set)
    __swig_setmethods__["textureMap"] = _pymaxwell.Cattribute_textureMap_set
    __swig_getmethods__["textureMap"] = _pymaxwell.Cattribute_textureMap_get
    if _newclass:textureMap = _swig_property(_pymaxwell.Cattribute_textureMap_get, _pymaxwell.Cattribute_textureMap_set)
    __swig_setmethods__["spectrumFile"] = _pymaxwell.Cattribute_spectrumFile_set
    __swig_getmethods__["spectrumFile"] = _pymaxwell.Cattribute_spectrumFile_get
    if _newclass:spectrumFile = _swig_property(_pymaxwell.Cattribute_spectrumFile_get, _pymaxwell.Cattribute_spectrumFile_set)
    def __init__(self, *args): 
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        this = _pymaxwell.new_Cattribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Cattribute
    __del__ = lambda self : None;
    def __str__(self):
        """
        Class Cattribute

          Cattribute represents a parameter that can be a number, rgb or texture map. It stores these
          three components and also a byte marking the default type. Cattribute.activeType can be:
          MAP_TYPE_VALUE, MAP_TYPE_RGB, MAP_TYPE_BITMAP or MAP_TYPE_SPECTRUM_FILE.
          Most of the parameters can be set with 2 of this 3 types. In example, a reflectance map can
          be set using an RGB or using a bitmap. Roughness, Anisotropy... can be set using a number or
          a bitmap.
        """
        return _pymaxwell.Cattribute___str__(self)

Cattribute_swigregister = _pymaxwell.Cattribute_swigregister
Cattribute_swigregister(Cattribute)

class CemitterPair(_object):
    """
    Class CemitterPair

      Class used to set the emitter pair when the
      emission type is set to Color + Luminance

      Emitters can be defined:
        1. Using color + luminance
        2. Using Temperature of emission
        3. Using an MXI texture
      When emitters are set using color + luminance the color can be set:
        1.1.a Using RGB color
        1.1.b Using Correlated Temperature color
      When emitters are set using color + luminance the luminance can be set:
        1.2.a Using Watts and efficacy
        1.2.b LuminousPower (Lumen)
        1.2.c illuminance (Lumen/m2)
        1.2.d luminousIntensity (Cd)
        1.2.b luminance (Cd/m2)
        CemitterPair is used to read/write each parameter

      Example code:
        emitterPair = CemitterPair()
        emitterPair.rgb.assign( rgb_color );
        emitterPair.xyz.assign( xyz_color );
        emitterPair.temperature = 6500.0;
        emitterPair.watts = 40.0;
        emitterPair.luminousEfficacy = 17.6;
        emitterPair.luminousPower = 100.0;
        emitterPair.illuminance = 100.0;
        emitterPair.luminousIntensity = 100.0;
        emitterPair.luminance = 100.0;
        newEmitter.setPair( emitterPair );

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CemitterPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CemitterPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rgb"] = _pymaxwell.CemitterPair_rgb_set
    __swig_getmethods__["rgb"] = _pymaxwell.CemitterPair_rgb_get
    if _newclass:rgb = _swig_property(_pymaxwell.CemitterPair_rgb_get, _pymaxwell.CemitterPair_rgb_set)
    __swig_setmethods__["xyz"] = _pymaxwell.CemitterPair_xyz_set
    __swig_getmethods__["xyz"] = _pymaxwell.CemitterPair_xyz_get
    if _newclass:xyz = _swig_property(_pymaxwell.CemitterPair_xyz_get, _pymaxwell.CemitterPair_xyz_set)
    __swig_setmethods__["temperature"] = _pymaxwell.CemitterPair_temperature_set
    __swig_getmethods__["temperature"] = _pymaxwell.CemitterPair_temperature_get
    if _newclass:temperature = _swig_property(_pymaxwell.CemitterPair_temperature_get, _pymaxwell.CemitterPair_temperature_set)
    __swig_setmethods__["watts"] = _pymaxwell.CemitterPair_watts_set
    __swig_getmethods__["watts"] = _pymaxwell.CemitterPair_watts_get
    if _newclass:watts = _swig_property(_pymaxwell.CemitterPair_watts_get, _pymaxwell.CemitterPair_watts_set)
    __swig_setmethods__["luminousEfficacy"] = _pymaxwell.CemitterPair_luminousEfficacy_set
    __swig_getmethods__["luminousEfficacy"] = _pymaxwell.CemitterPair_luminousEfficacy_get
    if _newclass:luminousEfficacy = _swig_property(_pymaxwell.CemitterPair_luminousEfficacy_get, _pymaxwell.CemitterPair_luminousEfficacy_set)
    __swig_setmethods__["luminousPower"] = _pymaxwell.CemitterPair_luminousPower_set
    __swig_getmethods__["luminousPower"] = _pymaxwell.CemitterPair_luminousPower_get
    if _newclass:luminousPower = _swig_property(_pymaxwell.CemitterPair_luminousPower_get, _pymaxwell.CemitterPair_luminousPower_set)
    __swig_setmethods__["illuminance"] = _pymaxwell.CemitterPair_illuminance_set
    __swig_getmethods__["illuminance"] = _pymaxwell.CemitterPair_illuminance_get
    if _newclass:illuminance = _swig_property(_pymaxwell.CemitterPair_illuminance_get, _pymaxwell.CemitterPair_illuminance_set)
    __swig_setmethods__["luminousIntensity"] = _pymaxwell.CemitterPair_luminousIntensity_set
    __swig_getmethods__["luminousIntensity"] = _pymaxwell.CemitterPair_luminousIntensity_get
    if _newclass:luminousIntensity = _swig_property(_pymaxwell.CemitterPair_luminousIntensity_get, _pymaxwell.CemitterPair_luminousIntensity_set)
    __swig_setmethods__["luminance"] = _pymaxwell.CemitterPair_luminance_set
    __swig_getmethods__["luminance"] = _pymaxwell.CemitterPair_luminance_get
    if _newclass:luminance = _swig_property(_pymaxwell.CemitterPair_luminance_get, _pymaxwell.CemitterPair_luminance_set)
    def __init__(self): 
        """__init__(self) -> CemitterPair"""
        this = _pymaxwell.new_CemitterPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CemitterPair
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CemitterPair___str__(self)

CemitterPair_swigregister = _pymaxwell.CemitterPair_swigregister
CemitterPair_swigregister(CemitterPair)

class CmaxwellMaterialIterator(_object):
    """
    Class CmaxwellMaterialIterator

      Class used to parse a list of materials.

      Example code:

        scene = Cmaxwell(mwcallback);
        scene.readMXS('scene.mxs';
        it = CmaxwellMaterialIterator();
        material = it.first( scene );
        while material.isNull() == False:
          #do something with the material...
          material = it.next();

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellMaterialIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellMaterialIterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CmaxwellMaterialIterator"""
        this = _pymaxwell.new_CmaxwellMaterialIterator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellMaterialIterator
    __del__ = lambda self : None;
    def first(self, *args):
        """first(self, Cmaxwell pMaxwell) -> CmaxwellMaterial"""
        return _pymaxwell.CmaxwellMaterialIterator_first(self, *args)

    def next(self):
        """next(self) -> CmaxwellMaterial"""
        return _pymaxwell.CmaxwellMaterialIterator_next(self)

CmaxwellMaterialIterator_swigregister = _pymaxwell.CmaxwellMaterialIterator_swigregister
CmaxwellMaterialIterator_swigregister(CmaxwellMaterialIterator)

class CmaxwellMaterial(_object):
    """
    Class CmaxwellMaterial

      Class that contains the Maxwell material description.

      Example code:

        scene = Cmaxwell(mwcallback);
        material = scene.createMaterial('materialname');
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellMaterial, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def createCopy(self):
        """
        Method:      createCopy() -> CmaxwellMaterial
        Description: Creates a full copy of the material and returns it.
        """
        return _pymaxwell.CmaxwellMaterial_createCopy(self)

    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Removes the material from the scene and destroys it.
        """
        return _pymaxwell.CmaxwellMaterial_free(self)

    def extract(self):
        """
        Method:      extract() -> 1 = Success, 0 = Fail
        Description: Removes the material from the scene.
        """
        return _pymaxwell.CmaxwellMaterial_extract(self)

    def getVersion(*args):
        """
        Method:      getVersion( filename ) -> (float,ok)
        Description: Returns the version number of the material.
        """
        return _pymaxwell.CmaxwellMaterial_getVersion(*args)

    if _newclass:getVersion = staticmethod(getVersion)
    __swig_getmethods__["getVersion"] = lambda x: getVersion
    def setName(self, *args):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets name of the material.
        """
        return _pymaxwell.CmaxwellMaterial_setName(self, *args)

    def getName(self):
        """
        Method:      getName() -> string
        Description: Get name of the material.
        """
        return _pymaxwell.CmaxwellMaterial_getName(self)

    def setReference(self, *args):
        """
        Method:      setReference( enabled, mxmPath ) -> 1 = Success, 0 = Fail
        Description: Sets the path to the MXM file referenced by this material. By default materials
                     are not referenced but embeded in the scene.
        Parameter:   enabled = 1 (referenced) or 0 (embeded in the scene, default).
        Parameter:   mxmPath = Path to the MXM material file, only if the material is a reference.
        """
        return _pymaxwell.CmaxwellMaterial_setReference(self, *args)

    def getReference(self):
        """
        Method:      getReference() -> (mxmPath,enabled)
        Description: Gets the path to the MXM file referenced by this material. By default materials
                     are not referenced but embeded in the scene.
        Parameter:   enabled = 1 (referenced) or 0 (embeded in the scene, default).
        Parameter:   mxmPath = Path to the MXM material file, only if the material is a reference.
        """
        return _pymaxwell.CmaxwellMaterial_getReference(self)

    def setDescription(self, *args):
        """
        Method:      setDescription( string ) -> 1 = Success, 0 = Fail
        Description: User description of the material.
        """
        return _pymaxwell.CmaxwellMaterial_setDescription(self, *args)

    def getDescription(self):
        """
        Method:      getDescription() -> string
        Description: User description of the material.
        """
        return _pymaxwell.CmaxwellMaterial_getDescription(self)

    def setUuid(self, *args):
        """
        Method:      setUuid( string ) -> 1 = Success, 0 = Fail
        Description: Uuid that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellMaterial_setUuid(self, *args)

    def getUuid(self):
        """
        Method:      getUuid() -> string
        Description: Unique ID that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellMaterial_getUuid(self)

    def setDirty(self):
        """
        Method:      setDirty() -> byte
        Description: Method used internally in interactive mode (not used from outside).
        """
        return _pymaxwell.CmaxwellMaterial_setDirty(self)

    def isDirty(self):
        """Method:      isDirty() -> (bool,ok)"""
        return _pymaxwell.CmaxwellMaterial_isDirty(self)

    def forceToWriteIntoScene(self):
        """
        Method:      forceToWriteIntoScene() -> 1 = Success, 0 = Fail
        Description: Method to embed a material in the scene.
        NOTE:        this Material will be write into the MXS.
        """
        return _pymaxwell.CmaxwellMaterial_forceToWriteIntoScene(self)

    def belongToScene(self):
        """
        Method:      belongToScene( ) -> (bool,ok)
        Description: Material belongs to the scene.
        """
        return _pymaxwell.CmaxwellMaterial_belongToScene(self)

    def isEmpty(self):
        """
        Method:      isEmpty() -> (bool,ok)
        Description: Checks whether the material have layers.
        """
        return _pymaxwell.CmaxwellMaterial_isEmpty(self)

    def setEmpty(self, *args):
        """
        Method:      setEmpty( resetTopProperties ) -> 1 = Success, 0 = Fail
        Description: Empties the material removing all the layers.
                     Material not null but without layers.
        Parameter:   resetTopProperties = If true it also resets the global properties of the material.

        """
        return _pymaxwell.CmaxwellMaterial_setEmpty(self, *args)

    def read(self, *args):
        """
        Method:      read( filename ) -> 1 = Success, 0 = Fail
        Description: Reads a material from disk.
        Parameter:   filename = full path to the MXM file.
        """
        return _pymaxwell.CmaxwellMaterial_read(self, *args)

    def write(self, *args):
        """
        Method:      write( filename ) -> 1 = Success, 0 = Fail
        Description: Writes the material to disk.
        Parameter:   filename = full path to the MXM file.
        """
        return _pymaxwell.CmaxwellMaterial_write(self, *args)

    def setDispersion(self, *args):
        """
        Method:      setDispersion( bool ) -> 1 = Sucess, 0 = Fail
        Description: Dispersion OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_setDispersion(self, *args)

    def getDispersion(self):
        """
        Method:      getDispersion( ) -> (bool,ok)
        Description: Dispersion OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_getDispersion(self)

    def setMatte(self, *args):
        """
        Method:      setMatte( bool ) -> 1 = Success, 0 = Fail
        Description: Matte OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_setMatte(self, *args)

    def getMatte(self):
        """
        Method:      getMatte() -> (bool,ok)
        Description: Matte OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_getMatte(self)

    def setMatteShadow(self, *args):
        """
        Method:      setMatteShadow( bool ) -> 1 = Success, 0 = Fail
        Description: Matte Shadow OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_setMatteShadow(self, *args)

    def getMatteShadow(self):
        """
        Method:      getMatteShadow() -> (bool,ok)
        Description: Matte Shadow OFF by default.
        """
        return _pymaxwell.CmaxwellMaterial_getMatteShadow(self)

    def addLayer(self):
        """
        Method:      addLayer() -> CmaterialLayer
        Description: Adds a layer to the material.
        """
        return _pymaxwell.CmaxwellMaterial_addLayer(self)

    def getNumLayers(self):
        """
        Method:      getNumLayers() -> (int,ok)
        Description: Returns the number of layers in the material.
        """
        return _pymaxwell.CmaxwellMaterial_getNumLayers(self)

    def getLayer(self, *args):
        """
        Method:      getLayer( index ) -> CmaterialLayer [reference]
        Description: Returns layer with the given index.
        """
        return _pymaxwell.CmaxwellMaterial_getLayer(self, *args)

    def setAttribute(self, *args):
        """
        Method:      setAttribute(name,Cattribute) -> 1 = Success, 0 = Fail
        Description: sets the global bump of the material.
                     I.e. to set the bump as a numeric value (not a texture)
        Parameter:   name = 'bump'
        Parameter:   map = Cattribute()
        Example code:
          att = Cattribute();
          att.type = TYPE_VALUE;
          att.value = 100.0;
          material.setAttribute( 'bump', att );
        """
        return _pymaxwell.CmaxwellMaterial_setAttribute(self, *args)

    def getAttribute(self, *args):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: gets the global bump of the material.
        Parameter:   name = 'bump' always.
        """
        return _pymaxwell.CmaxwellMaterial_getAttribute(self, *args)

    def setNormalMapState(self, *args):
        """
        Method:      setNormalMapState( bool ) -> 1 = Success, 0 = Fail
        Description: Enables/disables  normal mapping for the global bump parameter.
        """
        return _pymaxwell.CmaxwellMaterial_setNormalMapState(self, *args)

    def getNormalMapState(self):
        """
        Method:      getNormalMapState() -> (bool,ok)
        Description: Normal mapping for the global bump parameter.
        """
        return _pymaxwell.CmaxwellMaterial_getNormalMapState(self)

    def setColorID(self, *args):
        """
        Method:      setColorID( Crgb ) -> 1 = Success, 0 = Fail
        Description: Sets the color used by this material in the Material ID render channel.
                     RGB values must always be in the 0-1 range.
        """
        return _pymaxwell.CmaxwellMaterial_setColorID(self, *args)

    def getColorID(self):
        """
        Method:      getColorID() -> (Crgb,ok)
        Description: gets the color used by this material in the Material ID render channel.
                     rgb values must always be in the 0-1 range.
        """
        return _pymaxwell.CmaxwellMaterial_getColorID(self)

    def enableDisplacement(self, *args):
        """
        Method:      enableDisplacement( bool ) -> 1 = Success, 0 = Fail
        Description: Sets displacement on/off.
        """
        return _pymaxwell.CmaxwellMaterial_enableDisplacement(self, *args)

    def isDisplacementEnabled(self):
        """
        Method:      isDisplacementEnabled() -> (bool,ok)
        Description: Gets displacement state.
        """
        return _pymaxwell.CmaxwellMaterial_isDisplacementEnabled(self)

    def setDisplacementMap(self, *args):
        """
        Method:      setDisplacementMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets the layer's displacement map. Only one displacement element
                     per layer is allowed.
        """
        return _pymaxwell.CmaxwellMaterial_setDisplacementMap(self, *args)

    def getDisplacementMap(self):
        """
        Method:      getDisplacementMap() -> (CtextureMap,ok)
        Description: Gets the layer's displacement map. Only one displacement element
                     per layer is allowed.
        """
        return _pymaxwell.CmaxwellMaterial_getDisplacementMap(self)

    def setDisplacementCommonParameters(self, *args):
        """
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        Method:      setDisplacementCommonParameters( displacementType, subdivisionLevel,
                       smoothness, offset, subdivisionType, interpolationUvType, minLOD, maxLOD )
                     -> 1 = Success, 0 = Fail
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        """
        return _pymaxwell.CmaxwellMaterial_setDisplacementCommonParameters(self, *args)

    def getDisplacementCommonParameters(self):
        """
        Method:      getDisplacementCommonParameters()
                     -> (displacementType,subdivisionLevel,smoothness,offset,subdivisionType,
                         interpolationUvType,minLOD,maxLOD,ok)
        Parameter:   displacementType ->
                         FLAG_DISPLACEMENT_ON_THE_FLY - On-The-Fly displacement
                         FLAG_DISPLACEMENT_PRETESSELLATED - Pretessellated displacement (default)
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_BLACK - 3D Relative Tangent. Level zero black (i.e. Mudbox).
                         FLAG_DISPLACEMENT_3D_REL_TANGENT_ZERO_GREY - 3D Relative Tangent. Level zero mid grey (i.e. 3dcoat).
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_BLACK - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_ABS_TANGENT_ZERO_GREY - 3D Absolute Tangent. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_BLACK - 3D World. Level zero black.
                         FLAG_DISPLACEMENT_3D_WORLD_GREY - 3D World. Level zero grey
                         FLAG_DISPLACEMENT_3D_REALFLOW - 3D RealFlow
        Parameter:   subdivisionLevel: subdivision level. Range:(1-1E6)
        Parameter:   smoothness. Enables/Disables smooth ( 0 or 1 ).
                     It's a number instead of a bool for legacy reasons.
        Parameter:   offset. Range:(-1000.0, 1000.0)
        Parameter:   subdivisionType: DISPLACEMENT_SUBDIVISION_FLAT or
                     DISPLACEMENT_SUBDIVISION_LOOP_OR_CATMULL (default)
        Parameter:   interpolationUvType: DISPLACEMENT_UV_NONE, DISPLACEMENT_UV_EDGES,
                     DISPLACEMENT_UV_EDGES_AND_CORNERS (default) or DISPLACEMENT_UV_SHARP.
        Parameter:   minLOD. Range:(0.0-1E6). (default = 0 ): Minimum size
                     in pixels to enable displacement subdivision
        Parameter:   maxLOD. Range:(0.0-1E6). (default = 0 ): If pixel size is
                     greater than maxLOD, maximum subdivision level is used.
        Note:        If both minLOD & maxLOD are 0 no LOD is used. 
        """
        return _pymaxwell.CmaxwellMaterial_getDisplacementCommonParameters(self)

    def setHeightMapDisplacementParameters(self, *args):
        """
        Method:      setHeightMapDisplacementParameters( height, absoluteHeight, adaptive )
                     -> 1 = success, 0 = Fail
        Parameter: height. Range (-1000.0, 1000.0)
        Parameter: absoluteHeight. Use real units for height.
        Parameter: adaptive. Enable auto adaptive subdivision
        """
        return _pymaxwell.CmaxwellMaterial_setHeightMapDisplacementParameters(self, *args)

    def getHeightMapDisplacementParameters(self):
        """
        Method:      getHeightMapDisplacementParameters() -> (height,absoluteHeight,adaptive,ok)
        Parameter:   height. Range (-1000.0, 1000.0)
        Parameter:   absoluteHeight. Use real units for height.
        Parameter:   adaptive. Auto adaptive subdivision enabled.
        """
        return _pymaxwell.CmaxwellMaterial_getHeightMapDisplacementParameters(self)

    def setVectorDisplacementParameters(self, *args):
        """
        Method:      setVectorDisplacementParameters( Cvector scale, transformType, mapping, preset )
                     -> 1 = Success, 0 = Fail
        Parameter:   scale. Scale multiplier in each axis.
        Parameter:   transformType: VD_TANGENT (default), VD_OBJECT, VD_WORLD or VD_REALFLOW.
                     or VD_UV_SHARP
        Parameter:   mapping: VD_XYZ (default), VD_XZY, VD_YZX, VD_YXZ, VD_ZXY or VD_ZYX.
        Parameter:   preset: VD_PRESET_CUSTOM, VD_PRESET_ZBRUSH_TANGENT_TYPE_3,
                     VD_PRESET_ZBRUSH_WORLD, VD_PRESET_MUDBOX_ABSOLUTE_TANGENT, VD_PRESET_MUDBOX_WORLD
                     or VD_PRESET_REALFLOW
        """
        return _pymaxwell.CmaxwellMaterial_setVectorDisplacementParameters(self, *args)

    def getVectorDisplacementParameters(self):
        """
        Method: getVectorDisplacementParameters() -> (scale,transformType,mapping,preset,ok)
        Parameter:   scale. Scale multiplier in each axis.
        Parameter:   transformType: VD_TANGENT (default), VD_OBJECT, VD_WORLD or VD_REALFLOW.
                     or VD_UV_SHARP
        Parameter:   mapping: VD_XYZ (default), VD_XZY, VD_YZX, VD_YXZ, VD_ZXY or VD_ZYX.
        Parameter:   preset: VD_PRESET_CUSTOM, VD_PRESET_ZBRUSH_TANGENT_TYPE_3,
                     VD_PRESET_ZBRUSH_WORLD, VD_PRESET_MUDBOX_ABSOLUTE_TANGENT, VD_PRESET_MUDBOX_WORLD
                     or VD_PRESET_REALFLOW
        """
        return _pymaxwell.CmaxwellMaterial_getVectorDisplacementParameters(self)

    def hasMaterialModifier(self):
        """hasMaterialModifier(self) -> byte"""
        return _pymaxwell.CmaxwellMaterial_hasMaterialModifier(self)

    def getMaterialModifierExtensionParams(self):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell.CmaxwellMaterial_getMaterialModifierExtensionParams(self)

    def applyMaterialModifierExtension(self, *args):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell.CmaxwellMaterial_applyMaterialModifierExtension(self, *args)

    def cleanMaterialModifierExtension(self):
        """Method:      getMaterialModifierExtensionParams() -> (MxParamList,ok)"""
        return _pymaxwell.CmaxwellMaterial_cleanMaterialModifierExtension(self)

    def setPreview(self, *args):
        """
        Method:      setPreview( image ) -> 1 = Success, 0 = Fail
        Description: Sets preview image of the material.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell.CmaxwellMaterial_setPreview(self, *args)

    def getPreview(self):
        """
        Method:      getPreview() -> (image,ok)
        Description: Gets preview image of the material.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell.CmaxwellMaterial_getPreview(self)

    def setGlobalMap(self, *args):
        """
        Method:      setGlobalMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets the global map used as multiplier. It affects all the maps of the material
                     with useGlobalMap = 1.
        """
        return _pymaxwell.CmaxwellMaterial_setGlobalMap(self, *args)

    def getGlobalMap(self):
        """
        Method:      getGlobalMap() -> (CtextureMap,ok)
        Description: Gets the global map used as multiplier.
        """
        return _pymaxwell.CmaxwellMaterial_getGlobalMap(self)

    def setActiveDisplayMap(self, *args):
        """
        Method:      setActiveDisplayMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Sets  the active map shown in the Maxwell Studio viewport. If there is no
                     active map, the SDK returns the first map found. If there are no maps in the
                     material, map.pFileName returns NULL.
        """
        return _pymaxwell.CmaxwellMaterial_setActiveDisplayMap(self, *args)

    def getActiveDisplayMap(self):
        """
        Method:      getActiveDisplayMap() -> (CtextureMap,ok)
        Description: Gets the active map shown in the Maxwell Studio viewport. If there is no
                     active map, the SDK returns the first map found. If there are no maps in the
                     material, map.pFileName returns NULL.
        """
        return _pymaxwell.CmaxwellMaterial_getActiveDisplayMap(self)

    def getNumberOfChannelsNeeded(self):
        """
        Method:      getNumberOfChannelsNeeded() -> int
        Description: Returns the number of UV channels needed for using this material.
        """
        return _pymaxwell.CmaxwellMaterial_getNumberOfChannelsNeeded(self)

    def getMaps(self, *args):
        """
        Method:      getMaps( addOnlyMapsWithBitmapsUsed ) -> list (CtextureMap)
        Description: Returns a list with all the Cmaps used in this material. If this material has a
                     reference to another material, it does not take into account CtextureMap of the
                     referenced MXM. If addOnlyMapsWithBitmapsUsed is True, maps that contain
                     bitmaps that are not used won't be added to the list (i.e if the active
                     reflectance is set as a rgb color instead of as a bitmap, it won't be added to
                     the list of maps).

        """
        return _pymaxwell.CmaxwellMaterial_getMaps(self, *args)

    def getDependencies(self, searchInsideReferences = True):
        """
        Method:      getDependencies(searchInsideReferences = True) -> (list,ok)
        Description: Returns a list of strings with all the extern depencencies of the material
                     (textures, ior files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        Parameter:   searchInsideReferences. If true the function search for dependencies also in
                     the referenced MXM path if exists. searchInsideReferences is true by default
        Method:      getDependencies(searchInsideReferences = True) -> (list,ok)
        Description: Returns a list of strings with all the extern depencencies of the material
                     (textures, ior files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        Parameter:   searchInsideReferences. If true the function search for dependencies also in
                     the referenced MXM path if exists. searchInsideReferences is true by default
        """
        return _pymaxwell.CmaxwellMaterial_getDependencies(self, searchInsideReferences)

    def getMxmInfo(*args):
        """
        Method:      getMxmInfo(path) -> (name,description,image,ok)
        Description: Get information from an MXM file.
        """
        return _pymaxwell.CmaxwellMaterial_getMxmInfo(*args)

    if _newclass:getMxmInfo = staticmethod(getMxmInfo)
    __swig_getmethods__["getMxmInfo"] = lambda x: getMxmInfo
    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialLayer was initialized
        """
        return _pymaxwell.CmaxwellMaterial_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CmaxwellMaterial___str__(self)

    __swig_destroy__ = _pymaxwell.delete_CmaxwellMaterial
    __del__ = lambda self : None;
CmaxwellMaterial_swigregister = _pymaxwell.CmaxwellMaterial_swigregister
CmaxwellMaterial_swigregister(CmaxwellMaterial)

def CmaxwellMaterial_getVersion(*args):
  """
    Method:      getVersion( filename ) -> (float,ok)
    Description: Returns the version number of the material.
    """
  return _pymaxwell.CmaxwellMaterial_getVersion(*args)

def CmaxwellMaterial_getMxmInfo(*args):
  """
    Method:      getMxmInfo(path) -> (name,description,image,ok)
    Description: Get information from an MXM file.
    """
  return _pymaxwell.CmaxwellMaterial_getMxmInfo(*args)

class CmaterialLayer(_object):
    """
    Class CmaterialLayer

      Class that contains the Maxwell material layer description.

      Example code:

        scene = Cmaxwell(mwcallback);
        material = scene.createMaterial('materialname');
        layer = material.addLayer();
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaterialLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaterialLayer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setEnabled(self, *args):
        """
        Method:      setEnabled( bool ) -> 1 = Succeed, 0 = Fail
        Description: Switches on/off the layer.
        """
        return _pymaxwell.CmaterialLayer_setEnabled(self, *args)

    def getEnabled(self):
        """
        Method:      getEnabled() -> (bool,ok)
        Description: Layer enabled state.
        """
        return _pymaxwell.CmaterialLayer_getEnabled(self)

    def setName(self, *args):
        """
        Method:      setName( string ) -> 1 = Succeed, 0 = Fail
        Description: Sets the layer name.
        """
        return _pymaxwell.CmaterialLayer_setName(self, *args)

    def getName(self):
        """
        Method:      getName() -> (string,ok)
        Description: Gets the layer name
        """
        return _pymaxwell.CmaterialLayer_getName(self)

    def setStackedBlendingMode(self, *args):
        """
        Method:      setStackedBlendingMode( mode ) -> 1 = Sucess, 0 = Fail
        Description: Sets the blending mode of this layer.
                     It is useful when layers are stacked only.
        Parameter:   mode -> BLENDING_NORMAL or BLENDING_ADDITIVE.
        """
        return _pymaxwell.CmaterialLayer_setStackedBlendingMode(self, *args)

    def getStackedBlendingMode(self):
        """
        Method:      getStackedBlendingMode( ) -> (mode,ok)
        Description: sets the blending mode of this layer.
                     It is useful when layers are stacked only.
        Returns:     BLENDING_NORMAL or BLENDING_ADDITIVE.
        """
        return _pymaxwell.CmaterialLayer_getStackedBlendingMode(self)

    def setWeight(self, *args):
        """
        Method:      setWeight( Cmap ) -> 1 = Sucess, 0 = Fail
        Description: Sets the layer mask.
        """
        return _pymaxwell.CmaterialLayer_setWeight(self, *args)

    def getWeight(self):
        """
        Method:      getWeight() -> (Cattribute,ok)
        Description: Gets the layer mask.
        """
        return _pymaxwell.CmaterialLayer_getWeight(self)

    def createEmitter(self):
        """
        Method:      createEmitter() -> CmaterialEmitter [reference]
        Description: Creates emitter. Only one emitter per layer is allowed.
        """
        return _pymaxwell.CmaterialLayer_createEmitter(self)

    def getEmitter(self):
        """
        Method:      getEmitter() -> CmaterialEmitter [reference]
        Description: Gets the emitter material from this layer.
        """
        return _pymaxwell.CmaterialLayer_getEmitter(self)

    def freeEmitter(self):
        """
        Method:      freeEmitter() -> CmaterialEmitter
        Description: Removes the emitter from this layer.
        """
        return _pymaxwell.CmaterialLayer_freeEmitter(self)

    def addBSDF(self):
        """
        Method:      addBSDF() -> Cbsdf [reference]
        Description: Create and return a new BSDF added to the layer.

        """
        return _pymaxwell.CmaterialLayer_addBSDF(self)

    def getNumBSDFs(self):
        """
        Method:      getNumBSDFs() -> (int,ok)
        Description: Number of BSDFs in the layer.

        """
        return _pymaxwell.CmaterialLayer_getNumBSDFs(self)

    def getBSDF(self, *args):
        """
        Method:      getBSDF( n ) -> Cbsdf [reference]
        Description: Gets the nth BSDF.

        """
        return _pymaxwell.CmaterialLayer_getBSDF(self, *args)

    def setAttribute(self, *args):
        """
        Method: setAttribute( name, Cattribute )
        Description: Wrapper function provided for convenience to provide an easy way for setting any
                     parameter.
        Parameter:   name -> 'weight'.
        """
        return _pymaxwell.CmaterialLayer_setAttribute(self, *args)

    def getAttribute(self, *args):
        """
        Method: getAttribute( name ) -> (Cattribute,ok)
        Description: Wrapper function provided for convenience to provide an easy way for setting any
                     parameter.
        Parameter:   name -> 'weight'.
        """
        return _pymaxwell.CmaterialLayer_getAttribute(self, *args)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialLayer was initialized.
        """
        return _pymaxwell.CmaterialLayer_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CmaterialLayer___str__(self)

    __swig_destroy__ = _pymaxwell.delete_CmaterialLayer
    __del__ = lambda self : None;
CmaterialLayer_swigregister = _pymaxwell.CmaterialLayer_swigregister
CmaterialLayer_swigregister(CmaterialLayer)

class CmaterialEmitter(_object):
    """
    Class CmaterialEmitter

      EMITTER COMPONENT:
      Each layer can contains an emitter in the top (just one per layer)
      The emitter component is created calling CmaterialLayer.createEmitter()
      Any emitter can be set through one of the following ways:
        1. Through a color + luminance pair.
          1.a. The Color can be set through a RGB value or a Correlated Temperature Color.
          1.b. The luminance can be set through different emission units (Watts, lumens, 
               candelas..) plus an IES FILE (if any).
        2. Through a temperature value in Kelvin.
        3. Through an emission texture.
      The active emission type (1,2 or 3) is set through setActiveMultiValue
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaterialEmitter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaterialEmitter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setState(self, *args):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the emitter
        """
        return _pymaxwell.CmaterialEmitter_setState(self, *args)

    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Checks whether the emitter is enabled.
        """
        return _pymaxwell.CmaterialEmitter_getState(self)

    def setPair(self, *args):
        """
        Method:      setPair( CemitterPair ) -> 1 = Success, 0 = Fail
        Description: Sets pair.
        """
        return _pymaxwell.CmaterialEmitter_setPair(self, *args)

    def getPair(self):
        """
        Method:      getPair() -> (CemitterPair,ok)
        Description: Gets pair.
        """
        return _pymaxwell.CmaterialEmitter_getPair(self)

    def setActivePair(self, *args):
        """
        Method:      setActivePair( colorType, units ) -> 1 = Success, 0 = Fail
        Description: Used to set the active types for CemitterPair. See CemitterPair declaration to
                     know how to fill a CemitterPair struct.
        Parameter:   colorType -> EMISSION_RGB, EMISSION_XYZ or EMISSION_COLOR_TEMPERATURE.
        Parameter:   units -> EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY,
                     EMISSION_UNITS_LUMINOUS_POWER, EMISSION_UNITS_ILLUMINANCE,
                     EMISSION_UNITS_LUMINOUS_INTENSITY or EMISSION_UNITS_LUMINANCE.
        """
        return _pymaxwell.CmaterialEmitter_setActivePair(self, *args)

    def getActivePair(self):
        """
        Method:      getPair() -> (colorType,units,ok)
        Description: Gets the active types for CemitterPair.
        Parameter:   colorType -> EMISSION_RGB, EMISSION_XYZ or EMISSION_COLOR_TEMPERATURE.
        Parameter:   units -> EMISSION_UNITS_WATTS_AND_LUMINOUS_EFFICACY,
                     EMISSION_UNITS_LUMINOUS_POWER, EMISSION_UNITS_ILLUMINANCE,
                     EMISSION_UNITS_LUMINOUS_INTENSITY or EMISSION_UNITS_LUMINANCE.
        """
        return _pymaxwell.CmaterialEmitter_getActivePair(self)

    def setTemperature(self, *args):
        """
        Method:      setTemperature( float ) -> 1 = Success, 0 = Fail
        Description: Sets temperature.
        """
        return _pymaxwell.CmaterialEmitter_setTemperature(self, *args)

    def getTemperature(self):
        """
        Method:      getTemperature() -> (temperature,ok)
        Description: Gets temperature.
        """
        return _pymaxwell.CmaterialEmitter_getTemperature(self)

    def setMXI(self, *args):
        """
        Method:      setMXI( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the emission texture of this emitter material (if any).
                     Accepts any high dynamic range image format (MXI,EXR,HDR..).
                     map.type will be assumed as TYPE_BITMAP.
        """
        return _pymaxwell.CmaterialEmitter_setMXI(self, *args)

    def getMXI(self):
        """
        Method:      getMXI() -> (Cattribute,ok)
        Description: Gets the emission texture of this emitter material (if any).
                     map.type will be assumed as MAP_TYPE_BITMAP.
        """
        return _pymaxwell.CmaterialEmitter_getMXI(self)

    def setActiveEmissionType(self, *args):
        """
        Method:      setActiveEmissionType( type ) -> 1 = Success, 0 = Fail
        Description: Used to choose which emission type (MXI,PAIR,TEMPERATURE) is enabled.
        Parameter:   type = EMISSION_TYPE_PAIR, EMISSION_TYPE_TEMPERATURE, EMISSION_TYPE_MXI or
                     EMISSION_TYPE_SPECTRUM_FILE.
        """
        return _pymaxwell.CmaterialEmitter_setActiveEmissionType(self, *args)

    def getActiveEmissionType(self):
        """
        Method:      getActiveEmissionType() -> (type,ok)
        Description: Used to check the emission type.
        Parameter:   type = EMISSION_TYPE_PAIR, EMISSION_TYPE_TEMPERATURE, EMISSION_TYPE_MXI or
                     EMISSION_TYPE_SPECTRUM_FILE.
        """
        return _pymaxwell.CmaterialEmitter_getActiveEmissionType(self)

    def setLobeType(self, *args):
        """
        Method:      setLobeType( type ) -> 1 = Success, 0 = Fail
        Description: Used to choose which lobe type is enabled.
        Parameter:   type -> EMISSION_LOBE_DEFAULT, EMISSION_LOBE_IES or EMISSION_LOBE_BITMAP.
        """
        return _pymaxwell.CmaterialEmitter_setLobeType(self, *args)

    def getLobeType(self):
        """
        Method:      getLobeType() -> (type,ok)
        Description: Used to choose which lobe type is enabled.
        Parameter:   type -> EMISSION_LOBE_DEFAULT, EMISSION_LOBE_IES or EMISSION_LOBE_BITMAP.
        """
        return _pymaxwell.CmaterialEmitter_getLobeType(self)

    def setLobeIntensity(self, *args):
        """
        Method:      setLobeIntensity( float intensity ) -> 1 = Success, 0 = Fail
        Description: Sets lobe intensity.
        """
        return _pymaxwell.CmaterialEmitter_setLobeIntensity(self, *args)

    def getLobeIntensity(self):
        """
        Method:      getLobeIntensity() -> (intensity,ok)
        Description: Gets lobe intensity.
        """
        return _pymaxwell.CmaterialEmitter_getLobeIntensity(self)

    def setLobeIES(self, *args):
        """
        Method:      setLobeIES( filename ) -> 1 = Success, 0 = Fail
        Description: Used to set the IES/EULUM emission file path. It works only when the active
                     emission type is 'pair'
        """
        return _pymaxwell.CmaterialEmitter_setLobeIES(self, *args)

    def getLobeIES(self):
        """
        Method:      getLobeIES() -> filename
        Description: Used to get the IES/EULUM emission file path. It works only when the active
                     emission type is 'pair'
        """
        return _pymaxwell.CmaterialEmitter_getLobeIES(self)

    def setLobeImageProjectedMap(self, *args):
        """
        Method:      setLobeImageProjectedMap( CtextureMap ) -> 1 = Success, 0 = Fail
        Description: Used to set the emission image file. It works only when the active emission type is 'pair'.
        """
        return _pymaxwell.CmaterialEmitter_setLobeImageProjectedMap(self, *args)

    def getLobeImageProjectedMap(self):
        """
        Method:      getLobeImageProjectedMap() -> (CtextureMap,ok)
        Description: Used to get the emission image file. It works only when the active emission type is 'pair'.
        """
        return _pymaxwell.CmaterialEmitter_getLobeImageProjectedMap(self)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaterialEmitter was initialized
        """
        return _pymaxwell.CmaterialEmitter_isNull(self)

    __swig_destroy__ = _pymaxwell.delete_CmaterialEmitter
    __del__ = lambda self : None;
CmaterialEmitter_swigregister = _pymaxwell.CmaterialEmitter_swigregister
CmaterialEmitter_swigregister(CmaterialEmitter)

class Creflectance(_object):
    """
    Class Creflectance

      Defines the reflectance/transmittance/IOR of a bsdf or coating.
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Creflectance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Creflectance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setActiveIorMode(self, *args):
        """
        Method:      setActiveIorMode( complex ) -> 1 = Success, 0 = Fail
        Description: Sets if the active mode is CUSTOM (complex = 0)
                     or measured (complex = 1, uses a complex ior file).
        """
        return _pymaxwell.Creflectance_setActiveIorMode(self, *args)

    def getActiveIorMode(self):
        """
        Method:      getActiveIorMode() -> (int,ok)
        Description: Gets the active mode (CUSTOM = 0, measured = 1).
        """
        return _pymaxwell.Creflectance_getActiveIorMode(self)

    def setComplexIor(self, *args):
        """
        Method:      setComplexIor( filename ) -> 1 = Sucess, 0 = Fail
        Description: Sets the complex ior file used when the Active IOR mode is 1 (complex mode).
        """
        return _pymaxwell.Creflectance_setComplexIor(self, *args)

    def getComplexIor(self):
        """
        Method:      getComplexIor() -> filename
        Description: Gets the complex ior file used when the Active IOR mode is 1 (complex mode).
        """
        return _pymaxwell.Creflectance_getComplexIor(self)

    def setAttribute(self, *args):
        """
        Method:      setAttribute( name, Cattribute ) -> 1 = Success, 0 = Fail
        Parameter:   name = 'color.tangential', 'color', 'transmittance.color', 'scattering'.
        Parameter:   Cattribute = attr.type = TYPE_RGB, TYPE_VALUE, TYPE_BITMAP.
        Example code:

          layer = material.addLayer();
          bsdf = layer.addBSDF();
          layer.setName( 'layer' );
          attr = Cattribute();
          reflectance = bsdf.getReflectance();
          # Set the reflectance color as RGB
          color = Crgb();
          color.assign( 1.0, 1.0, 1.0 );
          attr.type = TYPE_RGB;
          attr.rgb.assign( color );
          reflectance.setAttribute( 'color', attr );
          #Set the reflectance as a texture
          attr.pFileName = path;
          attr.uvwChannel = 0;
          attr.uIsTiled = ...;
          reflectance.setAttribute( 'color', attr );
        """
        return _pymaxwell.Creflectance_setAttribute(self, *args)

    def getAttribute(self, *args):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Parameter:   ID = 'color.tangential', 'color', 'transmittance.color', 'scattering'.
        """
        return _pymaxwell.Creflectance_getAttribute(self, *args)

    def setAbsorptionDistance(self, *args):
        """
        Method:      setAbsorptionDistance( TransmittanceDistance, distance ) -> 1 = Success, 0 = Fail
        Parameter:   TransmittanceDistance = DISTANCE_NANOMETERS, DISTANCE_MICRONS,
                      DISTANCE_MILLIMETERS, DISTANCE_METERS, DISTANCE_CENTIMETERS or
                      DISTANCE_DECIMETERS.
        """
        return _pymaxwell.Creflectance_setAbsorptionDistance(self, *args)

    def getAbsorptionDistance(self):
        """
        Method:      getAbsorptionDistance() -> (TransmittanceDistance,distance)
        Parameter:   TransmittanceDistance = DISTANCE_NANOMETERS, DISTANCE_MICRONS,
                      DISTANCE_MILLIMETERS, DISTANCE_METERS, DISTANCE_CENTIMETERS or
                      DISTANCE_DECIMETERS.
        """
        return _pymaxwell.Creflectance_getAbsorptionDistance(self)

    def setScatteringParameters(self, *args):
        """
        Method:      setScatteringParameters( scatteringCoeffeicient, asymmetryFactor,
                                              bool useThickness) -> 1 = Success, 0 = Fail
        Description: Sets the scattering parameters.
        """
        return _pymaxwell.Creflectance_setScatteringParameters(self, *args)

    def getScatteringParameters(self):
        """
        Method:      getScatteringParameters() -> (scatteringCoef,asymmetryFactor,useThickness,ok)
        Description: Gets the scattering parameters.
        """
        return _pymaxwell.Creflectance_getScatteringParameters(self)

    def setScatteringThickness(self, *args):
        """
        Method:      setScatteringThickness( Cmap ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell.Creflectance_setScatteringThickness(self, *args)

    def getScatteringThickness(self):
        """
        Method:      getScatteringThickness() -> (Cattribute,ok)
        Description: Gets the thickness used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell.Creflectance_getScatteringThickness(self)

    def setScatteringThicknessRange(self, *args):
        """
        Method:      setScatteringThicknessRange( min, max ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness range used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell.Creflectance_setScatteringThicknessRange(self, *args)

    def getScatteringThicknessRange(self):
        """
        Method:      getScatteringThicknessRange() -> (min,max,ok)
        Description: Gets the thickness range used for the Single Side Subsurface Scattering.
        """
        return _pymaxwell.Creflectance_getScatteringThicknessRange(self)

    def setIOR(self, *args):
        """
        Method:      setIOR( nd, abbe ) -> 1 = Success, 0 = Fail
        Description: Gets the IOR values.
        """
        return _pymaxwell.Creflectance_setIOR(self, *args)

    def getIOR(self):
        """
        Method:      getIOR() -> (nd,abbe,ok)
        Description: Gets the IOR values.
        """
        return _pymaxwell.Creflectance_getIOR(self)

    def setConductor(self, *args):
        """
        Method:      setConductor( k ) -> 1 = Success, 0 = Fail
        Description: k > 0 means it's a conductor.
        """
        return _pymaxwell.Creflectance_setConductor(self, *args)

    def getConductor(self):
        """
        Method:      getConductor() -> (k,ok)
        Description: k > 0 means it's a conductor.
        """
        return _pymaxwell.Creflectance_getConductor(self)

    def enableForceFresnel(self, *args):
        """
        Method:      enableForceFresnel( bool ) -> 1 = Success, 0 = Fail
        Description: Set the flag to force the fresnel on/off, using only
                     the chromaticism of the refl 90 and ignoring its luminescence.
        """
        return _pymaxwell.Creflectance_enableForceFresnel(self, *args)

    def getForceFresnel(self):
        """
        Method:      getForceFresnel() -> (bool,ok)
        Description: Get whether the fresnel is enabled.
        """
        return _pymaxwell.Creflectance_getForceFresnel(self)

    def setFresnelCustom(self, *args):
        """
        Method:      setFresnelCustom( angleStrength, rounghnessStrenght, bool isEnabled )                               -> 1 = Success, 0 = Fail
        Description: Enables/Disables the custom fresnel values (old R2 controls).
        """
        return _pymaxwell.Creflectance_setFresnelCustom(self, *args)

    def getFresnelCustom(self):
        """
        Method:      getFresnelCustom() -> (angleStrenght,roughnessStrenght,isEnabled,ok)
        Description: Enables/Disables the custom fresnel values (old R2 controls).
        """
        return _pymaxwell.Creflectance_getFresnelCustom(self)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Creflectance was initialized.
        """
        return _pymaxwell.Creflectance_isNull(self)

    __swig_destroy__ = _pymaxwell.delete_Creflectance
    __del__ = lambda self : None;
Creflectance_swigregister = _pymaxwell.Creflectance_swigregister
Creflectance_swigregister(Creflectance)

class Ccoating(_object):
    """Proxy of C++ Ccoating class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ccoating, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ccoating, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets the name of the coating.
        """
        return _pymaxwell.Ccoating_setName(self, *args)

    def getName(self):
        """
        Method:      getName() -> (string,ok)
        Description: Gets the name of the coating.
        """
        return _pymaxwell.Ccoating_getName(self)

    def setState(self, *args):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the coating.
        """
        return _pymaxwell.Ccoating_setState(self, *args)

    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Gets whether the coating is enabled.
        """
        return _pymaxwell.Ccoating_getState(self)

    def getReflectance(self):
        """
        Method:      getReflectance() -> Creflectance [reference]
        Description: Returns the reflectance of this coating
        """
        return _pymaxwell.Ccoating_getReflectance(self)

    def setThickness(self, *args):
        """
        Method:      setThickness( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness of the coating.
        """
        return _pymaxwell.Ccoating_setThickness(self, *args)

    def getThickness(self):
        """
        Method:      getThickness() -> (Cattribute,ok)
        Description: Gets the thickness of the coating.
        """
        return _pymaxwell.Ccoating_getThickness(self)

    def setThicknessRange(self, *args):
        """
        Method:      setThicknessRange( min, max ) -> 1 = Success, 0 = Fail
        Description: Sets the thickness range of the coating.
        """
        return _pymaxwell.Ccoating_setThicknessRange(self, *args)

    def getThicknessRange(self):
        """
        Method:      getThicknessRange() -> (min,max,ok)
        Description: Gets the thickness range of the coating.
        """
        return _pymaxwell.Ccoating_getThicknessRange(self)

    def setAttribute(self, *args):
        """
        Method:      setAttribute(name,Cattribute)
        Description: Function provided for convenience to provide an easy way for setting any parameter.
        Parameter:   name = 'thickness' is the only value supported.
        """
        return _pymaxwell.Ccoating_setAttribute(self, *args)

    def getAttribute(self, *args):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: Function provided for convenience to provide an easy way for setting any parameter.
        Parameter:   name = 'thickness' is the only value supported.
        """
        return _pymaxwell.Ccoating_getAttribute(self, *args)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Ccoating was initialized.
        """
        return _pymaxwell.Ccoating_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Ccoating___str__(self)

    __swig_destroy__ = _pymaxwell.delete_Ccoating
    __del__ = lambda self : None;
Ccoating_swigregister = _pymaxwell.Ccoating_swigregister
Ccoating_swigregister(Ccoating)

class Cbsdf(_object):
    """Proxy of C++ Cbsdf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cbsdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cbsdf, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setName(self, *args):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: To set the name of the BSDF.
        """
        return _pymaxwell.Cbsdf_setName(self, *args)

    def getName(self):
        """
        Method:      getName() -> name
        Description: To get the name of the BSDF.
        """
        return _pymaxwell.Cbsdf_getName(self)

    def setState(self, *args):
        """
        Method:      setState( bool ) -> 1 = Success, 0 = Fail
        Description: To switch on/off the BSDF.
        """
        return _pymaxwell.Cbsdf_setState(self, *args)

    def getState(self):
        """
        Method:      getState() -> (bool,ok)
        Description: Checks whether the BSDF is enabled.
        """
        return _pymaxwell.Cbsdf_getState(self)

    def setWeight(self, *args):
        """
        Method:      setWeight( Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the weight of this BSDF in its parent layer.
        Parameter:   Cattribute = Cattribute.type must be TYPE_VALUE or TYPE_BITMAP.
        """
        return _pymaxwell.Cbsdf_setWeight(self, *args)

    def getWeight(self):
        """
        Method:      getWeight() -> (Cattribute,ok)
        Description: Gets the weight of this BSDF in its parent layer.
        """
        return _pymaxwell.Cbsdf_getWeight(self)

    def getReflectance(self):
        """
        Method:      getReflectance() -> Creflectance [reference]
        Description: Returns the reflectance of this BSDF.
        """
        return _pymaxwell.Cbsdf_getReflectance(self)

    def setAttribute(self, *args):
        """
        Method:      setAttribute( name, Cattribute ) -> 1 = Success, 0 = Fail
        Description: Sets the value/texture of the given parameter.
        Parameter:   name -> 'roughness', 'anisotropy', 'bump', 'angle'.
        Parameter:   Cattribute -> attr.type = TYPE_VALUE, TIPE_BITMAP.
        Example code:

          layer = material.addLayer();
          bsdf = layer.addBSDF();
          attr = Cmap();
          attr.type = MAP_TYPE_VALUE; #(roughness will use a numeric value instead of a texture)
          attr.value = 77.0;
          bsdf.setColor( 'roughness', attr );
        """
        return _pymaxwell.Cbsdf_setAttribute(self, *args)

    def getAttribute(self, *args):
        """
        Method:      getAttribute( name ) -> (Cattribute,ok)
        Description: Gets the value/texture of the given parameter.
        Parameter:   name -> 'roughness', 'anisotropy', 'bump', 'angle'.
        """
        return _pymaxwell.Cbsdf_getAttribute(self, *args)

    def setNormalMapState(self, *args):
        """
        Method:      setNormalMapState( bool ) -> 1 = Success, 0 = Fail
        Description: Enables/disables  normal mapping for the bump parameter of this BSDF.

        """
        return _pymaxwell.Cbsdf_setNormalMapState(self, *args)

    def getNormalMapState(self):
        """
        Method:      getNormalMapState() -> (bool,ok)
        Description: Checks whether normal mapping is activated.

        """
        return _pymaxwell.Cbsdf_getNormalMapState(self)

    def addCoating(self):
        """
        Method:      addCoating() -> Ccoating [reference]
        Description: Add a new coating to this BSDF.

        """
        return _pymaxwell.Cbsdf_addCoating(self)

    def getCoating(self, *args):
        """
        Method:      getCoating( index ) -> Ccoating [reference]
        Description: Gets a coating by index in the BSDF.

        """
        return _pymaxwell.Cbsdf_getCoating(self, *args)

    def getNumCoatings(self):
        """
        Method:      getNumCoatings() -> (int,ok)
        Description: Number of coatings in the BSDF.
        """
        return _pymaxwell.Cbsdf_getNumCoatings(self)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Cbsdf was initialized.
        """
        return _pymaxwell.Cbsdf_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cbsdf___str__(self)

    __swig_destroy__ = _pymaxwell.delete_Cbsdf
    __del__ = lambda self : None;
Cbsdf_swigregister = _pymaxwell.Cbsdf_swigregister
Cbsdf_swigregister(Cbsdf)

class CmaxwellCameraIterator(_object):
    """
    Class CmaxwellCameraIterator

      Class used to parse a list of cameras.
      Example code:

        scene = Cmaxwell(mwcallback);
        scene.readMXS('scene.mxs');
        it = CmaxwellCameraIterator();
        camera = it.first(scene);
        while camera.isNull() == False:
          # Do something with the camera...
          camera = it.next();
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellCameraIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellCameraIterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CmaxwellCameraIterator"""
        this = _pymaxwell.new_CmaxwellCameraIterator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellCameraIterator
    __del__ = lambda self : None;
    def first(self, *args):
        """first(self, Cmaxwell pMaxwell) -> CmaxwellCamera"""
        return _pymaxwell.CmaxwellCameraIterator_first(self, *args)

    def next(self):
        """next(self) -> CmaxwellCamera"""
        return _pymaxwell.CmaxwellCameraIterator_next(self)

CmaxwellCameraIterator_swigregister = _pymaxwell.CmaxwellCameraIterator_swigregister
CmaxwellCameraIterator_swigregister(CmaxwellCameraIterator)

class CmaxwellCamera(_object):
    """
    Class CmaxwellCamera

      Class that contains the Maxwell camera description.
      Example code:

        scene = Cmaxwell(mwcallback);
        scene.readMXS('scene.mxs');
        it = CmaxwellCameraIterator();
        camera = it.first(scene);
        while camera.isNull() == False:
          # Do something with the camera...
          camera = it.next();
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellCamera, name)
    __repr__ = _swig_repr
    def setStep(self, *args):
        """
        Method:      setStep( step, Cvector origin, Cvector focalPoint, Cvector, up,
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        Method:      setStep( step, Cvector origin, Cvector focalPoint, Cvector, up,
                              focalLenght, fStop, stepTime, focalLengthNeedCorrection = 1 )
                     -> 1 = Success, 0 = Fail
        Description: Sets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera cannot be animated
                     (resolution, film..).
        """
        return _pymaxwell.CmaxwellCamera_setStep(self, *args)

    def getStep(self, *args):
        """
        Method:      getStep( step )
                     -> (origin,focalPoint,up,focalLength,fStop,stepTime,ok)
        Description: Gets the camera parameters that can change in an animation. The static
                     parameters that are set in Cmaxwell.addCamera can not be animated
                     (resolution, film..).
        """
        return _pymaxwell.CmaxwellCamera_getStep(self, *args)

    def getValues(self):
        """
        Method:      getValues()
                     -> ['name','nSteps','shutter',''filmWidth',''filmHeight','iso','pDiaphragmType',
                         'angle','nBlades','fps','xRes','yRes','pixelAspect','lensType',
                         'projectionType']
        Description: Gets the camera parameters (dict) that cannot change in an animation.
        Parameter:   lensType -> TYPE_THIN_LENS, TYPE_PINHOLE, TYPE_ORTHO, TYPE_FISHEYE,
                      TYPE_SPHERICAL or TYPE_CYLINDRICAL
        """
        return _pymaxwell.CmaxwellCamera_getValues(self)

    def setName(self, *args):
        """
        Method:      setName( name ) -> 1 = Success, 0 = Fail
        Description: Sets camera name.
        """
        return _pymaxwell.CmaxwellCamera_setName(self, *args)

    def getName(self):
        """
        Method:      getName() -> name
        Description: Gets camera name.
        """
        return _pymaxwell.CmaxwellCamera_getName(self)

    def setResolution(self, *args):
        """
        Method:      setResolution( x, y ) -> 1 = Success, 0 = Fail
        Description: Sets camera resolution.
        """
        return _pymaxwell.CmaxwellCamera_setResolution(self, *args)

    def getResolution(self):
        """
        Method:      getResolution() -> (x,y,ok)
        Description: Gets camera resolution.
        """
        return _pymaxwell.CmaxwellCamera_getResolution(self)

    def setPixelAspect(self, *args):
        """
        Method:      setPixelAspect( pixelAspect ) -> 1 = Success, 0 = Fail
        Description: Sets camera pixel aspect ratio ( 0.01 - 100.0 ) Default = 1.0.
        """
        return _pymaxwell.CmaxwellCamera_setPixelAspect(self, *args)

    def getPixelAspect(self):
        """
        Method:      getPixelAspect() -> (pixelAspect,ok)
        Description: Gets camera pixel aspect ratio ( 0.01 - 100.0 ) Default = 1.0.
        """
        return _pymaxwell.CmaxwellCamera_getPixelAspect(self)

    def setShutter(self, *args):
        """
        Method:      setShutter( shutter ) -> 1 = Success, 0 = Fail
        Description: Sets camera shutter (1/s) ( 0.01 - 10000.0 ) Default = 250.0.
        """
        return _pymaxwell.CmaxwellCamera_setShutter(self, *args)

    def getShutter(self):
        """
        Method:      getShutter() -> (shutter,ok)
        Description: Gets camera shutter (1/s) ( 0.01 - 10000.0 ) Default = 250.0.
        """
        return _pymaxwell.CmaxwellCamera_getShutter(self)

    def setIso(self, *args):
        """
        Method:      setShutter( iso ) -> 1 = Success, 0 = Fail
        Description: Sets camera iso ( 1.0 - 10000.0 ) Default = 100.0.
        """
        return _pymaxwell.CmaxwellCamera_setIso(self, *args)

    def getIso(self):
        """
        Method:      getIso() -> (iso,ok)
        Description: Gets camera iso ( 1.0 - 10000.0 ) Default = 100.0.
        """
        return _pymaxwell.CmaxwellCamera_getIso(self)

    def setFilmSize(self, *args):
        """
        Method:      setFilmSize( width, height ) -> 1 = Success, 0 = Fail
        Description: Sets camera film size ( 0.001 - 10000.0 meters ) Default = 0.035 x 0.024.
        """
        return _pymaxwell.CmaxwellCamera_setFilmSize(self, *args)

    def getFilmSize(self):
        """
        Method:      getFilmSize() -> (width,height,ok)
        Description: Gets camera film size ( 1.0 - 10000.0 ) Default = 0.035 x 0.024.
        """
        return _pymaxwell.CmaxwellCamera_getFilmSize(self)

    def setDiaphragm(self, *args):
        """
        Method:      setDiaphragm( type, angle, nBlades ) -> 1 = Success, 0 = Fail
        Description: Sets camera diaphragm
        Parameter:   type = 'CIRCULAR', 'POLYGONAL'.
        """
        return _pymaxwell.CmaxwellCamera_setDiaphragm(self, *args)

    def getDiaphragm(self):
        """
        Method:      getDiaphragm() -> (type,angle,nBlades,ok)
        Description: Gets camera diaphragm
        Parameter:   type = 'CIRCULAR' or 'POLYGONAL'.
        """
        return _pymaxwell.CmaxwellCamera_getDiaphragm(self)

    def setFPS(self, *args):
        """
        Method:      setFPS( fps ) -> 1 = Success, 0 = Fail
        Description: Sets camera framerate ( 0.01 - 10000.0 ) Default = 24.0.
        """
        return _pymaxwell.CmaxwellCamera_setFPS(self, *args)

    def getFPS(self):
        """
        Method:      getFPS() -> (fps,ok)
        Description: Gets camera framerate ( 0.01 - 10000.0 ) Default = 24.0.
        """
        return _pymaxwell.CmaxwellCamera_getFPS(self)

    def setScreenRegion(self, *args):
        """
        Method:      setScreenRegion( x1, y1, x2, y2, type ) -> 1 = Success, 0 = Fail
        Description: Defines a render region for the camera.
        Parameter:   x1, y1, x2, y2 edges of the region (in pixels).
        Parameter:   type = 'REGION', 'BLOW UP'.
        """
        return _pymaxwell.CmaxwellCamera_setScreenRegion(self, *args)

    def getScreenRegion(self):
        """
        Method:      getScreenRegion() -> (x1,y1,x2,y2,type,ok)
        Description: Gets the render region for the camera.
        Parameter:   x1, y1, x2, y2 edges of the region (in pixels).
        Parameter:   type = 'REGION', 'BLOW UP'.
        """
        return _pymaxwell.CmaxwellCamera_getScreenRegion(self)

    def setCutPlanes(self, *args):
        """
        Method:      setCutPlanes( zNear, zFar, bool enabled ) -> 1 = Success, 0 = Fail
        Description: Set cut planes of the camera ( 0.0 - 1e7 ) Default = 0.0.
        """
        return _pymaxwell.CmaxwellCamera_setCutPlanes(self, *args)

    def getCutPlanes(self):
        """
        Method:      getCutPlanes() -> (zNear,zFar,enabled,ok)
        Description: Get cut planes of the camera ( 0.0 - 1e7 ) Default = 0.0.
        """
        return _pymaxwell.CmaxwellCamera_getCutPlanes(self)

    def setShiftLens(self, *args):
        """
        Method:      setShiftLens( xShift, yShift ) -> 1 = Success, 0 = Fail
        Description: Set shift lens of the camera ( -100.0 - 100.0 ) Default = 0.0.
        """
        return _pymaxwell.CmaxwellCamera_setShiftLens(self, *args)

    def getShiftLens(self):
        """
        Method:      getShiftLens() -> (xShift,yShift,ok)
        Description: Get shift lens of the camera ( -100.0 - 100.0 ) Default = 0.0.
        """
        return _pymaxwell.CmaxwellCamera_getShiftLens(self)

    def setLensType(self, *args):
        """
        Method:      setLensType(LensType) -> 1 = Success, 0 = Fail
        Description: Set lens type.
        Parameter:   LensType -> TYPE_THIN_LENS, TYPE_PINHOLE, TYPE_ORTHO, TYPE_FISHEYE,
                     TYPE_SPHERICAL or TYPE_CYLINDRICAL.
        """
        return _pymaxwell.CmaxwellCamera_setLensType(self, *args)

    def getLensType(self):
        """
        Method:      getLensType() -> (LensType,ok)
        Description: Get lens type of the camera. See LensType enum.
                     Returns TYPE_THIN_LENS, TYPE_PINHOLE, TYPE_ORTHO, TYPE_FISHEYE, TYPE_SPHERICAL
                     or TYPE_CYLINDRICAL
        """
        return _pymaxwell.CmaxwellCamera_getLensType(self)

    def setSphericalLensProperties(self, *args):
        """
        Method:      setSphericalLensProperties(labmdaAperture) -> 1 = Success, 0 = Fail
        Description: Set spherical lens properties.
        Parameter:   labmdaAperture -> rads, PI by default.
        """
        return _pymaxwell.CmaxwellCamera_setSphericalLensProperties(self, *args)

    def getSphericalLensProperties(self):
        """
        Method:      getSphericalLensProperties() -> (labmdaAperture,ok)
        Description: Get spherical lens properties.
        Parameter:   labmdaAperture -> rads, PI by default.
        """
        return _pymaxwell.CmaxwellCamera_getSphericalLensProperties(self)

    def setFishLensProperties(self, *args):
        """
        Method:      setFishLensProperties(aperture) -> 1 = Success, 0 = Fail
        Description: Set fish lens properties.
        Parameter:   aperture -> rads, PI by default.
        """
        return _pymaxwell.CmaxwellCamera_setFishLensProperties(self, *args)

    def getFishLensProperties(self):
        """
        Method:      getFishLensProperties() -> (aperture,ok)
        Description: Get fish lens properties.
        Parameter:   aperture -> rads, PI by default.
        """
        return _pymaxwell.CmaxwellCamera_getFishLensProperties(self)

    def setCylindricalLensProperties(self, *args):
        """
        Method:      setCylindricalLensProperties(aperture) -> 1 = Success, 0 = Fail
        Description: Set cylindrical lens properties.
        Parameter:   aperture -> rads, 2*PI by default.
        """
        return _pymaxwell.CmaxwellCamera_setCylindricalLensProperties(self, *args)

    def getCylindricalLensProperties(self):
        """
        Method:      getCylindricalLensProperties() -> (aperture,ok)
        Description: Get cylindrical lens properties.
        Parameter:   aperture -> rads, 2*PI by default.
        """
        return _pymaxwell.CmaxwellCamera_getCylindricalLensProperties(self)

    def setCustomBokeh(self, *args):
        """
        Method:      setCustomBokeh(ratio, angle, enabled) -> 1 = Success, 0 = Fail
        Description: Defines a custom bokeh
        Parameter:   ratio = aspect ratio (default: 1)
        Parameter:   angle: angle in radians
        Parameter:   enabled: sets the custom bokeh on/off
        """
        return _pymaxwell.CmaxwellCamera_setCustomBokeh(self, *args)

    def getCustomBokeh(self):
        """
        Method:      getCustomBokeh() -> (ratio,angle,enabled,ok)
        Description: Gets custom bokeh parameters (tuple).
        Parameter:   ratio = aspect ratio (default: 1).
        Parameter:   angle: angle in radians.
        Parameter:   enabled: custom bokeh on/off.
        """
        return _pymaxwell.CmaxwellCamera_getCustomBokeh(self)

    def setHide(self, *args):
        """
        Method:      setHide( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the hidden status of this camera (used only in Maxwell Studio).
        """
        return _pymaxwell.CmaxwellCamera_setHide(self, *args)

    def isHide(self):
        """
        Method:      isHide() -> (bool,ok)
        Description: Gets the hidden status of this camera (used only in Maxwell Studio)
        """
        return _pymaxwell.CmaxwellCamera_isHide(self)

    def setUuid(self, *args):
        """
        Method:      setUuid( id ) -> 1 = Success, 0 = Fail
        Description: Unique id that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellCamera_setUuid(self, *args)

    def getUuid(self):
        """
        Method:      getUuid() -> id
        Description: Unique id that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellCamera_getUuid(self)

    def setActive(self):
        """
        Method:      setActive() -> 1 = Success, 0 = Fail
        Description: Sets the active camera used when rendering when there is more than one.
        """
        return _pymaxwell.CmaxwellCamera_setActive(self)

    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Destroys the camera.
        """
        return _pymaxwell.CmaxwellCamera_free(self)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the Ccamera was initialized.
        """
        return _pymaxwell.CmaxwellCamera_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CmaxwellCamera___str__(self)

    def __init__(self): 
        """__init__(self) -> CmaxwellCamera"""
        this = _pymaxwell.new_CmaxwellCamera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellCamera
    __del__ = lambda self : None;
CmaxwellCamera_swigregister = _pymaxwell.CmaxwellCamera_swigregister
CmaxwellCamera_swigregister(CmaxwellCamera)

class CmaxwellObjectIterator(_object):
    """
    Class CmaxwellObjectIterator

      Class used to parse a list of objects.
      Example code:

        scene = Cmaxwell(mwcallback);
        scene.readMXS('scene.mxs');
        it = CmaxwellObjectIterator();
        object = it.first(scene);
        while object.isNull() == False:
          # Do something with the object...
          object = it.next();
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellObjectIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellObjectIterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CmaxwellObjectIterator"""
        this = _pymaxwell.new_CmaxwellObjectIterator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellObjectIterator
    __del__ = lambda self : None;
    def first(self, *args):
        """first(self, Cmaxwell pMaxwell) -> CmaxwellObject"""
        return _pymaxwell.CmaxwellObjectIterator_first(self, *args)

    def next(self):
        """next(self) -> CmaxwellObject"""
        return _pymaxwell.CmaxwellObjectIterator_next(self)

CmaxwellObjectIterator_swigregister = _pymaxwell.CmaxwellObjectIterator_swigregister
CmaxwellObjectIterator_swigregister(CmaxwellObjectIterator)

class CmaxwellObjectTrianglesGroup(_object):
    """
    Class CmaxwellObjectTrianglesGroup

      Class used to group triangles in an object so the user can recover a triangles selection
      later in Maxwell Studio. Is not used by the render engine.
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellObjectTrianglesGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellObjectTrianglesGroup, name)
    __repr__ = _swig_repr
    def getName(self):
        """getName(self) -> char"""
        return _pymaxwell.CmaxwellObjectTrianglesGroup_getName(self)

    def getObject(self):
        """getObject(self) -> Cmaxwell::Cobject"""
        return _pymaxwell.CmaxwellObjectTrianglesGroup_getObject(self)

    def getTrianglesCount(self):
        """getTrianglesCount(self) -> dword"""
        return _pymaxwell.CmaxwellObjectTrianglesGroup_getTrianglesCount(self)

    def getTriangles(self):
        """getTriangles(self) -> dword"""
        return _pymaxwell.CmaxwellObjectTrianglesGroup_getTriangles(self)

    def setMaterial(self, *args):
        """setMaterial(self, Cmaxwell::Cmaterial material) -> byte"""
        return _pymaxwell.CmaxwellObjectTrianglesGroup_setMaterial(self, *args)

    def __init__(self): 
        """__init__(self) -> CmaxwellObjectTrianglesGroup"""
        this = _pymaxwell.new_CmaxwellObjectTrianglesGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellObjectTrianglesGroup
    __del__ = lambda self : None;
CmaxwellObjectTrianglesGroup_swigregister = _pymaxwell.CmaxwellObjectTrianglesGroup_swigregister
CmaxwellObjectTrianglesGroup_swigregister(CmaxwellObjectTrianglesGroup)

class CmaxwellObjectTrianglesGroupIterator(_object):
    """Proxy of C++ CmaxwellObjectTrianglesGroupIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellObjectTrianglesGroupIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellObjectTrianglesGroupIterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CmaxwellObjectTrianglesGroupIterator"""
        this = _pymaxwell.new_CmaxwellObjectTrianglesGroupIterator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellObjectTrianglesGroupIterator
    __del__ = lambda self : None;
    def first(self, *args):
        """first(self, Cmaxwell::Cobject object) -> CmaxwellObjectTrianglesGroup"""
        return _pymaxwell.CmaxwellObjectTrianglesGroupIterator_first(self, *args)

    def next(self):
        """next(self) -> CmaxwellObjectTrianglesGroup"""
        return _pymaxwell.CmaxwellObjectTrianglesGroupIterator_next(self)

CmaxwellObjectTrianglesGroupIterator_swigregister = _pymaxwell.CmaxwellObjectTrianglesGroupIterator_swigregister
CmaxwellObjectTrianglesGroupIterator_swigregister(CmaxwellObjectTrianglesGroupIterator)

class CmaxwellObject(_object):
    """Proxy of C++ CmaxwellObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellObject, name)
    __repr__ = _swig_repr
    def free(self):
        """
        Method:      free() -> 1 = Success, 0 = Fail
        Description: Destroys the object.
        """
        return _pymaxwell.CmaxwellObject_free(self)

    def getName(self):
        """
        Method:      getName() -> (name,ok)
        Description: To get the name of the object.
        """
        return _pymaxwell.CmaxwellObject_getName(self)

    def setName(self, *args):
        """
        Method:      getName( name ) -> 1 = Success, 0 = Fail
        Description: To set the name of the object.
        """
        return _pymaxwell.CmaxwellObject_setName(self, *args)

    def isMesh(self):
        """
        Method:      isMesh() -> (int,ok)
        Description: Returns 1 if this CmaxwellObject is a real mesh
                     Returns 0 if not an instance or any other thing
        """
        return _pymaxwell.CmaxwellObject_isMesh(self)

    def isInstance(self):
        """
        Method:      isInstance() -> (int,ok)
        Description: Returns 1 if this CmaxwellObject is an instance
                     Returns 0 otherwise
        """
        return _pymaxwell.CmaxwellObject_isInstance(self)

    def getInstanced(self):
        """
        Method:      getInstanced() -> CmaxwellObject
        Description: If this CmaxwellObject is an instance this method returns its parent object.
        """
        return _pymaxwell.CmaxwellObject_getInstanced(self)

    def getReferencedScenePath(self):
        """
        Method:      getReferencedScenePath() -> path
        Description: Gets the scene file referenced by this object.
        """
        return _pymaxwell.CmaxwellObject_getReferencedScenePath(self)

    def setReferencedScenePath(self, *args):
        """
        Method:      setReferencedScenePath( path ) -> 1 = Success, 0 = Fail
        Description: Sets the scene file referenced by this object.
        """
        return _pymaxwell.CmaxwellObject_setReferencedScenePath(self, *args)

    def getReferencedSceneMaterial(self, *args):
        """
        Method:      getReferencedSceneMaterial( objectName ) -> (CmaxwellMaterial [reference],ok)
        Description: Gets the material of an specific object inside the referenced scene.
        """
        return _pymaxwell.CmaxwellObject_getReferencedSceneMaterial(self, *args)

    def setReferencedSceneMaterial(self, *args):
        """
        Method:      setReferenceMaterial( objectName, material ) -> 1 = Success, 0 = Fail
        Description: Sets the material of an specific object inside the referenced scene.
        """
        return _pymaxwell.CmaxwellObject_setReferencedSceneMaterial(self, *args)

    def getReferencedOverrideFlags(self):
        """
        Method:      getReferencedOverrideFlags() -> (flags,ok) = Fail
        Description: Sets the override policy for visibility flags.
        Parameter:   flags -> FLAG_DO_NOT_OVERRIDE, FLAG_OVERRIDE_HIDE, FLAG_OVERRIDE_HIDE_TO_CAMERA,
                      FLAG_OVERRIDE_HIDE_TO_REFL_REFR, FLAG_OVERRIDE_HIDE_TO_GI or FLAG_OVERRIDE_ALL.
        """
        return _pymaxwell.CmaxwellObject_getReferencedOverrideFlags(self)

    def setReferencedOverrideFlags(self, *args):
        """
        Method:      setReferencedOverrideFlags( flags ) -> 1 = Success, 0 = Fail
        Description: Sets the override policy for visibility flags.
        Parameter:   flags -> FLAG_DO_NOT_OVERRIDE, FLAG_OVERRIDE_HIDE, FLAG_OVERRIDE_HIDE_TO_CAMERA,
                      FLAG_OVERRIDE_HIDE_TO_REFL_REFR, FLAG_OVERRIDE_HIDE_TO_GI or FLAG_OVERRIDE_ALL.
        """
        return _pymaxwell.CmaxwellObject_setReferencedOverrideFlags(self, *args)

    def mergeMeshes(self, *args):
        """
        Method:      mergeMeshes( CmaxwellObject[] meshes ) -> 1 = Success, 0 = Fail
        Description: Merges an array of meshes into a single mesh. The original meshes are not
                     removed (it can be done later calling CmaxwellObject.free()).
                     Note: object itself must not be one of the objects included in 'meshes'. In
                     that case the script will crash.
        """
        return _pymaxwell.CmaxwellObject_mergeMeshes(self, *args)

    def getParent(self):
        """
        Method:      getParent() -> (CmaxwellObject [reference],ok)
        Description: Gets the parent object in the hierarchy.
        """
        return _pymaxwell.CmaxwellObject_getParent(self)

    def setParent(self, *args):
        """
        Method:      setParent( CmaxwellObject ) -> 1 = Success, 0 = Fail
        Description: Sets the parent object in the hierarchy.
        """
        return _pymaxwell.CmaxwellObject_setParent(self, *args)

    def getUuid(self):
        """
        Method:      getUuid() -> string
        Description: Unique Id that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellObject_getUuid(self)

    def setUuid(self, *args):
        """
        Method:      setUuid( string ) -> 1 = Success, 0 = Fail
        Description: Unique Id that can be used for custom purposes.
        """
        return _pymaxwell.CmaxwellObject_setUuid(self, *args)

    def getMaterial(self):
        """
        Method:      getMaterial() -> (CmaxwellMaterial [reference],ok)
        Description: Gets material applyed to the object.
        """
        return _pymaxwell.CmaxwellObject_getMaterial(self)

    def setMaterial(self, *args):
        """
        Method:      setMaterial( CmaxwellMaterial ) -> 1 = Success, 0 = Fail
        Description: Sets material applyed to the object.
        """
        return _pymaxwell.CmaxwellObject_setMaterial(self, *args)

    def getBackfaceMaterial(self):
        """
        Method:      getBackfaceMaterial() -> (CmaxwellMaterial [reference],ok)
        Description: Material applied to the other side of the object. By default it is null so the
                     same material is applied in both sides.
        """
        return _pymaxwell.CmaxwellObject_getBackfaceMaterial(self)

    def setBackfaceMaterial(self, *args):
        """
        Method:      setBackfaceMaterial( CmaxwellMaterial ) -> 1 = Success, 0 = Fail
        Description: Material applied to the other side of the object. By default it is null so the
                     same material is applied in both sides.
        """
        return _pymaxwell.CmaxwellObject_setBackfaceMaterial(self, *args)

    def getRenderBooleanType(self):
        """
        Method:      getBackfaceMaterial() -> (RenderBooleanType,ok)
        Description: Sets the render boolean type of this object. Default value is 0, which means that
                     the object is not a boolean renders normally.
        Parameter:   RenderBooleanType -> BOOLEAN_NONE, BOOLEAN_BOX, BOOLEAN_SPHERE, BOOLEAN_PLANE_XY,
                      BOOLEAN_PLANE_YZ or BOOLEAN_PLANE_ZX.
        """
        return _pymaxwell.CmaxwellObject_getRenderBooleanType(self)

    def setRenderBooleanType(self, *args):
        """
        Method:      setRenderBooleanType( RenderBooleanType ) -> 1 = Success, 0 = Fail
        Description: Sets the render boolean type of this object. Default value is 0, which means that
                     the object is not a boolean renders normally.
        Parameter:   RenderBooleanType -> BOOLEAN_NONE, BOOLEAN_BOX, BOOLEAN_SPHERE, BOOLEAN_PLANE_XY,
                      BOOLEAN_PLANE_YZ or BOOLEAN_PLANE_ZX.
        """
        return _pymaxwell.CmaxwellObject_setRenderBooleanType(self, *args)

    def addExcludedLight(self, *args):
        """
        Method:      addExcludedLight( lightObjectName ) -> 1 = Success, 0 = Fail
        Description: Excludes direct lighting in this object from the object with name lightObjectName.
                     By default there are no excluded lights to any object.
        """
        return _pymaxwell.CmaxwellObject_addExcludedLight(self, *args)

    def removeExcludedLight(self, *args):
        """
        Method:      removeExcludedLight( lightObjectName ) -> 1 = Success, 0 = Fail
        Description: Removes excluded light from this object.
        """
        return _pymaxwell.CmaxwellObject_removeExcludedLight(self, *args)

    def getNumExcludedLights(self):
        """
        Method:      getNumExcludedLights() -> (int,ok)
        Description: Gets number of excluded lights from the object.
        """
        return _pymaxwell.CmaxwellObject_getNumExcludedLights(self)

    def getExcludedLightAtIndex(self, *args):
        """
        Method:      getExcludedLightAtIndex( index ) -> name
        Description: Gets excluded light name.
        """
        return _pymaxwell.CmaxwellObject_getExcludedLightAtIndex(self, *args)

    def setProperties(self, *args):
        """
        Method:      setProperties( doDirectCausticsReflection, doDirectCausticsRefraction,
                                    doIndirectCausticsReflection, doIndirectCausticsRefraction )
                     -> 1 = Success, 0 = Fail
        Description: Caustics properties of the object. Input values must be 1 (true) or 0 (false).
        """
        return _pymaxwell.CmaxwellObject_setProperties(self, *args)

    def getDependencies(self, searchInsideReference = True):
        """
        Method:      getDependencies(searchInsideReference = True) -> (list,ok)
        Description: Returns an array of strings with all the extern dependencies of the object
                     (external files, etc).Parameter:   searchInsideReference. If true the function search for dependencies also in the
                     referenced proxy object if exists. searchInsideReference is true by default.
        Method:      getDependencies(searchInsideReference = True) -> (list,ok)
        Description: Returns an array of strings with all the extern dependencies of the object
                     (external files, etc).Parameter:   searchInsideReference. If true the function search for dependencies also in the
                     referenced proxy object if exists. searchInsideReference is true by default.
        """
        return _pymaxwell.CmaxwellObject_getDependencies(self, searchInsideReference)

    def getVerticesCount(self):
        """
        Method:      getNumVertexes() -> (int,ok)
        Description: Number of vertices.
        """
        return _pymaxwell.CmaxwellObject_getVerticesCount(self)

    def getTrianglesCount(self):
        """
        Method:      getTrianglesCount() -> (int,ok)
        Description: Number of triangles.
        """
        return _pymaxwell.CmaxwellObject_getTrianglesCount(self)

    def getNormalsCount(self):
        """
        Method:      getNormalsCount() -> (int,ok)
        Description: Number of normals.
        """
        return _pymaxwell.CmaxwellObject_getNormalsCount(self)

    def getPositionsPerVertexCount(self):
        """
        Method:      getPositionsPerVertexCount() -> (int,ok)
        Description: Number of positions per vertex.
        """
        return _pymaxwell.CmaxwellObject_getPositionsPerVertexCount(self)

    def getChannelsUVWCount(self):
        """
        Method:      getChannelsUVWCount() -> (int,ok)
        Description: Number of positions UVW channels.
        """
        return _pymaxwell.CmaxwellObject_getChannelsUVWCount(self)

    def getTriangleGroupsCount(self):
        """
        Method:      getTriangleGroupsCount() -> (int,ok)
        Description: Number of triangle groups.
        """
        return _pymaxwell.CmaxwellObject_getTriangleGroupsCount(self)

    def addChannelUVW(self, id = 0xFF):
        """
        Method:      addChannelUVW( id = 0xFF ) -> (index,ok)
        Description: For a given object, either add all channels with id's or without id's, but don't
                     add some channels with id and others without id. If the channels are added with
                     id, pass this id to the functions (set/getTriangleUVW, generate...UVW, etc) that
                     modify the channel. When working without id's, pass the returned 'index' from
                     addChannelUVW to those functions.
        Method:      addChannelUVW( id = 0xFF ) -> (index,ok)
        Description: For a given object, either add all channels with id's or without id's, but don't
                     add some channels with id and others without id. If the channels are added with
                     id, pass this id to the functions (set/getTriangleUVW, generate...UVW, etc) that
                     modify the channel. When working without id's, pass the returned 'index' from
                     addChannelUVW to those functions.
        """
        return _pymaxwell.CmaxwellObject_addChannelUVW(self, id)

    def getUVWChannelId(self, *args):
        """
        Method:      getUVWChannelId( index ) -> (id,ok)
        Description: Gets UVW channel ID.
        """
        return _pymaxwell.CmaxwellObject_getUVWChannelId(self, *args)

    def generateSphericalUVW(self, *args):
        """
        Method:      generateSphericalUVW( int iChannel, Cbase projectorBase,
                                           float startLatitude, float endLatitude,
                                           float startLongitude, float endLongitude )
                     -> 1 = Success, 0 = Fail
        """
        return _pymaxwell.CmaxwellObject_generateSphericalUVW(self, *args)

    def generateCylindricalUVW(self, *args):
        """
        Method:      generateCylindricalUVW( int iChannel, Cbase projectorBase,
                                           float startAngle, float endAngle )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_generateCylindricalUVW(self, *args)

    def generateCubicUVW(self, *args):
        """
        Method:      generateCubicUVW( int iChannel, Cbase projectorBase,
                                       bool mirrorBackFaces = False )
                     -> 1 = Success, 0 = Fail

        Method:      generateCubicUVW( int iChannel, Cbase projectorBase,
                                       bool mirrorBackFaces = False )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_generateCubicUVW(self, *args)

    def generatePlanarUVW(self, *args):
        """
        Method:      generatePlanarUVW( int iChannel, Cbase projectorBase )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_generatePlanarUVW(self, *args)

    def getVertex(self, *args):
        """
        Method:      getVertex( int iVertex, int iPosition ) -> (Cvector,ok)

        """
        return _pymaxwell.CmaxwellObject_getVertex(self, *args)

    def setVertex(self, *args):
        """
        Method:      setVertex( int iVertex, int iPosition, Cvector point )
                     -> 1 = Success, 'error' = False

        """
        return _pymaxwell.CmaxwellObject_setVertex(self, *args)

    def getNormal(self, *args):
        """
        Method:      getNormal( int iNormal, int iPosition ) -> (Cvector,ok)

        """
        return _pymaxwell.CmaxwellObject_getNormal(self, *args)

    def setNormal(self, *args):
        """
        Method:      setNormal( int iNormal, int iPosition, Cvector normal )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setNormal(self, *args)

    def getTriangle(self, *args):
        """
        Method:      getTriangle( int iTriangle ) -> (v1,v2,v3,n1,n2,n3,ok)

        """
        return _pymaxwell.CmaxwellObject_getTriangle(self, *args)

    def setTriangle(self, *args):
        """
        Method:      setTriangle( int iTriangle, int iVertex1, int iVertex2, int iVertex3,
                                  int iNormal1, int iNormal2, int iNormal3 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setTriangle(self, *args)

    def getTriangleUVW(self, *args):
        """
        Method:      getTriangleUVW( int iTriangle, int iChannelID )
                     -> (float u1, float v1, float w1, float u2, float v2, float w2,
                         float u3, float v3, float w3, ok)

        """
        return _pymaxwell.CmaxwellObject_getTriangleUVW(self, *args)

    def setTriangleUVW(self, *args):
        """
        Method:      setTriangleUVW( int iTriangle, int iChannelID, float u1, float v1, float w1,
                                     float u2, float v2, float w2, float u2, float v2, float w3 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setTriangleUVW(self, *args)

    def getTriangleMaterial(self, *args):
        """
        Method:      getTriangleMaterial( int iTriangle ) -> (CmaxwellMaterial [reference],ok)

        """
        return _pymaxwell.CmaxwellObject_getTriangleMaterial(self, *args)

    def setTriangleMaterial(self, *args):
        """
        Method:      setTriangleMaterial( int iTriangle, CmaxwellMaterial )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setTriangleMaterial(self, *args)

    def getTriangleQuadBuddy(self, *args):
        """
        Method:      getTriangleQuadBuddy( int iTriangle ) -> (index,ok)

        """
        return _pymaxwell.CmaxwellObject_getTriangleQuadBuddy(self, *args)

    def setTriangleQuadBuddy(self, *args):
        """
        Method:      setTriangleQuadBuddy( int iTriangle, int iBuddyIndex ) -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setTriangleQuadBuddy(self, *args)

    def getBaseAndPivot(self, substepTime = 0.0):
        """
        Method:      getBaseAndPivot( float substepTime = 0.0 ) -> (Cbase base, Cbase pivot, ok)

        Method:      getBaseAndPivot( float substepTime = 0.0 ) -> (Cbase base, Cbase pivot, ok)

        """
        return _pymaxwell.CmaxwellObject_getBaseAndPivot(self, substepTime)

    def setBaseAndPivot(self, *args):
        """
        Method:      setBaseAndPivot( Cbase base, Cbase pivot, float substepTime = 0.0 )
                     -> 1 = Success, 0 = Fail

        Method:      setBaseAndPivot( Cbase base, Cbase pivot, float substepTime = 0.0 )
                     -> 1 = Success, 0 = Fail

        """
        return _pymaxwell.CmaxwellObject_setBaseAndPivot(self, *args)

    def getWorldTransform(self):
        """
        Method:      getWorldTransform() -> (Cbase,ok)
        Description: Returns the world transform of the object taking into account base and pivot of
                     all its parents. If object vertices & normals have been transformed to world
                     coordinates it returns the identity.
        """
        return _pymaxwell.CmaxwellObject_getWorldTransform(self)

    def isInWorldCoordinates(self):
        """
        Method:      isInWorldCoordinates() -> int
        Description: specifies if object vertices & normals have been transformed to world coordinates
                     (Maxwell can transform object internally at different points).
        """
        return _pymaxwell.CmaxwellObject_isInWorldCoordinates(self)

    def getTransformSubstepsCount(self):
        """
        Method:      getTransformSubstepsCount() -> int
        Description: Description: Return the number of substeps
                     used for defining Base and Pivot motion blur.
        """
        return _pymaxwell.CmaxwellObject_getTransformSubstepsCount(self)

    def getTransformStepInfoByIndex(self, *args):
        """
        Method:      getTransformStepInfoByIndex( int index )
                     -> (Cbase base, Cbase pivot, float time, ok)
        Description: Returns transform information(base, pivot and time) for the given index.
        """
        return _pymaxwell.CmaxwellObject_getTransformStepInfoByIndex(self, *args)

    def getPosition(self):
        """
        Method:      getPosition() -> (Cvector,ok)
        Description: Gets position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_getPosition(self)

    def setPosition(self, *args):
        """
        method:      setposition( Cvector ) -> 1 = success, 0 = fail
        description: Sets position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setPosition(self, *args)

    def getRotation(self):
        """
        Method:      getRotation() -> (Cvector,ok)
        Description: Gets rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_getRotation(self)

    def setRotation(self, *args):
        """
        Method:      setRotation( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setRotation(self, *args)

    def getScale(self):
        """
        Method:      getScale() -> (Cvector,ok)
        Description: Gets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_getScale(self)

    def setScale(self, *args):
        """
        Method:      setScale( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setScale(self, *args)

    def getShear(self):
        """
        Method:      getShear() -> (Cvector,ok)
        Description: Gets shear of the object in the scene
        """
        return _pymaxwell.CmaxwellObject_getShear(self)

    def setShear(self, *args):
        """
        Method:      setShear( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets scale of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setShear(self, *args)

    def getPivotPosition(self):
        """
        Method:      getPivotPosition() -> (Cvector,ok)
        Description: Gets pivot position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_getPivotPosition(self)

    def setPivotPosition(self, *args):
        """
        Method:      setPivotPosition( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets pivot position of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setPivotPosition(self, *args)

    def getPivotRotation(self):
        """
        Method:      getPivotRotation() -> (Cvector,ok)
        Description: Gets pivot rotation the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_getPivotRotation(self)

    def setPivotRotation(self, *args):
        """
        Method:      setPivotRotation( Cvector ) -> 1 = Success, 0 = Fail
        Description: Sets pivot rotation of the object in the scene.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_setPivotRotation(self, *args)

    def isPosRotScaleInitialized(self):
        """
        Method:      isPosRotScaleInitialized() -> (bool,ok)
        Description: Returns true if the following methods have been used for the given CmaxwellObject:
                     getPosition, setPosition, getRotation, setRotation, getScale, setScale,
                     getShear, setShear, getPivotPosition, setPivotPosition, getPivotRotation,
                     setPivotRotation.
                     Used by Maxwell Studio (not needed for rendering).
        """
        return _pymaxwell.CmaxwellObject_isPosRotScaleInitialized(self)

    def addTrianglesGroup(self, *args):
        """
        Method:      addTrianglesGroup( name, trianglesList ) -> 1 = Success, 0 = Fail
        Description: Method for triangles groups creation.
        Parameter:   name: Name of the triangles group.
        Parameter:   trianglesList: list with the indices of the triangles of the group.
        """
        return _pymaxwell.CmaxwellObject_addTrianglesGroup(self, *args)

    def recalculateNormals(self, *args):
        """
        Method:      recalculateNormals( thresholdAngle ) -> 1 = Success, 0 = Fail
        Description: Optional routine that recalculates normal vectors.
        Parameter:   thresholdAngle = specifies the maximum angle between neighbor
                     faces to smooth their normals.
        """
        return _pymaxwell.CmaxwellObject_recalculateNormals(self, *args)

    def cleanGeometry(self):
        """
        Method:      cleanGeometry() -> 1 = Success, 0 = Fail
        Description: Optional routine that removes degenerated faces, repeated/unused vertex
                     and normals. This function is automatically called inside the writeMXS method
                     it is not needed to call it except in scenarios like the interactive engine.
        """
        return _pymaxwell.CmaxwellObject_cleanGeometry(self)

    def getHide(self):
        """
        Method:      getHide() -> (bool,ok)
        Description: Checks whether the object is hidden.
        """
        return _pymaxwell.CmaxwellObject_getHide(self)

    def setHide(self, *args):
        """
        Method:      setHide( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility.
        """
        return _pymaxwell.CmaxwellObject_setHide(self, *args)

    def getHideToCamera(self):
        """
        Method:      getHideToCamera() -> (bool,ok)
        Description: Checks whether the object is hidden to camera.
        """
        return _pymaxwell.CmaxwellObject_getHideToCamera(self)

    def setHideToCamera(self, *args):
        """
        Method:      setHideToCamera( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to the camera.
        """
        return _pymaxwell.CmaxwellObject_setHideToCamera(self, *args)

    def getHideToReflectionsRefractions(self):
        """
        Method:      getHideToReflectionsRefractions() -> (bool,ok)
        Description: Checks whether the object is hidden to reflections and refractions
        """
        return _pymaxwell.CmaxwellObject_getHideToReflectionsRefractions(self)

    def setHideToReflectionsRefractions(self, *args):
        """
        Method:      setHideToReflectionsRefractions( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to reflections and refractions.
        """
        return _pymaxwell.CmaxwellObject_setHideToReflectionsRefractions(self, *args)

    def getHideToGI(self):
        """
        Method:      getHideToGI() -> (bool,ok)
        Description: Checks whether the object is hidden to global illumination.
        """
        return _pymaxwell.CmaxwellObject_getHideToGI(self)

    def setHideToGI(self, *args):
        """
        Method:      setHideToGI( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object visibility to global illumination.
        """
        return _pymaxwell.CmaxwellObject_setHideToGI(self, *args)

    def isExcludedOfCutPlanes(self):
        """
        Method:      isExcludedOfCutPlanes() -> (bool,ok)
        Description: Checks wheter the object is excluded of cut planes.
        """
        return _pymaxwell.CmaxwellObject_isExcludedOfCutPlanes(self)

    def excludeOfCutPlanes(self, *args):
        """
        Method:      excludeOfCutPlanes( bool ) -> 1 = Success, 0 = Fail
        Description: Sets the object inclusion of cut planes
        """
        return _pymaxwell.CmaxwellObject_excludeOfCutPlanes(self, *args)

    def getBackfaceCulling(self):
        """
        Method:      getBackfaceCulling() -> (bool,ok)
        Description: Checks whether backface culling is enabled.
        """
        return _pymaxwell.CmaxwellObject_getBackfaceCulling(self)

    def setBackfaceCulling(self, *args):
        """
        Method:      setBackfaceCulling( bool ) -> 1 = Success, 0 = Fail
        Description: Sets backface culling state of the object.
        """
        return _pymaxwell.CmaxwellObject_setBackfaceCulling(self, *args)

    def getOpacity(self):
        """
        Method:      getOpacity() -> (float,ok)
        Description: Checks opacity state of the object.
        """
        return _pymaxwell.CmaxwellObject_getOpacity(self)

    def setOpacity(self, *args):
        """
        Method:      setOpacity( float ) -> 1 = Success, 0 = Fail
        Description: Sets opacity state of the object.
        """
        return _pymaxwell.CmaxwellObject_setOpacity(self, *args)

    def getReferenceProxyDisplayPoints(self, *args):
        """
        Method:      getReferenceProxyDisplayPoints( int percent, int maxPoints ) -> numpy array (nPoints,3)
        Description: Returns an array with the vertices of the object in object space.
                     This function is not accurate but should be used for preview purposes only.
                     If the object is not a mesh, returns nothing.
        Parameter:   percent = percent (\%) of points of the mesh that will be returned.
        Parameter:   maxPoints = maximum number of points that will be in the returned array (-1
                                 means there is not a maximum fixed).

        """
        return _pymaxwell.CmaxwellObject_getReferenceProxyDisplayPoints(self, *args)

    def getColorID(self):
        """
        Method:      getColorID() -> (Crgb,ok)
        Description: Gets the color used by this object in the Object ID render channel.
        """
        return _pymaxwell.CmaxwellObject_getColorID(self)

    def setColorID(self, *args):
        """
        Method:      setColorID( Crgb ) -> 1 = Success, 0 = Fail
        Description: Sets the color used by this object in the Object ID render channel. RGB
                     values must always be in the 0-1 range.
        """
        return _pymaxwell.CmaxwellObject_setColorID(self, *args)

    def setGeometryDirty(self):
        """
        Method:      setGeometryDirty() -> 1 = Success, 0 = Fail
        Description: Method used to recalculate structures needed in interactive mode when the
                     object changes. It is not needed to call it if the UVs or material change,
                     but just should be called when the mesh or base change.
        """
        return _pymaxwell.CmaxwellObject_setGeometryDirty(self)

    def initializeMesh(self, *args):
        """initializeMesh(self, dword nVertex, dword nNormals, dword nTriangles, dword positionsPerVertex) -> byte"""
        return _pymaxwell.CmaxwellObject_initializeMesh(self, *args)

    def resizeMesh(self, *args):
        """
        Method:      resizeMesh( newNVertex, nweNNormals, nesNFaces, newNpositionsPervertex)
                     -> 1  = Success, 0 = Fail
        Description: This function reinitializes all the basic geometry and UV arrays. The number of
                     UV channels and their ids remain the same, but UV's are zeroed. Motion blur
                     vertices can be wiped (if there were) setting newNpositionsPerVertex = 1, or
                     added (if there weren't) setting newNpositionsPerVertex = 2.
        """
        return _pymaxwell.CmaxwellObject_resizeMesh(self, *args)

    def generateCustomUVW(self, *args):
        """generateCustomUVW(self, dword iChannel, dword iGeneratorType) -> byte"""
        return _pymaxwell.CmaxwellObject_generateCustomUVW(self, *args)

    def getUVWChannelProperties(self, *args):
        """
        Method:      getUVWChannelProperties( iChannel )
                      -> (int projType, bool custumProj, Cbase projectorBase, float startLatitude,
                         float endLatutide, float startLongitude, float endLongitude,
                         float startAngle, float endAngle, bool mirrorBackFaces, ok)
        """
        return _pymaxwell.CmaxwellObject_getUVWChannelProperties(self, *args)

    def getGlobalXform(self):
        """getGlobalXform(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGlobalXform(self)

    def getGlobalNormalsXform(self):
        """getGlobalNormalsXform(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGlobalNormalsXform(self)

    def getInverseGlobalXform(self):
        """getInverseGlobalXform(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getInverseGlobalXform(self)

    def getInverseGlobalNormalsXform(self):
        """getInverseGlobalNormalsXform(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getInverseGlobalNormalsXform(self)

    def isGeometryLoader(self):
        """
        Method:      isGeometryLoader() -> bool
        Description: Checks whether the object was created by a geometry loader extension
        """
        return _pymaxwell.CmaxwellObject_isGeometryLoader(self)

    def isGeometryProcedural(self):
        """
        Method:      isGeometryProcedural() -> bool
        Description: Checks whether the object was created by a procedural extension
        """
        return _pymaxwell.CmaxwellObject_isGeometryProcedural(self)

    def hasGeometryModifiers(self):
        """
        Method:      hasGeometryModifiers() -> bool
        Description: Checks whether the object has a geometry modifier extension
        """
        return _pymaxwell.CmaxwellObject_hasGeometryModifiers(self)

    def applyGeometryModifierExtension(self, *args):
        """applyGeometryModifierExtension(self, MXparamList extensionParams) -> byte"""
        return _pymaxwell.CmaxwellObject_applyGeometryModifierExtension(self, *args)

    def cleanAllGeometryModifierExtensions(self):
        """cleanAllGeometryModifierExtensions(self) -> byte"""
        return _pymaxwell.CmaxwellObject_cleanAllGeometryModifierExtensions(self)

    def getGeometryLoaderExtensionParams(self):
        """getGeometryLoaderExtensionParams(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGeometryLoaderExtensionParams(self)

    def getGeometryProceduralExtensionParams(self):
        """getGeometryProceduralExtensionParams(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGeometryProceduralExtensionParams(self)

    def getGeometryModifierExtensionsNumber(self):
        """getGeometryModifierExtensionsNumber(self) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGeometryModifierExtensionsNumber(self)

    def getGeometryModifierExtensionParamsAtIndex(self, *args):
        """getGeometryModifierExtensionParamsAtIndex(self, dword modifierExtensionsIndex) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getGeometryModifierExtensionParamsAtIndex(self, *args)

    def getCustomDataChunksCount(self):
        """getCustomDataChunksCount(self) -> dword"""
        return _pymaxwell.CmaxwellObject_getCustomDataChunksCount(self)

    def addCustomDataChunk(self, *args):
        """addCustomDataChunk(self, char name, MXparamList data) -> PyObject"""
        return _pymaxwell.CmaxwellObject_addCustomDataChunk(self, *args)

    def getCustomDataChunkByName(self, *args):
        """getCustomDataChunkByName(self, char name) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getCustomDataChunkByName(self, *args)

    def getCustomDataChunkAtIndex(self, *args):
        """getCustomDataChunkAtIndex(self, dword index) -> PyObject"""
        return _pymaxwell.CmaxwellObject_getCustomDataChunkAtIndex(self, *args)

    def getCustomDataChunkIndex(self, *args):
        """getCustomDataChunkIndex(self, char name) -> int"""
        return _pymaxwell.CmaxwellObject_getCustomDataChunkIndex(self, *args)

    def removeCustomDataChunk(self, *args):
        """removeCustomDataChunk(self, char name) -> byte"""
        return _pymaxwell.CmaxwellObject_removeCustomDataChunk(self, *args)

    def removeCustomDataChunkAtIndex(self, *args):
        """removeCustomDataChunkAtIndex(self, dword index) -> byte"""
        return _pymaxwell.CmaxwellObject_removeCustomDataChunkAtIndex(self, *args)

    def addToCustomAlpha(self, *args):
        """
        Method:      addToCustomAlpha( groupName ) -> 1 = Success, 0 = Fail
        Description: Adds the object to the custom alpha group named 'groupName'.
        """
        return _pymaxwell.CmaxwellObject_addToCustomAlpha(self, *args)

    def removeFromCustomAlpha(self, *args):
        """
        Method:      removeFromCustomAlpha( groupName ) -> 1 = Success, 0 = Fail
        Description: Removes the object from the custom alpha group named 'groupName'.
        Method:      removeFromCustomAlpha() -> 1 = Success, 0 = Fail
        Description: Removes the object from all custom alpha groups.
        """
        return _pymaxwell.CmaxwellObject_removeFromCustomAlpha(self, *args)

    def getNumCustomAlphaChannels(self):
        """
        Method:      removeFromCustomAlpha() -> (nChannels,ok)
        Description: Number of custom alpha channels/groups.
        """
        return _pymaxwell.CmaxwellObject_getNumCustomAlphaChannels(self)

    def getCustomAlphaChannels(self):
        """
        Method:      getCustomAlphaChannels( groupName ) -> (channelsNamesList,ok)
        Description: Gets a names list of all the custom alpha channels created.
        """
        return _pymaxwell.CmaxwellObject_getCustomAlphaChannels(self)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellObject was initialized.
        """
        return _pymaxwell.CmaxwellObject_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CmaxwellObject___str__(self)

    def __init__(self): 
        """__init__(self) -> CmaxwellObject"""
        this = _pymaxwell.new_CmaxwellObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellObject
    __del__ = lambda self : None;
CmaxwellObject_swigregister = _pymaxwell.CmaxwellObject_swigregister
CmaxwellObject_swigregister(CmaxwellObject)

class CmaxwellEnvironment(_object):
    """
    Class CmaxwellMaterial

      Class that contains the Maxwell material description.

      Example code:

        scene = Cmaxwell(mwcallback);
        material = scene.createMaterial('materialname');
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellEnvironment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellEnvironment, name)
    __repr__ = _swig_repr
    def getSunPositionType(self):
        """
        Method:      getSunPositionType() -> (type,ok)
        Description: Gets the sun position input type.
        Parameter:   type = 0 -> Latitude/Longitude
                            1 -> Angles (zenith/azimuth)
                            2 -> Direction (vector)

        """
        return _pymaxwell.CmaxwellEnvironment_getSunPositionType(self)

    def setSunPositionType(self, *args):
        """
        Method:      setSunPositionType( type ) -> 1 = Success, 0 = Fail
        Description: Sets the sun position input type. Call this function after
                     setPhysicalSkyGeometry and longitude and latitude parameters will be
                     overridden.
        Parameter:   type = 0 -> Latitude/Longitude
                            1 -> Angles (zenith/azimuth)
                            2 -> Direction (vector)

        """
        return _pymaxwell.CmaxwellEnvironment_setSunPositionType(self, *args)

    def getSkyConstant(self):
        """
        Method:      getSkyConstant() -> (float luminance , Crgb color0, Crgb color90,
                                          float controlPoint, ok)
        Description: get the parameters of the constant (non physical) sky
        Parameter:   luminance = any value greater than 0.
        Parameter:   color0 = Crgb color at the horizont
        Parameter:   color90 = Crgb color at the zenith
        Parameter:   controlPoint = Range from 0 to 90. Sets the angle where the two colors are
                     50/50 mixed (i.e controlPoint = 45.0 means that the color at 45 angle is 50\%
                     color0 and 50\% color90
        """
        return _pymaxwell.CmaxwellEnvironment_getSkyConstant(self)

    def setSkyConstant(self, *args):
        """
        Method:      setSkyConstant( luminance, color0, color90, controlPoint )
                     -> 1 = Success, 0 = Fail
        Description: set the parameters of the constant (non physical) sky
        Parameter:   luminance = any value greater than 0.
        Parameter:   color0 = Crgb color at the horizon
        Parameter:   color90 = Crgb color at the zenith
        Parameter:   controlPoint = Range from 0 to 90. Sets the angle where the two colors are
                     50/50 mixed (i.e controlPoint = 45.0 means that the color at 45 angle is 50\%
                     color0 and 50\% color90
        """
        return _pymaxwell.CmaxwellEnvironment_setSkyConstant(self, *args)

    def getSunLongitudeAndLatitude(self):
        """
        Method:      getSunLongitudeAndLatitude()
                     -> (longitude,latitude,sm,dayOfYear,timeOfDay,ok)
        Description: Gets the location of the sun when sunpositiontype = 0
        Parameter:   longitude from -180.0 to 180.0;
        Parameter:   latitude from -90.0 to 90.0
        Parameter:   sm from -12 to 12; default 0
        Parameter:   dayOfYear from 1 to 365; default 100
        Parameter:   timeOfDay from 0.0 to 24.0; default 17
        """
        return _pymaxwell.CmaxwellEnvironment_getSunLongitudeAndLatitude(self)

    def setSunLongitudeAndLatitude(self, *args):
        """
        Method:      setSunLongitudeAndLatitude( longitude, latitude, sm, dayOfYear, timeOfDay )
                     -> 1 = Success, 0 = Fail
        Description: Sets the location of the sun when sunpositiontype = 0
        Parameter:   longitude from -180.0 to 180.0;
        Parameter:   latitude from -90.0 to 90.0
        Parameter:   sm from -12 to 12; default 0
        Parameter:   dayOfYear from 1 to 365; default 100
        Parameter:   timeOfDay from 0.0 to 24.0; default 17
        """
        return _pymaxwell.CmaxwellEnvironment_setSunLongitudeAndLatitude(self, *args)

    def getSunAngles(self):
        """
        Method:      getSunAngles() -> (float zenith, float azimuth, ok)
        Description: It is an alternative way to get the sun position based on spheric angles.
        Parameter:   zenith = from 0.0 to 90.0 in radians.
        Parameter:   azimuth = from 0.0 to 360.0 in radians.
        """
        return _pymaxwell.CmaxwellEnvironment_getSunAngles(self)

    def setSunAngles(self, *args):
        """
        Method:      setSunAngles( zenith, azimuth ) -> 1 = Success, 0 = Fail
        Description: It is an alternative way to set the sun position based on spheric angles.
        Parameter:   zenith = from 0.0 to 90.0 in radians.
        Parameter:   azimuth = from 0.0 to 360.0 in radians.
        """
        return _pymaxwell.CmaxwellEnvironment_setSunAngles(self, *args)

    def getSunDirection(self):
        """
        Method:      getSunDirection() -> (Cvector,ok)
        Description: Gets sun direction that defines sun position.

        """
        return _pymaxwell.CmaxwellEnvironment_getSunDirection(self)

    def setSunDirection(self, *args):
        """
        Method:      setSunDirection( Cvector ) -> 1 = Success, 0 = Fail
        Description: It is an alternative way to set the sun position based on a direction.
        """
        return _pymaxwell.CmaxwellEnvironment_setSunDirection(self, *args)

    def getSunRotation(self):
        """
        Method:      getSunRotation() -> (rotation,ok)
        Description: Defines the ground rotation of the sky hemisphere.
        Parameter:   basisRotation (in radians) from 0 to 2PI radians.
        """
        return _pymaxwell.CmaxwellEnvironment_getSunRotation(self)

    def setSunRotation(self, *args):
        """
        Method:      setSunRotation( basisRotation ) -> 1 = Success, 0 = Fail
        Description: Defines the ground rotation of the sky hemisphere.
        Parameter:   basisRotation (in radians) from 0 to 2PI radians.
        """
        return _pymaxwell.CmaxwellEnvironment_setSunRotation(self, *args)

    def getSunProperties(self):
        """
        Method:      getSunProperties() -> (type,sunTemperature,sunPowerScaleFactor,radiusMultiplier,
                     constantColor)
        Description: Gets the sun properties used for both physical and constant skies when sun is
                     enabled.
        Parameter:   type: SUN_DISABLED, SUN_PHYSICAL (default) or SUN_CONSTANT.
        Parameter:   sunTemperature: in kelvins.Default 5777. Range: 100 - 1000000.
        Parameter:   sunPowerScaleFactor: total power refered to the Earth's sun. For example a
                     value of 0.8 would mean a sun emititng 0.8 times less energy than ours.
                     Default: 1.0. Range: Is allowed any value greater than 0.
        Parameter:   radiusMultiplier. Range: 0.01 - 1000.
        Parameter:   constantColor. Default rgb(1,1,1).
        """
        return _pymaxwell.CmaxwellEnvironment_getSunProperties(self)

    def setSunProperties(self, *args):
        """
        Method:      setSunProperties( type, sunTemperature, sunPowerScaleFactor, radiusMultiplier,
                     Crgb constantColor ) -> 1 = Success, 0 = Fail
        Description: Gets the sun properties used for both physical and constant skies when sun is
                     enabled.
        Parameter:   type: SUN_DISABLED, SUN_PHYSICAL (default) or SUN_CONSTANT.
        Parameter:   sunTemperature: in kelvins.Default 5777. Range: 100 - 1000000.
        Parameter:   sunPowerScaleFactor: total power refered to the Earth's sun. For example a
                     value of 0.8 would mean a sun emititng 0.8 times less energy than ours.
                     Default: 1.0. Range: Is allowed any value greater than 0.
        Parameter:   radiusMultiplier. Range: 0.01 - 1000.
        Parameter:   constantColor. Default rgb(1,1,1).
        """
        return _pymaxwell.CmaxwellEnvironment_setSunProperties(self, *args)

    def getPhysicalSkyAtmosphere(self):
        """
        Method:      getPhysicalSkyAtmosphere() -> (float intensity, float ozone, float water,
                                                    float angstromTurbidity, float wavelengthTurbidity,
                                                    float aerosolAlbedo, float asimmetryFactor,
                                                    float planetReflectance, ok)
        Description: Gets the atmosphere parameters of the physical sky.
        Parameter:   intensity. Default: 1.0 Range: Any value greater than 0.
        Parameter:   ozone ( cms ) Default: 0.4.
                     Range: Any value greater than 0 (usually between 0 and 1).
        Parameter:   water: water vapor ( cms ) Default: 2.0 Range: Any value greater than 0.
        Parameter:   angstromTurbidity: coefficient Default: 0.04 Range: Any value greater than 0.
        Parameter:   wavelengthTurbidity exponent Default: 1.2 Range: Any value greater than 0.
        Parameter:   aerosolAlbedo: aerosol albedo Default: 0.8 Range: (0,1).
        Parameter:   asimmetryFactor: 'anisotropy' of aerosol.
                     Default: 0.7. Range (-0.99999, 0.99999).
        Parameter:   planetReflectance: Range (0.0, 1.0)
        """
        return _pymaxwell.CmaxwellEnvironment_getPhysicalSkyAtmosphere(self)

    def setPhysicalSkyAtmosphere(self, *args):
        """
        Method:      setPhysicalSkyAtmosphere( intensity, ozone, water, angstromTurbidity,
                       wavelengthTurbidity, aerosolAlbedo, asimmetryFactor, planetReflectance )
                     -> 1 = Success, 0 = Fail
        Description: Sets the atmosphere parameters of the physical sky
        Parameter:   intensity. Default: 1.0 Range: Any value greater than 0
        Parameter:   ozone ( cms ) Default: 0.4
                     Range: Any value greater than 0 (usually between 0 and 1)
        Parameter:   water: water vapor ( cms ) Default: 2.0 Range: Any value greater than 0
        Parameter:   angstrom turbidity: coefficient Default: 0.04 Range: Any value greater than 0
        Parameter:   wavelength turbidity exponent Default: 1.2 Range: Any value greater than 0
        Parameter:   aerosolAlbedo: aerosol albedo Default: 0.8 Range: (0-1)
        Parameter:   asimmetryFactor: 'anisotropy' of aerosol.
                     Default: 0.7. Range (-0.99999, 0.99999);
        Parameter:   planetReflectance: Range (0.0, 1.0)
        """
        return _pymaxwell.CmaxwellEnvironment_setPhysicalSkyAtmosphere(self, *args)

    def getActiveSky(self):
        """
        Method:       getActiveSky() -> string
        Description:  Gets the active sky used. Returns:
                      None <- no sky,
                      'CONSTANT' <- constant sky
                      'PHYSICAL' <- physical sky
        """
        return _pymaxwell.CmaxwellEnvironment_getActiveSky(self)

    def setActiveSky(self, *args):
        """
        Method:       setActiveSky( sky ) -> 1 = Success, 0 = Fail
        Description:  Sets the active sky
        Parameter:    sky = '' (no sky), 'CONSTANT' or 'PHYSICAL'
        """
        return _pymaxwell.CmaxwellEnvironment_setActiveSky(self, *args)

    def getSunDirectionUsedForRendering(self):
        """
        Method:      getSunDirectionUsedForRendering() -> (Cvector,ok)
        Description: Returns the sun direction. If the sun position was set through a direction
                     vector, it returns the same vector. If the sun position was set through
                     latitude/longitude or through angles it returns the translation to a direction.
                     This function is mainly used for drawing the sky in a viewport.
        """
        return _pymaxwell.CmaxwellEnvironment_getSunDirectionUsedForRendering(self)

    def saveSkyToHDR(self, *args):
        """
        Method:       saveSkyToHDR( path, xRes, yRes ) -> 1 = Success, 0 = Fail
        Description:  Saves current sky to an HDR file in the path 'path' with the given
                      resolution.
        """
        return _pymaxwell.CmaxwellEnvironment_saveSkyToHDR(self, *args)

    def saveSkyToPreset(self, *args):
        """
        Method:       saveSkyToPreset( path ) -> 1 = Success, 0 = Fail
        Description:  Saves current physical sky values to a sky preset file in 'path'.
        """
        return _pymaxwell.CmaxwellEnvironment_saveSkyToPreset(self, *args)

    def loadSkyFromPreset(self, *args):
        """
        Method:       loadSkyFromPreset( path ) -> 1 = Success, 0 = Fail
        Description:  Loads 'path' preset file into the scene replacing current physical sky values.
        """
        return _pymaxwell.CmaxwellEnvironment_loadSkyFromPreset(self, *args)

    def getSkyColor(self, *args):
        """
        Method:       getSkyColor( Cvector dir ) -> (Crgb hdr, Crgb8 ldr, ok)
        Description:  Returns sky RGB color (already tonemapped and after exposure is applied) of
                      the current sky values in the given direction.
        """
        return _pymaxwell.CmaxwellEnvironment_getSkyColor(self, *args)

    def getSkyColorNoTonemapped(self, *args):
        """
        Method:       getSkyColorNoTonemapped( Cvector dir ) -> (Crgb,ok)
        Description:  Returns sky RGB color (without tonemapping nor exposure) of the current
                      sky values in the given direction
        """
        return _pymaxwell.CmaxwellEnvironment_getSkyColorNoTonemapped(self, *args)

    def isEnvironmentEnabled(self):
        """
        Method:      isEnvironmentEnabled() -> (bool,ok)
        Description: Checks whether the IBL (Image Based Lighting) is enabled
        """
        return _pymaxwell.CmaxwellEnvironment_isEnvironmentEnabled(self)

    def enableEnvironment(self, *args):
        """
        Method:      enableEnvironment( enable ) -> 1 = Success, 0 = Fail
        Description: Sets the IBL (Image Based Lighting) on/off.
        """
        return _pymaxwell.CmaxwellEnvironment_enableEnvironment(self, *args)

    def getEnvironmentWeight(self):
        """
        Method:      getEnvironmentWeight() -> (weight,ok)
        Description: Gets the value for the global multiplier of all the environment layers. This
                     multiplier is the number used in multilight to adjust all the layers at once.
        """
        return _pymaxwell.CmaxwellEnvironment_getEnvironmentWeight(self)

    def setEnvironmentWeight(self, *args):
        """
        Method:      setEnvironmentWeight( weight ) -> 1 = Success, 0 = Fail
        Description: Sets the value for the global multiplier of all the environment layers. This
                     multiplier is the number used in multilight to adjust all the layers at once.
        """
        return _pymaxwell.CmaxwellEnvironment_setEnvironmentWeight(self, *args)

    def setEnvironmentLayer(self, *args):
        """
        Method: setEnvironmentLayer( layerType, bitmapFileName, bool state, bool sphericalMapping,
                     bool interpolate, real intensity, real uTile, real vTile, real uTileOffset,
                     real vTileOffset ) -> 1 = Success, 0 = Fail
        Description: Sets the parameters of each environment layer.
        Parameter:   layerType sets the layer type. IBL_LAYER_BACKGROUND, IBL_LAYER_REFLECTION,
                     IBL_LAYER_REFRACTION or IBL_LAYER_ILLUMINATION.
        Parameter:   bitmapFileName. Path of the texture file.
        Parameter:   channel state: 0 = Disabled;  1 = Enabled; 2 = Use active sky instead.
                     Default: Enabled.
        Parameter:   sphericalMapping can only be set to false when pLayerName = 'background'.
        Parameter:   interpolate: If true, pixel values are interpolated.
        Parameter:   Intensity. Range: From 0.0 to 1000.0 (default 1.0).
        Parameter:   uTile/vTile. Range: From 0.0001 to 1000.0 (default 1.0).
        Parameter:   uTileOffset/vTileOffset. Range: From 0.0 to 360.0 (default 0.0).
        """
        return _pymaxwell.CmaxwellEnvironment_setEnvironmentLayer(self, *args)

    def getEnvironmentLayer(self, *args):
        """
        Method: getEnvironmentLayer( layerType ) -> (bitmapFileName,state,sphericalMapping,
                     interpolate,intensity,uTile,vTile,uTileOffset,vTileOffset,ok)
        Description: Gets the parameters of each environment layer.
        Parameter:   layerType sets the layer type. IBL_LAYER_BACKGROUND, IBL_LAYER_REFLECTION,
                     IBL_LAYER_REFRACTION or IBL_LAYER_ILLUMINATION.
        Parameter:   bitmapFileName. Path of the texture file.
        Parameter:   channel state: 0 = Disabled;  1 = Enabled; 2 = Use active sky instead.
                     Default: Enabled.
        Parameter:   sphericalMapping can only be set to false when pLayerName = 'background'.
        Parameter:   interpolate: If true, pixel values are interpolated.
        Parameter:   Intensity. Range: From 0.0 to 1000.0 (default 1.0).
        Parameter:   uTile/vTile. Range: From 0.0001 to 1000.0 (default 1.0).
        Parameter:   uTileOffset/vTileOffset. Range: From 0.0 to 360.0 (default 0.0).
        """
        return _pymaxwell.CmaxwellEnvironment_getEnvironmentLayer(self, *args)

    def isNull(self):
        """
        Method:      isNull() -> bool
        Description: Checks whether the CmaxwellEnvironment was initialized.
        """
        return _pymaxwell.CmaxwellEnvironment_isNull(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CmaxwellEnvironment___str__(self)

    def __init__(self): 
        """__init__(self) -> CmaxwellEnvironment"""
        this = _pymaxwell.new_CmaxwellEnvironment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellEnvironment
    __del__ = lambda self : None;
CmaxwellEnvironment_swigregister = _pymaxwell.CmaxwellEnvironment_swigregister
CmaxwellEnvironment_swigregister(CmaxwellEnvironment)

class CdwVector2D(_object):
    """Proxy of C++ Cvector2DT<(dword)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CdwVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CdwVector2D, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_x(self)

    def y(self):
        """y(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_y(self)

    def u(self):
        """u(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_u(self)

    def v(self):
        """v(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_v(self)

    def i(self):
        """i(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_i(self)

    def j(self):
        """j(self) -> unsigned long"""
        return _pymaxwell.CdwVector2D_j(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned long"""
        return _pymaxwell.CdwVector2D___getitem__(self, *args)

    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.CdwVector2D_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.CdwVector2D_setZero(self)

    def assign(self, *args):
        """
        assign(self, double vx, double vy)
        assign(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, CdwVector2D vector) -> bool"""
        return _pymaxwell.CdwVector2D___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, CdwVector2D vector) -> bool"""
        return _pymaxwell.CdwVector2D___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, CdwVector2D v) -> bool"""
        return _pymaxwell.CdwVector2D___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, CdwVector2D v) -> bool"""
        return _pymaxwell.CdwVector2D_isEqual(self, *args)

    def abs(self):
        """abs(self)"""
        return _pymaxwell.CdwVector2D_abs(self)

    def negate(self, *args):
        """
        negate(self)
        negate(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D_negate(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, CdwVector2D v)
        add(self, CdwVector2D v, double value)
        add(self, CdwVector2D v1, CdwVector2D v2)
        add(self, CdwVector2D v1, CdwVector2D v2, CdwVector2D v3)
        """
        return _pymaxwell.CdwVector2D_add(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, CdwVector2D v)
        substract(self, CdwVector2D v1, CdwVector2D v2)
        """
        return _pymaxwell.CdwVector2D_substract(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, CdwVector2D v, double scale)
        """
        return _pymaxwell.CdwVector2D_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, CdwVector2D v, double scale)"""
        return _pymaxwell.CdwVector2D_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, CdwVector2D v, double scale)"""
        return _pymaxwell.CdwVector2D_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, CdwVector2D p1, CdwVector2D p2)
        midPoint(self, CdwVector2D p1, CdwVector2D p2, CdwVector2D p3)
        """
        return _pymaxwell.CdwVector2D_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D___imul__(self, *args)

    def product(self, *args):
        """product(self, CdwVector2D v)"""
        return _pymaxwell.CdwVector2D_product(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, CdwVector2D v)
        """
        return _pymaxwell.CdwVector2D_invert(self, *args)

    def dot(self, *args):
        """dot(self, CdwVector2D v) -> double"""
        return _pymaxwell.CdwVector2D_dot(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.CdwVector2D_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.CdwVector2D_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.CdwVector2D_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CdwVector2D___str__(self)

    def __init__(self): 
        """__init__(self) -> CdwVector2D"""
        this = _pymaxwell.new_CdwVector2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CdwVector2D
    __del__ = lambda self : None;
CdwVector2D_swigregister = _pymaxwell.CdwVector2D_swigregister
CdwVector2D_swigregister(CdwVector2D)

class CuVector2D(CdwVector2D):
    """Proxy of C++ CuVector2D class"""
    __swig_setmethods__ = {}
    for _s in [CdwVector2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CuVector2D, name, value)
    __swig_getmethods__ = {}
    for _s in [CdwVector2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CuVector2D, name)
    __repr__ = _swig_repr
    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.CuVector2D_isZero(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CuVector2D___str__(self)

    def __init__(self): 
        """__init__(self) -> CuVector2D"""
        this = _pymaxwell.new_CuVector2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CuVector2D
    __del__ = lambda self : None;
CuVector2D_swigregister = _pymaxwell.CuVector2D_swigregister
CuVector2D_swigregister(CuVector2D)

class CwVector2D(_object):
    """Proxy of C++ Cvector2DT<(word)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CwVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CwVector2D, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_x(self)

    def y(self):
        """y(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_y(self)

    def u(self):
        """u(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_u(self)

    def v(self):
        """v(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_v(self)

    def i(self):
        """i(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_i(self)

    def j(self):
        """j(self) -> unsigned short"""
        return _pymaxwell.CwVector2D_j(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned short"""
        return _pymaxwell.CwVector2D___getitem__(self, *args)

    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.CwVector2D_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.CwVector2D_setZero(self)

    def assign(self, *args):
        """
        assign(self, double vx, double vy)
        assign(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, CwVector2D vector) -> bool"""
        return _pymaxwell.CwVector2D___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, CwVector2D vector) -> bool"""
        return _pymaxwell.CwVector2D___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, CwVector2D v) -> bool"""
        return _pymaxwell.CwVector2D___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, CwVector2D v) -> bool"""
        return _pymaxwell.CwVector2D_isEqual(self, *args)

    def abs(self):
        """abs(self)"""
        return _pymaxwell.CwVector2D_abs(self)

    def negate(self, *args):
        """
        negate(self)
        negate(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D_negate(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, CwVector2D v)
        add(self, CwVector2D v, double value)
        add(self, CwVector2D v1, CwVector2D v2)
        add(self, CwVector2D v1, CwVector2D v2, CwVector2D v3)
        """
        return _pymaxwell.CwVector2D_add(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, CwVector2D v)
        substract(self, CwVector2D v1, CwVector2D v2)
        """
        return _pymaxwell.CwVector2D_substract(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, CwVector2D v, double scale)
        """
        return _pymaxwell.CwVector2D_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, CwVector2D v, double scale)"""
        return _pymaxwell.CwVector2D_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, CwVector2D v, double scale)"""
        return _pymaxwell.CwVector2D_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, CwVector2D p1, CwVector2D p2)
        midPoint(self, CwVector2D p1, CwVector2D p2, CwVector2D p3)
        """
        return _pymaxwell.CwVector2D_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D___imul__(self, *args)

    def product(self, *args):
        """product(self, CwVector2D v)"""
        return _pymaxwell.CwVector2D_product(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, CwVector2D v)
        """
        return _pymaxwell.CwVector2D_invert(self, *args)

    def dot(self, *args):
        """dot(self, CwVector2D v) -> double"""
        return _pymaxwell.CwVector2D_dot(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.CwVector2D_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.CwVector2D_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.CwVector2D_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CwVector2D___str__(self)

    def __init__(self): 
        """__init__(self) -> CwVector2D"""
        this = _pymaxwell.new_CwVector2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CwVector2D
    __del__ = lambda self : None;
CwVector2D_swigregister = _pymaxwell.CwVector2D_swigregister
CwVector2D_swigregister(CwVector2D)

class CfVector2D(_object):
    """Proxy of C++ Cvector2DT<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CfVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CfVector2D, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> float"""
        return _pymaxwell.CfVector2D_x(self)

    def y(self):
        """y(self) -> float"""
        return _pymaxwell.CfVector2D_y(self)

    def u(self):
        """u(self) -> float"""
        return _pymaxwell.CfVector2D_u(self)

    def v(self):
        """v(self) -> float"""
        return _pymaxwell.CfVector2D_v(self)

    def i(self):
        """i(self) -> float"""
        return _pymaxwell.CfVector2D_i(self)

    def j(self):
        """j(self) -> float"""
        return _pymaxwell.CfVector2D_j(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> float"""
        return _pymaxwell.CfVector2D___getitem__(self, *args)

    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.CfVector2D_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.CfVector2D_setZero(self)

    def assign(self, *args):
        """
        assign(self, double vx, double vy)
        assign(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, CfVector2D vector) -> bool"""
        return _pymaxwell.CfVector2D___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, CfVector2D vector) -> bool"""
        return _pymaxwell.CfVector2D___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, CfVector2D v) -> bool"""
        return _pymaxwell.CfVector2D___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, CfVector2D v) -> bool"""
        return _pymaxwell.CfVector2D_isEqual(self, *args)

    def abs(self):
        """abs(self)"""
        return _pymaxwell.CfVector2D_abs(self)

    def negate(self, *args):
        """
        negate(self)
        negate(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D_negate(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, CfVector2D v)
        add(self, CfVector2D v, double value)
        add(self, CfVector2D v1, CfVector2D v2)
        add(self, CfVector2D v1, CfVector2D v2, CfVector2D v3)
        """
        return _pymaxwell.CfVector2D_add(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, CfVector2D v)
        substract(self, CfVector2D v1, CfVector2D v2)
        """
        return _pymaxwell.CfVector2D_substract(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, CfVector2D v, double scale)
        """
        return _pymaxwell.CfVector2D_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, CfVector2D v, double scale)"""
        return _pymaxwell.CfVector2D_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, CfVector2D v, double scale)"""
        return _pymaxwell.CfVector2D_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, CfVector2D p1, CfVector2D p2)
        midPoint(self, CfVector2D p1, CfVector2D p2, CfVector2D p3)
        """
        return _pymaxwell.CfVector2D_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D___imul__(self, *args)

    def product(self, *args):
        """product(self, CfVector2D v)"""
        return _pymaxwell.CfVector2D_product(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, CfVector2D v)
        """
        return _pymaxwell.CfVector2D_invert(self, *args)

    def dot(self, *args):
        """dot(self, CfVector2D v) -> double"""
        return _pymaxwell.CfVector2D_dot(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.CfVector2D_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.CfVector2D_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.CfVector2D_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CfVector2D___str__(self)

    def __init__(self): 
        """__init__(self) -> CfVector2D"""
        this = _pymaxwell.new_CfVector2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CfVector2D
    __del__ = lambda self : None;
CfVector2D_swigregister = _pymaxwell.CfVector2D_swigregister
CfVector2D_swigregister(CfVector2D)

class Cvector2D(_object):
    """Proxy of C++ Cvector2DT<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cvector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cvector2D, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> double"""
        return _pymaxwell.Cvector2D_x(self)

    def y(self):
        """y(self) -> double"""
        return _pymaxwell.Cvector2D_y(self)

    def u(self):
        """u(self) -> double"""
        return _pymaxwell.Cvector2D_u(self)

    def v(self):
        """v(self) -> double"""
        return _pymaxwell.Cvector2D_v(self)

    def i(self):
        """i(self) -> double"""
        return _pymaxwell.Cvector2D_i(self)

    def j(self):
        """j(self) -> double"""
        return _pymaxwell.Cvector2D_j(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> double"""
        return _pymaxwell.Cvector2D___getitem__(self, *args)

    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.Cvector2D_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.Cvector2D_setZero(self)

    def assign(self, *args):
        """
        assign(self, double vx, double vy)
        assign(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Cvector2D vector) -> bool"""
        return _pymaxwell.Cvector2D___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, Cvector2D vector) -> bool"""
        return _pymaxwell.Cvector2D___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, Cvector2D v) -> bool"""
        return _pymaxwell.Cvector2D___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, Cvector2D v) -> bool"""
        return _pymaxwell.Cvector2D_isEqual(self, *args)

    def abs(self):
        """abs(self)"""
        return _pymaxwell.Cvector2D_abs(self)

    def negate(self, *args):
        """
        negate(self)
        negate(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D_negate(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, Cvector2D v)
        add(self, Cvector2D v, double value)
        add(self, Cvector2D v1, Cvector2D v2)
        add(self, Cvector2D v1, Cvector2D v2, Cvector2D v3)
        """
        return _pymaxwell.Cvector2D_add(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, Cvector2D v)
        substract(self, Cvector2D v1, Cvector2D v2)
        """
        return _pymaxwell.Cvector2D_substract(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, Cvector2D v, double scale)
        """
        return _pymaxwell.Cvector2D_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, Cvector2D v, double scale)"""
        return _pymaxwell.Cvector2D_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, Cvector2D v, double scale)"""
        return _pymaxwell.Cvector2D_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, Cvector2D p1, Cvector2D p2)
        midPoint(self, Cvector2D p1, Cvector2D p2, Cvector2D p3)
        """
        return _pymaxwell.Cvector2D_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D___imul__(self, *args)

    def product(self, *args):
        """product(self, Cvector2D v)"""
        return _pymaxwell.Cvector2D_product(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, Cvector2D v)
        """
        return _pymaxwell.Cvector2D_invert(self, *args)

    def dot(self, *args):
        """dot(self, Cvector2D v) -> double"""
        return _pymaxwell.Cvector2D_dot(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.Cvector2D_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.Cvector2D_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.Cvector2D_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cvector2D___str__(self)

    def __init__(self): 
        """__init__(self) -> Cvector2D"""
        this = _pymaxwell.new_Cvector2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Cvector2D
    __del__ = lambda self : None;
Cvector2D_swigregister = _pymaxwell.Cvector2D_swigregister
Cvector2D_swigregister(Cvector2D)

class CfVector(_object):
    """Proxy of C++ Cvector3DT<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CfVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CfVector, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> float"""
        return _pymaxwell.CfVector_x(self)

    def y(self):
        """y(self) -> float"""
        return _pymaxwell.CfVector_y(self)

    def z(self):
        """z(self) -> float"""
        return _pymaxwell.CfVector_z(self)

    def r(self):
        """r(self) -> float"""
        return _pymaxwell.CfVector_r(self)

    def g(self):
        """g(self) -> float"""
        return _pymaxwell.CfVector_g(self)

    def b(self):
        """b(self) -> float"""
        return _pymaxwell.CfVector_b(self)

    def u(self):
        """u(self) -> float"""
        return _pymaxwell.CfVector_u(self)

    def v(self):
        """v(self) -> float"""
        return _pymaxwell.CfVector_v(self)

    def w(self):
        """w(self) -> float"""
        return _pymaxwell.CfVector_w(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> float"""
        return _pymaxwell.CfVector___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> CfVector
        __init__(self, float _x, float _y, float _z) -> CfVector
        """
        this = _pymaxwell.new_CfVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.CfVector_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.CfVector_setZero(self)

    def getSummatory(self):
        """getSummatory(self) -> float"""
        return _pymaxwell.CfVector_getSummatory(self)

    def director(self, *args):
        """director(self, CfVector v1, CfVector v2)"""
        return _pymaxwell.CfVector_director(self, *args)

    def assign(self, *args):
        """
        assign(self, double vx, double vy, double vz)
        assign(self, CfVector v)
        """
        return _pymaxwell.CfVector_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, CfVector vector) -> bool"""
        return _pymaxwell.CfVector___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, CfVector vector) -> bool"""
        return _pymaxwell.CfVector___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, CfVector v) -> bool"""
        return _pymaxwell.CfVector___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, CfVector v) -> bool"""
        return _pymaxwell.CfVector_isEqual(self, *args)

    def negate(self, *args):
        """
        negate(self)
        negate(self, CfVector v)
        """
        return _pymaxwell.CfVector_negate(self, *args)

    def absolute(self, *args):
        """
        absolute(self)
        absolute(self, CfVector v)
        """
        return _pymaxwell.CfVector_absolute(self, *args)

    def __add__(self, *args):
        """
        __add__(self, double value) -> CfVector
        __add__(self, CfVector v) -> CfVector
        """
        return _pymaxwell.CfVector___add__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, CfVector v)
        """
        return _pymaxwell.CfVector___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, CfVector v)
        add(self, CfVector v, double value)
        add(self, CfVector v1, CfVector v2)
        add(self, CfVector v1, CfVector v2, CfVector v3)
        """
        return _pymaxwell.CfVector_add(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, double value) -> CfVector
        __sub__(self, CfVector v) -> CfVector
        """
        return _pymaxwell.CfVector___sub__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, CfVector v)
        """
        return _pymaxwell.CfVector___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, CfVector v)
        substract(self, CfVector v1, CfVector v2)
        """
        return _pymaxwell.CfVector_substract(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, double value) -> CfVector
        __mul__(self, CfVector v) -> CfVector
        """
        return _pymaxwell.CfVector___mul__(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, CfVector v, double scale)
        """
        return _pymaxwell.CfVector_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, CfVector v, double scale)"""
        return _pymaxwell.CfVector_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, CfVector v, double scale)"""
        return _pymaxwell.CfVector_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, CfVector p1, CfVector p2)
        midPoint(self, CfVector p1, CfVector p2, CfVector p3)
        """
        return _pymaxwell.CfVector_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, CfVector v)
        """
        return _pymaxwell.CfVector___imul__(self, *args)

    def multiply(self, *args):
        """multiply(self, CfVector v)"""
        return _pymaxwell.CfVector_multiply(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, CfVector v)
        """
        return _pymaxwell.CfVector_invert(self, *args)

    def dot(self, *args):
        """dot(self, CfVector v) -> double"""
        return _pymaxwell.CfVector_dot(self, *args)

    def cross(self, *args):
        """cross(self, CfVector v1, CfVector v2)"""
        return _pymaxwell.CfVector_cross(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.CfVector_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.CfVector_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.CfVector_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CfVector___str__(self)

    __swig_destroy__ = _pymaxwell.delete_CfVector
    __del__ = lambda self : None;
CfVector_swigregister = _pymaxwell.CfVector_swigregister
CfVector_swigregister(CfVector)

class Cvector(_object):
    """Proxy of C++ Cvector3DT<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cvector, name)
    __repr__ = _swig_repr
    def x(self):
        """x(self) -> double"""
        return _pymaxwell.Cvector_x(self)

    def y(self):
        """y(self) -> double"""
        return _pymaxwell.Cvector_y(self)

    def z(self):
        """z(self) -> double"""
        return _pymaxwell.Cvector_z(self)

    def r(self):
        """r(self) -> double"""
        return _pymaxwell.Cvector_r(self)

    def g(self):
        """g(self) -> double"""
        return _pymaxwell.Cvector_g(self)

    def b(self):
        """b(self) -> double"""
        return _pymaxwell.Cvector_b(self)

    def u(self):
        """u(self) -> double"""
        return _pymaxwell.Cvector_u(self)

    def v(self):
        """v(self) -> double"""
        return _pymaxwell.Cvector_v(self)

    def w(self):
        """w(self) -> double"""
        return _pymaxwell.Cvector_w(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> double"""
        return _pymaxwell.Cvector___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Cvector
        __init__(self, double _x, double _y, double _z) -> Cvector
        """
        this = _pymaxwell.new_Cvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.Cvector_isZero(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.Cvector_setZero(self)

    def getSummatory(self):
        """getSummatory(self) -> double"""
        return _pymaxwell.Cvector_getSummatory(self)

    def director(self, *args):
        """director(self, Cvector v1, Cvector v2)"""
        return _pymaxwell.Cvector_director(self, *args)

    def assign(self, *args):
        """
        assign(self, double vx, double vy, double vz)
        assign(self, Cvector v)
        """
        return _pymaxwell.Cvector_assign(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Cvector vector) -> bool"""
        return _pymaxwell.Cvector___lt__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, Cvector vector) -> bool"""
        return _pymaxwell.Cvector___gt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, Cvector v) -> bool"""
        return _pymaxwell.Cvector___eq__(self, *args)

    def isEqual(self, *args):
        """isEqual(self, Cvector v) -> bool"""
        return _pymaxwell.Cvector_isEqual(self, *args)

    def negate(self, *args):
        """
        negate(self)
        negate(self, Cvector v)
        """
        return _pymaxwell.Cvector_negate(self, *args)

    def absolute(self, *args):
        """
        absolute(self)
        absolute(self, Cvector v)
        """
        return _pymaxwell.Cvector_absolute(self, *args)

    def __add__(self, *args):
        """
        __add__(self, double value) -> Cvector
        __add__(self, Cvector v) -> Cvector
        """
        return _pymaxwell.Cvector___add__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value)
        __iadd__(self, Cvector v)
        """
        return _pymaxwell.Cvector___iadd__(self, *args)

    def add(self, *args):
        """
        add(self, double value)
        add(self, Cvector v)
        add(self, Cvector v, double value)
        add(self, Cvector v1, Cvector v2)
        add(self, Cvector v1, Cvector v2, Cvector v3)
        """
        return _pymaxwell.Cvector_add(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, double value) -> Cvector
        __sub__(self, Cvector v) -> Cvector
        """
        return _pymaxwell.Cvector___sub__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value)
        __isub__(self, Cvector v)
        """
        return _pymaxwell.Cvector___isub__(self, *args)

    def substract(self, *args):
        """
        substract(self, double value)
        substract(self, Cvector v)
        substract(self, Cvector v1, Cvector v2)
        """
        return _pymaxwell.Cvector_substract(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, double value) -> Cvector
        __mul__(self, Cvector v) -> Cvector
        """
        return _pymaxwell.Cvector___mul__(self, *args)

    def scale(self, *args):
        """
        scale(self, double scale)
        scale(self, Cvector v, double scale)
        """
        return _pymaxwell.Cvector_scale(self, *args)

    def scaleAdd(self, *args):
        """scaleAdd(self, Cvector v, double scale)"""
        return _pymaxwell.Cvector_scaleAdd(self, *args)

    def scaleSubstract(self, *args):
        """scaleSubstract(self, Cvector v, double scale)"""
        return _pymaxwell.Cvector_scaleSubstract(self, *args)

    def midPoint(self, *args):
        """
        midPoint(self, Cvector p1, Cvector p2)
        midPoint(self, Cvector p1, Cvector p2, Cvector p3)
        """
        return _pymaxwell.Cvector_midPoint(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double scale)
        __imul__(self, Cvector v)
        """
        return _pymaxwell.Cvector___imul__(self, *args)

    def multiply(self, *args):
        """multiply(self, Cvector v)"""
        return _pymaxwell.Cvector_multiply(self, *args)

    def invert(self, *args):
        """
        invert(self)
        invert(self, Cvector v)
        """
        return _pymaxwell.Cvector_invert(self, *args)

    def dot(self, *args):
        """dot(self, Cvector v) -> double"""
        return _pymaxwell.Cvector_dot(self, *args)

    def cross(self, *args):
        """cross(self, Cvector v1, Cvector v2)"""
        return _pymaxwell.Cvector_cross(self, *args)

    def norm(self):
        """norm(self) -> double"""
        return _pymaxwell.Cvector_norm(self)

    def squareNorm(self):
        """squareNorm(self) -> double"""
        return _pymaxwell.Cvector_squareNorm(self)

    def normalize(self):
        """normalize(self)"""
        return _pymaxwell.Cvector_normalize(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cvector___str__(self)

    __swig_destroy__ = _pymaxwell.delete_Cvector
    __del__ = lambda self : None;
Cvector_swigregister = _pymaxwell.Cvector_swigregister
Cvector_swigregister(Cvector)

class Cbase(_object):
    """Proxy of C++ CbaseT<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cbase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cbase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _pymaxwell.Cbase_origin_set
    __swig_getmethods__["origin"] = _pymaxwell.Cbase_origin_get
    if _newclass:origin = _swig_property(_pymaxwell.Cbase_origin_get, _pymaxwell.Cbase_origin_set)
    __swig_setmethods__["xAxis"] = _pymaxwell.Cbase_xAxis_set
    __swig_getmethods__["xAxis"] = _pymaxwell.Cbase_xAxis_get
    if _newclass:xAxis = _swig_property(_pymaxwell.Cbase_xAxis_get, _pymaxwell.Cbase_xAxis_set)
    __swig_setmethods__["yAxis"] = _pymaxwell.Cbase_yAxis_set
    __swig_getmethods__["yAxis"] = _pymaxwell.Cbase_yAxis_get
    if _newclass:yAxis = _swig_property(_pymaxwell.Cbase_yAxis_get, _pymaxwell.Cbase_yAxis_set)
    __swig_setmethods__["zAxis"] = _pymaxwell.Cbase_zAxis_set
    __swig_getmethods__["zAxis"] = _pymaxwell.Cbase_zAxis_get
    if _newclass:zAxis = _swig_property(_pymaxwell.Cbase_zAxis_get, _pymaxwell.Cbase_zAxis_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Cbase
        __init__(self, CbaseVector _origin, CbaseVector _xAxis, CbaseVector _yAxis, 
            CbaseVector _zAxis) -> Cbase
        """
        this = _pymaxwell.new_Cbase(*args)
        try: self.this.append(this)
        except: self.this = this
    def initCanonical(self):
        """initCanonical(self)"""
        return _pymaxwell.Cbase_initCanonical(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cbase___str__(self)

    __swig_destroy__ = _pymaxwell.delete_Cbase
    __del__ = lambda self : None;
Cbase_swigregister = _pymaxwell.Cbase_swigregister
Cbase_swigregister(Cbase)

class CfBase(_object):
    """Proxy of C++ CbaseT<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CfBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CfBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _pymaxwell.CfBase_origin_set
    __swig_getmethods__["origin"] = _pymaxwell.CfBase_origin_get
    if _newclass:origin = _swig_property(_pymaxwell.CfBase_origin_get, _pymaxwell.CfBase_origin_set)
    __swig_setmethods__["xAxis"] = _pymaxwell.CfBase_xAxis_set
    __swig_getmethods__["xAxis"] = _pymaxwell.CfBase_xAxis_get
    if _newclass:xAxis = _swig_property(_pymaxwell.CfBase_xAxis_get, _pymaxwell.CfBase_xAxis_set)
    __swig_setmethods__["yAxis"] = _pymaxwell.CfBase_yAxis_set
    __swig_getmethods__["yAxis"] = _pymaxwell.CfBase_yAxis_get
    if _newclass:yAxis = _swig_property(_pymaxwell.CfBase_yAxis_get, _pymaxwell.CfBase_yAxis_set)
    __swig_setmethods__["zAxis"] = _pymaxwell.CfBase_zAxis_set
    __swig_getmethods__["zAxis"] = _pymaxwell.CfBase_zAxis_get
    if _newclass:zAxis = _swig_property(_pymaxwell.CfBase_zAxis_get, _pymaxwell.CfBase_zAxis_set)
    def __init__(self, *args): 
        """
        __init__(self) -> CfBase
        __init__(self, CbaseVector _origin, CbaseVector _xAxis, CbaseVector _yAxis, 
            CbaseVector _zAxis) -> CfBase
        """
        this = _pymaxwell.new_CfBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def initCanonical(self):
        """initCanonical(self)"""
        return _pymaxwell.CfBase_initCanonical(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CfBase___str__(self)

    __swig_destroy__ = _pymaxwell.delete_CfBase
    __del__ = lambda self : None;
CfBase_swigregister = _pymaxwell.CfBase_swigregister
CfBase_swigregister(CfBase)

class Crgb8Tbyte(_object):
    """Proxy of C++ Crgb8T<(byte)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgb8Tbyte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crgb8Tbyte, name)
    __repr__ = _swig_repr
    def r(self):
        """r(self) -> unsigned char"""
        return _pymaxwell.Crgb8Tbyte_r(self)

    def g(self):
        """g(self) -> unsigned char"""
        return _pymaxwell.Crgb8Tbyte_g(self)

    def b(self):
        """b(self) -> unsigned char"""
        return _pymaxwell.Crgb8Tbyte_b(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned char"""
        return _pymaxwell.Crgb8Tbyte___getitem__(self, *args)

    def assign(self, *args):
        """assign(self, unsigned char cr, unsigned char cg, unsigned char cb)"""
        return _pymaxwell.Crgb8Tbyte_assign(self, *args)

    def __init__(self): 
        """__init__(self) -> Crgb8Tbyte"""
        this = _pymaxwell.new_Crgb8Tbyte()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgb8Tbyte
    __del__ = lambda self : None;
Crgb8Tbyte_swigregister = _pymaxwell.Crgb8Tbyte_swigregister
Crgb8Tbyte_swigregister(Crgb8Tbyte)

class Crgb8(Crgb8Tbyte):
    """Proxy of C++ Crgb8 class"""
    __swig_setmethods__ = {}
    for _s in [Crgb8Tbyte]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgb8, name, value)
    __swig_getmethods__ = {}
    for _s in [Crgb8Tbyte]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crgb8, name)
    __repr__ = _swig_repr
    def toRGB(self):
        """toRGB(self) -> Crgb"""
        return _pymaxwell.Crgb8_toRGB(self)

    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.Crgb8_setZero(self)

    def getSummatory(self):
        """getSummatory(self) -> dword"""
        return _pymaxwell.Crgb8_getSummatory(self)

    def isZero(self):
        """isZero(self) -> bool"""
        return _pymaxwell.Crgb8_isZero(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Crgb8___str__(self)

    def __init__(self): 
        """__init__(self) -> Crgb8"""
        this = _pymaxwell.new_Crgb8()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgb8
    __del__ = lambda self : None;
Crgb8_swigregister = _pymaxwell.Crgb8_swigregister
Crgb8_swigregister(Crgb8)

class Crgb8Tword(_object):
    """Proxy of C++ Crgb8T<(word)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgb8Tword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crgb8Tword, name)
    __repr__ = _swig_repr
    def r(self):
        """r(self) -> unsigned short"""
        return _pymaxwell.Crgb8Tword_r(self)

    def g(self):
        """g(self) -> unsigned short"""
        return _pymaxwell.Crgb8Tword_g(self)

    def b(self):
        """b(self) -> unsigned short"""
        return _pymaxwell.Crgb8Tword_b(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned short"""
        return _pymaxwell.Crgb8Tword___getitem__(self, *args)

    def assign(self, *args):
        """assign(self, unsigned short cr, unsigned short cg, unsigned short cb)"""
        return _pymaxwell.Crgb8Tword_assign(self, *args)

    def __init__(self): 
        """__init__(self) -> Crgb8Tword"""
        this = _pymaxwell.new_Crgb8Tword()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgb8Tword
    __del__ = lambda self : None;
Crgb8Tword_swigregister = _pymaxwell.Crgb8Tword_swigregister
Crgb8Tword_swigregister(Crgb8Tword)

class Crgb16(Crgb8Tword):
    """Proxy of C++ Crgb16 class"""
    __swig_setmethods__ = {}
    for _s in [Crgb8Tword]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgb16, name, value)
    __swig_getmethods__ = {}
    for _s in [Crgb8Tword]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crgb16, name)
    __repr__ = _swig_repr
    def toRGB(self):
        """toRGB(self) -> Crgb"""
        return _pymaxwell.Crgb16_toRGB(self)

    def toRGB8(self):
        """toRGB8(self) -> Crgb8"""
        return _pymaxwell.Crgb16_toRGB8(self)

    def getSummatory(self):
        """getSummatory(self) -> dword"""
        return _pymaxwell.Crgb16_getSummatory(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Crgb16___str__(self)

    def __init__(self): 
        """__init__(self) -> Crgb16"""
        this = _pymaxwell.new_Crgb16()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgb16
    __del__ = lambda self : None;
Crgb16_swigregister = _pymaxwell.Crgb16_swigregister
Crgb16_swigregister(Crgb16)

class Crgba8Tbyte(_object):
    """Proxy of C++ Crgba8T<(byte)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgba8Tbyte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crgba8Tbyte, name)
    __repr__ = _swig_repr
    def r(self):
        """r(self) -> unsigned char"""
        return _pymaxwell.Crgba8Tbyte_r(self)

    def g(self):
        """g(self) -> unsigned char"""
        return _pymaxwell.Crgba8Tbyte_g(self)

    def b(self):
        """b(self) -> unsigned char"""
        return _pymaxwell.Crgba8Tbyte_b(self)

    def a(self):
        """a(self) -> unsigned char"""
        return _pymaxwell.Crgba8Tbyte_a(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned char"""
        return _pymaxwell.Crgba8Tbyte___getitem__(self, *args)

    def assign(self, *args):
        """
        assign(self, unsigned char cr, unsigned char cg, unsigned char cb, 
            unsigned char ca)
        """
        return _pymaxwell.Crgba8Tbyte_assign(self, *args)

    def __init__(self): 
        """__init__(self) -> Crgba8Tbyte"""
        this = _pymaxwell.new_Crgba8Tbyte()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgba8Tbyte
    __del__ = lambda self : None;
Crgba8Tbyte_swigregister = _pymaxwell.Crgba8Tbyte_swigregister
Crgba8Tbyte_swigregister(Crgba8Tbyte)

class Crgba8(Crgba8Tbyte):
    """Proxy of C++ Crgba8 class"""
    __swig_setmethods__ = {}
    for _s in [Crgba8Tbyte]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgba8, name, value)
    __swig_getmethods__ = {}
    for _s in [Crgba8Tbyte]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crgba8, name)
    __repr__ = _swig_repr
    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Crgba8___str__(self)

    def __init__(self): 
        """__init__(self) -> Crgba8"""
        this = _pymaxwell.new_Crgba8()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgba8
    __del__ = lambda self : None;
Crgba8_swigregister = _pymaxwell.Crgba8_swigregister
Crgba8_swigregister(Crgba8)

class Crgba8Tword(_object):
    """Proxy of C++ Crgba8T<(word)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgba8Tword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crgba8Tword, name)
    __repr__ = _swig_repr
    def r(self):
        """r(self) -> unsigned short"""
        return _pymaxwell.Crgba8Tword_r(self)

    def g(self):
        """g(self) -> unsigned short"""
        return _pymaxwell.Crgba8Tword_g(self)

    def b(self):
        """b(self) -> unsigned short"""
        return _pymaxwell.Crgba8Tword_b(self)

    def a(self):
        """a(self) -> unsigned short"""
        return _pymaxwell.Crgba8Tword_a(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int i) -> unsigned short"""
        return _pymaxwell.Crgba8Tword___getitem__(self, *args)

    def assign(self, *args):
        """
        assign(self, unsigned short cr, unsigned short cg, unsigned short cb, 
            unsigned short ca)
        """
        return _pymaxwell.Crgba8Tword_assign(self, *args)

    def __init__(self): 
        """__init__(self) -> Crgba8Tword"""
        this = _pymaxwell.new_Crgba8Tword()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgba8Tword
    __del__ = lambda self : None;
Crgba8Tword_swigregister = _pymaxwell.Crgba8Tword_swigregister
Crgba8Tword_swigregister(Crgba8Tword)

class Crgba16(Crgba8Tword):
    """Proxy of C++ Crgba16 class"""
    __swig_setmethods__ = {}
    for _s in [Crgba8Tword]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgba16, name, value)
    __swig_getmethods__ = {}
    for _s in [Crgba8Tword]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crgba16, name)
    __repr__ = _swig_repr
    def setZero(self):
        """setZero(self)"""
        return _pymaxwell.Crgba16_setZero(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Crgba16___str__(self)

    def __init__(self): 
        """__init__(self) -> Crgba16"""
        this = _pymaxwell.new_Crgba16()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgba16
    __del__ = lambda self : None;
Crgba16_swigregister = _pymaxwell.Crgba16_swigregister
Crgba16_swigregister(Crgba16)

class Crgb(CfVector):
    """Proxy of C++ Crgb class"""
    __swig_setmethods__ = {}
    for _s in [CfVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crgb, name, value)
    __swig_getmethods__ = {}
    for _s in [CfVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crgb, name)
    __repr__ = _swig_repr
    def get(self):
        """get(self) -> dword"""
        return _pymaxwell.Crgb_get(self)

    def gammaCorrectionRec709(self, *args):
        """gammaCorrectionRec709(self, real gamma)"""
        return _pymaxwell.Crgb_gammaCorrectionRec709(self, *args)

    def invGammaCorrectionRec709(self, *args):
        """invGammaCorrectionRec709(self, real gamma)"""
        return _pymaxwell.Crgb_invGammaCorrectionRec709(self, *args)

    def toRGB8(self):
        """toRGB8(self) -> Crgb8"""
        return _pymaxwell.Crgb_toRGB8(self)

    def toRGB16(self):
        """toRGB16(self) -> Crgb16"""
        return _pymaxwell.Crgb_toRGB16(self)

    def toXYZ(self):
        """toXYZ(self) -> Cxyz"""
        return _pymaxwell.Crgb_toXYZ(self)

    def toHSV(self):
        """toHSV(self) -> Chsv"""
        return _pymaxwell.Crgb_toHSV(self)

    def clip(self):
        """clip(self)"""
        return _pymaxwell.Crgb_clip(self)

    def constrain(self):
        """constrain(self) -> bool"""
        return _pymaxwell.Crgb_constrain(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Crgb___str__(self)

    def __init__(self): 
        """__init__(self) -> Crgb"""
        this = _pymaxwell.new_Crgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Crgb
    __del__ = lambda self : None;
Crgb_swigregister = _pymaxwell.Crgb_swigregister
Crgb_swigregister(Crgb)

class Chsv(_object):
    """Proxy of C++ Chsv class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chsv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chsv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _pymaxwell.Chsv_h_set
    __swig_getmethods__["h"] = _pymaxwell.Chsv_h_get
    if _newclass:h = _swig_property(_pymaxwell.Chsv_h_get, _pymaxwell.Chsv_h_set)
    __swig_setmethods__["s"] = _pymaxwell.Chsv_s_set
    __swig_getmethods__["s"] = _pymaxwell.Chsv_s_get
    if _newclass:s = _swig_property(_pymaxwell.Chsv_s_get, _pymaxwell.Chsv_s_set)
    __swig_setmethods__["v"] = _pymaxwell.Chsv_v_set
    __swig_getmethods__["v"] = _pymaxwell.Chsv_v_get
    if _newclass:v = _swig_property(_pymaxwell.Chsv_v_get, _pymaxwell.Chsv_v_set)
    def toRgb(self):
        """toRgb(self) -> Crgb"""
        return _pymaxwell.Chsv_toRgb(self)

    def assign(self, *args):
        """assign(self, float _h, float _s, float _v)"""
        return _pymaxwell.Chsv_assign(self, *args)

    def __init__(self): 
        """__init__(self) -> Chsv"""
        this = _pymaxwell.new_Chsv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Chsv
    __del__ = lambda self : None;
Chsv_swigregister = _pymaxwell.Chsv_swigregister
Chsv_swigregister(Chsv)

class Cxyz(Cvector):
    """Proxy of C++ Cxyz class"""
    __swig_setmethods__ = {}
    for _s in [Cvector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cxyz, name, value)
    __swig_getmethods__ = {}
    for _s in [Cvector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cxyz, name)
    __repr__ = _swig_repr
    def toRGB(self):
        """toRGB(self) -> Crgb"""
        return _pymaxwell.Cxyz_toRGB(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cxyz___str__(self)

    def __init__(self): 
        """__init__(self) -> Cxyz"""
        this = _pymaxwell.new_Cxyz()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Cxyz
    __del__ = lambda self : None;
Cxyz_swigregister = _pymaxwell.Cxyz_swigregister
Cxyz_swigregister(Cxyz)

class Cfxyz(CfVector):
    """Proxy of C++ Cfxyz class"""
    __swig_setmethods__ = {}
    for _s in [CfVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cfxyz, name, value)
    __swig_getmethods__ = {}
    for _s in [CfVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cfxyz, name)
    __repr__ = _swig_repr
    def toRGB(self):
        """toRGB(self) -> Crgb"""
        return _pymaxwell.Cfxyz_toRGB(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.Cfxyz___str__(self)

    def __init__(self): 
        """__init__(self) -> Cfxyz"""
        this = _pymaxwell.new_Cfxyz()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Cfxyz
    __del__ = lambda self : None;
Cfxyz_swigregister = _pymaxwell.Cfxyz_swigregister
Cfxyz_swigregister(Cfxyz)

class Cerror(_object):
    """Proxy of C++ Cerror class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cerror, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cerror, name)
    __repr__ = _swig_repr
    MAXWELL_OK = _pymaxwell.Cerror_MAXWELL_OK
    MAXWELL_ENVIRONMENT_NOT_FOUND = _pymaxwell.Cerror_MAXWELL_ENVIRONMENT_NOT_FOUND
    MAXWELL_NOT_INITIALIZED = _pymaxwell.Cerror_MAXWELL_NOT_INITIALIZED
    NO_MEMORY_AVAILABLE = _pymaxwell.Cerror_NO_MEMORY_AVAILABLE
    FILE_NOT_EXISTS = _pymaxwell.Cerror_FILE_NOT_EXISTS
    FILE_CANNOT_BE_CREATED = _pymaxwell.Cerror_FILE_CANNOT_BE_CREATED
    FILE_CANNOT_BE_CLOSED = _pymaxwell.Cerror_FILE_CANNOT_BE_CLOSED
    FILE_REMOVE_FAILED = _pymaxwell.Cerror_FILE_REMOVE_FAILED
    FILE_RENAME_FAILED = _pymaxwell.Cerror_FILE_RENAME_FAILED
    FILE_OPEN_FAILED = _pymaxwell.Cerror_FILE_OPEN_FAILED
    FILE_READ_FAILED = _pymaxwell.Cerror_FILE_READ_FAILED
    FILE_WRITE_FAILED = _pymaxwell.Cerror_FILE_WRITE_FAILED
    FILE_SEEK_FAILED = _pymaxwell.Cerror_FILE_SEEK_FAILED
    FILE_NOT_SPACE_AVAILABLE = _pymaxwell.Cerror_FILE_NOT_SPACE_AVAILABLE
    NAME_NOT_SPECIFIED = _pymaxwell.Cerror_NAME_NOT_SPECIFIED
    INVALID_PARAMETER = _pymaxwell.Cerror_INVALID_PARAMETER
    NOT_ALLOWED_METHOD = _pymaxwell.Cerror_NOT_ALLOWED_METHOD
    OBSOLETE_VERSION = _pymaxwell.Cerror_OBSOLETE_VERSION
    VERSION_HIGHER_THAN_CURRENT = _pymaxwell.Cerror_VERSION_HIGHER_THAN_CURRENT
    OBJECT_WITHOUT_MATERIAL = _pymaxwell.Cerror_OBJECT_WITHOUT_MATERIAL
    BITMAP_WITHOUT_DATA = _pymaxwell.Cerror_BITMAP_WITHOUT_DATA
    INVALID_UVW_CHANNELS = _pymaxwell.Cerror_INVALID_UVW_CHANNELS
    MXI_INVALID_FORMAT = _pymaxwell.Cerror_MXI_INVALID_FORMAT
    MXI_INVALID_DATA = _pymaxwell.Cerror_MXI_INVALID_DATA
    MXI_INVALID_CAMERA = _pymaxwell.Cerror_MXI_INVALID_CAMERA
    MXI_INVALID_GAMMA = _pymaxwell.Cerror_MXI_INVALID_GAMMA
    MXI_INVALID_FICTITIOUS_EXPOSURE = _pymaxwell.Cerror_MXI_INVALID_FICTITIOUS_EXPOSURE
    MXI_INVALID_RESOLUTION = _pymaxwell.Cerror_MXI_INVALID_RESOLUTION
    MXI_INVALID_EXPOSURE = _pymaxwell.Cerror_MXI_INVALID_EXPOSURE
    MXI_NAME_NOT_DEFINED = _pymaxwell.Cerror_MXI_NAME_NOT_DEFINED
    MXI_BUCKETS_DO_NOT_MATCH = _pymaxwell.Cerror_MXI_BUCKETS_DO_NOT_MATCH
    MXI_INVALID_VERSION = _pymaxwell.Cerror_MXI_INVALID_VERSION
    MXI_NO_RERENDERING_CAPABILITIES = _pymaxwell.Cerror_MXI_NO_RERENDERING_CAPABILITIES
    MXI_RERENDERING_CAPABILITIES = _pymaxwell.Cerror_MXI_RERENDERING_CAPABILITIES
    MXI_NOT_MATCH = _pymaxwell.Cerror_MXI_NOT_MATCH
    MXI_CPU_OVERLAPPING = _pymaxwell.Cerror_MXI_CPU_OVERLAPPING
    MXI_IMAGE_DATA_ONLY = _pymaxwell.Cerror_MXI_IMAGE_DATA_ONLY
    OTHER = _pymaxwell.Cerror_OTHER
    def __init__(self, *args): 
        """
        __init__(self) -> Cerror
        __init__(self, dword errorID) -> Cerror
        """
        this = _pymaxwell.new_Cerror(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self):
        """clear(self)"""
        return _pymaxwell.Cerror_clear(self)

    def getID(self):
        """getID(self) -> dword"""
        return _pymaxwell.Cerror_getID(self)

    def setID(self, *args):
        """setID(self, dword errorID)"""
        return _pymaxwell.Cerror_setID(self, *args)

    def failed(self):
        """failed(self) -> bool"""
        return _pymaxwell.Cerror_failed(self)

    __swig_destroy__ = _pymaxwell.delete_Cerror
    __del__ = lambda self : None;
Cerror_swigregister = _pymaxwell.Cerror_swigregister
Cerror_swigregister(Cerror)

class CtextureMap(_object):
    """Proxy of C++ CtextureMap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CtextureMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CtextureMap, name)
    __repr__ = _swig_repr
    NO_INTERPOLATION = _pymaxwell.CtextureMap_NO_INTERPOLATION
    INTERPOLATION_CUADRATIC = _pymaxwell.CtextureMap_INTERPOLATION_CUADRATIC
    __swig_setmethods__["scale"] = _pymaxwell.CtextureMap_scale_set
    __swig_getmethods__["scale"] = _pymaxwell.CtextureMap_scale_get
    if _newclass:scale = _swig_property(_pymaxwell.CtextureMap_scale_get, _pymaxwell.CtextureMap_scale_set)
    __swig_setmethods__["offset"] = _pymaxwell.CtextureMap_offset_set
    __swig_getmethods__["offset"] = _pymaxwell.CtextureMap_offset_get
    if _newclass:offset = _swig_property(_pymaxwell.CtextureMap_offset_get, _pymaxwell.CtextureMap_offset_set)
    __swig_setmethods__["rotation"] = _pymaxwell.CtextureMap_rotation_set
    __swig_getmethods__["rotation"] = _pymaxwell.CtextureMap_rotation_get
    if _newclass:rotation = _swig_property(_pymaxwell.CtextureMap_rotation_get, _pymaxwell.CtextureMap_rotation_set)
    __swig_setmethods__["uvwChannelID"] = _pymaxwell.CtextureMap_uvwChannelID_set
    __swig_getmethods__["uvwChannelID"] = _pymaxwell.CtextureMap_uvwChannelID_get
    if _newclass:uvwChannelID = _swig_property(_pymaxwell.CtextureMap_uvwChannelID_get, _pymaxwell.CtextureMap_uvwChannelID_set)
    __swig_setmethods__["uIsTiled"] = _pymaxwell.CtextureMap_uIsTiled_set
    __swig_getmethods__["uIsTiled"] = _pymaxwell.CtextureMap_uIsTiled_get
    if _newclass:uIsTiled = _swig_property(_pymaxwell.CtextureMap_uIsTiled_get, _pymaxwell.CtextureMap_uIsTiled_set)
    __swig_setmethods__["vIsTiled"] = _pymaxwell.CtextureMap_vIsTiled_set
    __swig_getmethods__["vIsTiled"] = _pymaxwell.CtextureMap_vIsTiled_get
    if _newclass:vIsTiled = _swig_property(_pymaxwell.CtextureMap_vIsTiled_get, _pymaxwell.CtextureMap_vIsTiled_set)
    __swig_setmethods__["uIsMirrored"] = _pymaxwell.CtextureMap_uIsMirrored_set
    __swig_getmethods__["uIsMirrored"] = _pymaxwell.CtextureMap_uIsMirrored_get
    if _newclass:uIsMirrored = _swig_property(_pymaxwell.CtextureMap_uIsMirrored_get, _pymaxwell.CtextureMap_uIsMirrored_set)
    __swig_setmethods__["vIsMirrored"] = _pymaxwell.CtextureMap_vIsMirrored_set
    __swig_getmethods__["vIsMirrored"] = _pymaxwell.CtextureMap_vIsMirrored_get
    if _newclass:vIsMirrored = _swig_property(_pymaxwell.CtextureMap_vIsMirrored_get, _pymaxwell.CtextureMap_vIsMirrored_set)
    __swig_setmethods__["invert"] = _pymaxwell.CtextureMap_invert_set
    __swig_getmethods__["invert"] = _pymaxwell.CtextureMap_invert_get
    if _newclass:invert = _swig_property(_pymaxwell.CtextureMap_invert_get, _pymaxwell.CtextureMap_invert_set)
    __swig_setmethods__["doGammaCorrection"] = _pymaxwell.CtextureMap_doGammaCorrection_set
    __swig_getmethods__["doGammaCorrection"] = _pymaxwell.CtextureMap_doGammaCorrection_get
    if _newclass:doGammaCorrection = _swig_property(_pymaxwell.CtextureMap_doGammaCorrection_get, _pymaxwell.CtextureMap_doGammaCorrection_set)
    __swig_setmethods__["useAbsoluteUnits"] = _pymaxwell.CtextureMap_useAbsoluteUnits_set
    __swig_getmethods__["useAbsoluteUnits"] = _pymaxwell.CtextureMap_useAbsoluteUnits_get
    if _newclass:useAbsoluteUnits = _swig_property(_pymaxwell.CtextureMap_useAbsoluteUnits_get, _pymaxwell.CtextureMap_useAbsoluteUnits_set)
    __swig_setmethods__["normalMappingFlipRed"] = _pymaxwell.CtextureMap_normalMappingFlipRed_set
    __swig_getmethods__["normalMappingFlipRed"] = _pymaxwell.CtextureMap_normalMappingFlipRed_get
    if _newclass:normalMappingFlipRed = _swig_property(_pymaxwell.CtextureMap_normalMappingFlipRed_get, _pymaxwell.CtextureMap_normalMappingFlipRed_set)
    __swig_setmethods__["normalMappingFlipGreen"] = _pymaxwell.CtextureMap_normalMappingFlipGreen_set
    __swig_getmethods__["normalMappingFlipGreen"] = _pymaxwell.CtextureMap_normalMappingFlipGreen_get
    if _newclass:normalMappingFlipGreen = _swig_property(_pymaxwell.CtextureMap_normalMappingFlipGreen_get, _pymaxwell.CtextureMap_normalMappingFlipGreen_set)
    __swig_setmethods__["normalMappingFullRangeBlue"] = _pymaxwell.CtextureMap_normalMappingFullRangeBlue_set
    __swig_getmethods__["normalMappingFullRangeBlue"] = _pymaxwell.CtextureMap_normalMappingFullRangeBlue_get
    if _newclass:normalMappingFullRangeBlue = _swig_property(_pymaxwell.CtextureMap_normalMappingFullRangeBlue_get, _pymaxwell.CtextureMap_normalMappingFullRangeBlue_set)
    __swig_setmethods__["useAlpha"] = _pymaxwell.CtextureMap_useAlpha_set
    __swig_getmethods__["useAlpha"] = _pymaxwell.CtextureMap_useAlpha_get
    if _newclass:useAlpha = _swig_property(_pymaxwell.CtextureMap_useAlpha_get, _pymaxwell.CtextureMap_useAlpha_set)
    __swig_setmethods__["useGlobalMap"] = _pymaxwell.CtextureMap_useGlobalMap_set
    __swig_getmethods__["useGlobalMap"] = _pymaxwell.CtextureMap_useGlobalMap_get
    if _newclass:useGlobalMap = _swig_property(_pymaxwell.CtextureMap_useGlobalMap_get, _pymaxwell.CtextureMap_useGlobalMap_set)
    __swig_setmethods__["typeInterpolation"] = _pymaxwell.CtextureMap_typeInterpolation_set
    __swig_getmethods__["typeInterpolation"] = _pymaxwell.CtextureMap_typeInterpolation_get
    if _newclass:typeInterpolation = _swig_property(_pymaxwell.CtextureMap_typeInterpolation_get, _pymaxwell.CtextureMap_typeInterpolation_set)
    __swig_setmethods__["saturation"] = _pymaxwell.CtextureMap_saturation_set
    __swig_getmethods__["saturation"] = _pymaxwell.CtextureMap_saturation_get
    if _newclass:saturation = _swig_property(_pymaxwell.CtextureMap_saturation_get, _pymaxwell.CtextureMap_saturation_set)
    __swig_setmethods__["contrast"] = _pymaxwell.CtextureMap_contrast_set
    __swig_getmethods__["contrast"] = _pymaxwell.CtextureMap_contrast_get
    if _newclass:contrast = _swig_property(_pymaxwell.CtextureMap_contrast_get, _pymaxwell.CtextureMap_contrast_set)
    __swig_setmethods__["brightness"] = _pymaxwell.CtextureMap_brightness_set
    __swig_getmethods__["brightness"] = _pymaxwell.CtextureMap_brightness_get
    if _newclass:brightness = _swig_property(_pymaxwell.CtextureMap_brightness_get, _pymaxwell.CtextureMap_brightness_set)
    __swig_setmethods__["hue"] = _pymaxwell.CtextureMap_hue_set
    __swig_getmethods__["hue"] = _pymaxwell.CtextureMap_hue_get
    if _newclass:hue = _swig_property(_pymaxwell.CtextureMap_hue_get, _pymaxwell.CtextureMap_hue_set)
    __swig_setmethods__["clampMin"] = _pymaxwell.CtextureMap_clampMin_set
    __swig_getmethods__["clampMin"] = _pymaxwell.CtextureMap_clampMin_get
    if _newclass:clampMin = _swig_property(_pymaxwell.CtextureMap_clampMin_get, _pymaxwell.CtextureMap_clampMin_set)
    __swig_setmethods__["clampMax"] = _pymaxwell.CtextureMap_clampMax_set
    __swig_getmethods__["clampMax"] = _pymaxwell.CtextureMap_clampMax_get
    if _newclass:clampMax = _swig_property(_pymaxwell.CtextureMap_clampMax_get, _pymaxwell.CtextureMap_clampMax_set)
    __swig_setmethods__["cosA"] = _pymaxwell.CtextureMap_cosA_set
    __swig_getmethods__["cosA"] = _pymaxwell.CtextureMap_cosA_get
    if _newclass:cosA = _swig_property(_pymaxwell.CtextureMap_cosA_get, _pymaxwell.CtextureMap_cosA_set)
    __swig_setmethods__["sinA"] = _pymaxwell.CtextureMap_sinA_set
    __swig_getmethods__["sinA"] = _pymaxwell.CtextureMap_sinA_get
    if _newclass:sinA = _swig_property(_pymaxwell.CtextureMap_sinA_get, _pymaxwell.CtextureMap_sinA_set)
    __swig_setmethods__["theTextureExtensions"] = _pymaxwell.CtextureMap_theTextureExtensions_set
    __swig_getmethods__["theTextureExtensions"] = _pymaxwell.CtextureMap_theTextureExtensions_get
    if _newclass:theTextureExtensions = _swig_property(_pymaxwell.CtextureMap_theTextureExtensions_get, _pymaxwell.CtextureMap_theTextureExtensions_set)
    def __init__(self): 
        """__init__(self) -> CtextureMap"""
        this = _pymaxwell.new_CtextureMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CtextureMap
    __del__ = lambda self : None;
    def setPath(self, *args):
        """setPath(self, char path)"""
        return _pymaxwell.CtextureMap_setPath(self, *args)

    def getPath(self):
        """getPath(self) -> char"""
        return _pymaxwell.CtextureMap_getPath(self)

    def isEmpty(self):
        """isEmpty(self) -> bool"""
        return _pymaxwell.CtextureMap_isEmpty(self)

    def hasProceduralTextures(self):
        """hasProceduralTextures(self) -> bool"""
        return _pymaxwell.CtextureMap_hasProceduralTextures(self)

    def hasActiveProceduralTexturesInRenderTime(self):
        """hasActiveProceduralTexturesInRenderTime(self) -> bool"""
        return _pymaxwell.CtextureMap_hasActiveProceduralTexturesInRenderTime(self)

    def addProceduralTexture(self, *args):
        """addProceduralTexture(self, MXparamList parameters)"""
        return _pymaxwell.CtextureMap_addProceduralTexture(self, *args)

    def removeProceduralTexture(self, *args):
        """removeProceduralTexture(self, MXparamList parameters)"""
        return _pymaxwell.CtextureMap_removeProceduralTexture(self, *args)

    def clearProceduralTextures(self):
        """clearProceduralTextures(self)"""
        return _pymaxwell.CtextureMap_clearProceduralTextures(self)

    def getProceduralTexturesCount(self):
        """getProceduralTexturesCount(self) -> dword"""
        return _pymaxwell.CtextureMap_getProceduralTexturesCount(self)

    def getProceduralTexture(self, *args):
        """getProceduralTexture(self, dword index) -> MXparamList"""
        return _pymaxwell.CtextureMap_getProceduralTexture(self, *args)

    def getProceduralTextureIndex(self, *args):
        """getProceduralTextureIndex(self, MXparamList parameters) -> dword"""
        return _pymaxwell.CtextureMap_getProceduralTextureIndex(self, *args)

    def write(self, *args):
        """write(self, Cfile file)"""
        return _pymaxwell.CtextureMap_write(self, *args)

    def read(self, *args):
        """read(self, Cfile file, float mxmFileVersion)"""
        return _pymaxwell.CtextureMap_read(self, *args)

    def precomputeValues(self, *args):
        """precomputeValues(self, Cmaxwell pMaxwell, Cmaterial parentMaterial)"""
        return _pymaxwell.CtextureMap_precomputeValues(self, *args)

    def __str__(self):
        """__str__(self) -> char"""
        return _pymaxwell.CtextureMap___str__(self)

CtextureMap_swigregister = _pymaxwell.CtextureMap_swigregister
CtextureMap_swigregister(CtextureMap)

class MXparamList(_object):
    """Proxy of C++ MXparamList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MXparamList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MXparamList, name)
    __repr__ = _swig_repr
    UCHAR = _pymaxwell.MXparamList_UCHAR
    UINT = _pymaxwell.MXparamList_UINT
    INT = _pymaxwell.MXparamList_INT
    FLOAT = _pymaxwell.MXparamList_FLOAT
    DOUBLE = _pymaxwell.MXparamList_DOUBLE
    STRING = _pymaxwell.MXparamList_STRING
    FLOATARRAY = _pymaxwell.MXparamList_FLOATARRAY
    DOUBLEARRAY = _pymaxwell.MXparamList_DOUBLEARRAY
    BYTEARRAY = _pymaxwell.MXparamList_BYTEARRAY
    INTARRAY = _pymaxwell.MXparamList_INTARRAY
    MXPARAMLIST = _pymaxwell.MXparamList_MXPARAMLIST
    MXPARAMLISTARRAY = _pymaxwell.MXparamList_MXPARAMLISTARRAY
    RGB = _pymaxwell.MXparamList_RGB
    def __init__(self, *args): 
        """
        __init__(self) -> MXparamList
        __init__(self, char extensionName) -> MXparamList
        """
        this = _pymaxwell.new_MXparamList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_MXparamList
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _pymaxwell.MXparamList_clear(self)

    def free(self):
        """free(self)"""
        return _pymaxwell.MXparamList_free(self)

    def copyFrom(self, *args):
        """copyFrom(self, MXparamList pL) -> bool"""
        return _pymaxwell.MXparamList_copyFrom(self, *args)

    def updateFrom(self, *args):
        """updateFrom(self, MXparamList pL) -> bool"""
        return _pymaxwell.MXparamList_updateFrom(self, *args)

    def equals(self, *args):
        """equals(self, MXparamList p) -> bool"""
        return _pymaxwell.MXparamList_equals(self, *args)

    def createByte(self, *args):
        """
        createByte(self, char name, unsigned char initialValue, unsigned char minValue, 
            unsigned char maxValue) -> bool
        """
        return _pymaxwell.MXparamList_createByte(self, *args)

    def createUInt(self, *args):
        """
        createUInt(self, char name, unsigned int initialValue, unsigned int minValue, 
            unsigned int maxValue) -> bool
        """
        return _pymaxwell.MXparamList_createUInt(self, *args)

    def createInt(self, *args):
        """createInt(self, char name, int initialValue, int minValue, int maxValue) -> bool"""
        return _pymaxwell.MXparamList_createInt(self, *args)

    def createFloat(self, *args):
        """createFloat(self, char name, float initialValue, float minValue, float maxValue) -> bool"""
        return _pymaxwell.MXparamList_createFloat(self, *args)

    def createDouble(self, *args):
        """createDouble(self, char name, double initialValue, double minValue, double maxValue) -> bool"""
        return _pymaxwell.MXparamList_createDouble(self, *args)

    def createIntArray(self, *args):
        """createIntArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_createIntArray(self, *args)

    def createFloatArray(self, *args):
        """createFloatArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_createFloatArray(self, *args)

    def createDoubleArray(self, *args):
        """createDoubleArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_createDoubleArray(self, *args)

    def createByteArray(self, *args):
        """createByteArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_createByteArray(self, *args)

    def createString(self, *args):
        """createString(self, char name, char str) -> bool"""
        return _pymaxwell.MXparamList_createString(self, *args)

    def createMXparamList(self, *args):
        """createMXparamList(self, char name, MXparamList mx) -> bool"""
        return _pymaxwell.MXparamList_createMXparamList(self, *args)

    def createMXparamListArray(self, *args):
        """createMXparamListArray(self, char name, PyObject mxList) -> bool"""
        return _pymaxwell.MXparamList_createMXparamListArray(self, *args)

    def createRgb(self, *args):
        """createRgb(self, char name, Crgb rgb) -> bool"""
        return _pymaxwell.MXparamList_createRgb(self, *args)

    def createTextureMap(self, *args):
        """createTextureMap(self, char name, CtextureMap map) -> bool"""
        return _pymaxwell.MXparamList_createTextureMap(self, *args)

    def setByte(self, *args):
        """setByte(self, char name, unsigned char value) -> bool"""
        return _pymaxwell.MXparamList_setByte(self, *args)

    def setUInt(self, *args):
        """setUInt(self, char name, unsigned int value) -> bool"""
        return _pymaxwell.MXparamList_setUInt(self, *args)

    def setInt(self, *args):
        """setInt(self, char name, int value) -> bool"""
        return _pymaxwell.MXparamList_setInt(self, *args)

    def setFloat(self, *args):
        """setFloat(self, char name, float value) -> bool"""
        return _pymaxwell.MXparamList_setFloat(self, *args)

    def setDouble(self, *args):
        """setDouble(self, char name, double value) -> bool"""
        return _pymaxwell.MXparamList_setDouble(self, *args)

    def setIntArray(self, *args):
        """setIntArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_setIntArray(self, *args)

    def setFloatArray(self, *args):
        """setFloatArray(self, char name, PyObject data, Cbase base) -> bool"""
        return _pymaxwell.MXparamList_setFloatArray(self, *args)

    def setDoubleArray(self, *args):
        """setDoubleArray(self, char name, PyObject data, Cbase base) -> bool"""
        return _pymaxwell.MXparamList_setDoubleArray(self, *args)

    def setByteArray(self, *args):
        """setByteArray(self, char name, PyObject data) -> bool"""
        return _pymaxwell.MXparamList_setByteArray(self, *args)

    def setString(self, *args):
        """setString(self, char name, char str) -> bool"""
        return _pymaxwell.MXparamList_setString(self, *args)

    def setMXparamList(self, *args):
        """setMXparamList(self, char name, MXparamList mx) -> bool"""
        return _pymaxwell.MXparamList_setMXparamList(self, *args)

    def setMXparamListArray(self, *args):
        """setMXparamListArray(self, char name, PyObject mxList) -> bool"""
        return _pymaxwell.MXparamList_setMXparamListArray(self, *args)

    def setRgb(self, *args):
        """setRgb(self, char name, Crgb rgb) -> bool"""
        return _pymaxwell.MXparamList_setRgb(self, *args)

    def setTextureMap(self, *args):
        """setTextureMap(self, char name, CtextureMap map) -> bool"""
        return _pymaxwell.MXparamList_setTextureMap(self, *args)

    def getByte(self, *args):
        """getByte(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getByte(self, *args)

    def getUInt(self, *args):
        """getUInt(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getUInt(self, *args)

    def getInt(self, *args):
        """getInt(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getInt(self, *args)

    def getFloat(self, *args):
        """getFloat(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getFloat(self, *args)

    def getDouble(self, *args):
        """getDouble(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getDouble(self, *args)

    def getIntArray(self, *args):
        """getIntArray(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getIntArray(self, *args)

    def getFloatArray(self, *args):
        """getFloatArray(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getFloatArray(self, *args)

    def getDoubleArray(self, *args):
        """getDoubleArray(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getDoubleArray(self, *args)

    def getByteArray(self, *args):
        """getByteArray(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getByteArray(self, *args)

    def getString(self, *args):
        """getString(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getString(self, *args)

    def getMXparamList(self, *args):
        """getMXparamList(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getMXparamList(self, *args)

    def getMXparamListArray(self, *args):
        """getMXparamListArray(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getMXparamListArray(self, *args)

    def getRgb(self, *args):
        """getRgb(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getRgb(self, *args)

    def getTextureMap(self, *args):
        """getTextureMap(self, char name) -> PyObject"""
        return _pymaxwell.MXparamList_getTextureMap(self, *args)

    def removeItem(self, *args):
        """removeItem(self, char name) -> bool"""
        return _pymaxwell.MXparamList_removeItem(self, *args)

    def getNumItems(self):
        """getNumItems(self) -> unsigned int"""
        return _pymaxwell.MXparamList_getNumItems(self)

    def getByIndex(self, *args):
        """
        Method:      getByIndex( index ) -> ( name, data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by index. Returns a tuple with all the parameter data.
                     name = Name of the parameter.
                     data = Parameter data. It could be one of the following:
                     int, float, str, MXparamList or a list of any of them, Crgb.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell.MXparamList_getByIndex(self, *args)

    def getByName(self, *args):
        """
        Method:      getByName( name ) -> ( data, dataMin, dataMax, dataType, dataTypeSize, dataCount, success )
        Description: Get a parameter by name. Returns a tuple with all the parameter data.
                     data = Parameter data. It could be one of the following:
                            int, float, str, MXparamList or a list of any of them.
                     dataMin = minimum value allowed for the parameter requested.
                     dataMax = maximum value allowed for the paramater requested.
                     dataType = type of the data, not useful for Python. These are the possible values:
                       UCHAR, UINT, INT, FLOAT, DOUBLE, STRING, FLOATARRAY, DOUBLEARRAY, BYTEARRAY,
                       INTARRAY, MXPARAMLIST and MXPARAMLISTARRAY
                     dataTypeSize = size in bytes of dataType. Not useful for Python:
                       UCHAR = 1, UINT = 4, INT = 4, FLOAT = 4, DOUBLE = 8, STRING = 1,
                       FLOATARRAY = 4, DOUBLEARRAY = 8, BYTEARRAY = 1, INTARRAY = 4, MXPARAMLIST = 0,
                       MXPARAMLISTARRAY = 0, RGB = 12.
                     dataCount = number of elements in 'data':
                       UCHAR = 1, UINT = 1, INT = 1, FLOAT = 1, DOUBLE = 1, STRING = len(data),
                       FLOATARRAY = arbitrary, DOUBLEARRAY = arbitrary, BYTEARRAY = arbitrary,
                       INTARRAY = arbitrary, MXPARAMLIST = 1, MXPARAMLISTARRAY = arbitrary, RGB = 1.
        """
        return _pymaxwell.MXparamList_getByName(self, *args)

    def write(self, *args):
        """write(self, Cfile f) -> bool"""
        return _pymaxwell.MXparamList_write(self, *args)

    def read(self, *args):
        """read(self, Cfile f) -> bool"""
        return _pymaxwell.MXparamList_read(self, *args)

MXparamList_swigregister = _pymaxwell.MXparamList_swigregister
MXparamList_swigregister(MXparamList)

class CbaseExtension(_object):
    """Proxy of C++ CbaseExtension class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CbaseExtension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CbaseExtension, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CbaseExtension
        __init__(self, CbaseExtension orig) -> CbaseExtension
        """
        if self.__class__ == CbaseExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CbaseExtension(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def internalCreation(self):
        """internalCreation(self)"""
        return _pymaxwell.CbaseExtension_internalCreation(self)

    __swig_destroy__ = _pymaxwell.delete_CbaseExtension
    __del__ = lambda self : None;
    def clone(self):
        """clone(self) -> CbaseExtension"""
        return _pymaxwell.CbaseExtension_clone(self)

    def getName(self):
        """getName(self) -> char"""
        return _pymaxwell.CbaseExtension_getName(self)

    def getVersion(self):
        """getVersion(self) -> unsigned int"""
        return _pymaxwell.CbaseExtension_getVersion(self)

    def setExtensionData(self, *args):
        """setExtensionData(self, MXparamList p)"""
        return _pymaxwell.CbaseExtension_setExtensionData(self, *args)

    def getFileDependencies(self, *args):
        """getFileDependencies(self, dword numDependencies, char paths)"""
        return _pymaxwell.CbaseExtension_getFileDependencies(self, *args)

    def handleEvent(self, *args):
        """handleEvent(self, char event, void param)"""
        return _pymaxwell.CbaseExtension_handleEvent(self, *args)

    def cleanup(self, *args):
        """cleanup(self, Cmaxwell pMaxwell)"""
        return _pymaxwell.CbaseExtension_cleanup(self, *args)

    def freePreview(self):
        """freePreview(self)"""
        return _pymaxwell.CbaseExtension_freePreview(self)

    def getExtensionData(self):
        """getExtensionData(self) -> MXparamList"""
        return _pymaxwell.CbaseExtension_getExtensionData(self)

    def setEnabled(self, *args):
        """setEnabled(self, bool enable)"""
        return _pymaxwell.CbaseExtension_setEnabled(self, *args)

    def isEnabled(self):
        """isEnabled(self) -> bool"""
        return _pymaxwell.CbaseExtension_isEnabled(self)

    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CbaseExtension(self)
        return weakref_proxy(self)
CbaseExtension_swigregister = _pymaxwell.CbaseExtension_swigregister
CbaseExtension_swigregister(CbaseExtension)

class CextensionManager(_object):
    """Proxy of C++ CextensionManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CextensionManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CextensionManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def instance():
        """instance() -> CextensionManager"""
        return _pymaxwell.CextensionManager_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def getExtension(self, *args):
        """getExtension(self, char name) -> CextensionContainer"""
        return _pymaxwell.CextensionManager_getExtension(self, *args)

    def loadAllExtensions(self):
        """loadAllExtensions(self)"""
        return _pymaxwell.CextensionManager_loadAllExtensions(self)

    def setExtensionsDirectory(self, *args):
        """setExtensionsDirectory(self, char path)"""
        return _pymaxwell.CextensionManager_setExtensionsDirectory(self, *args)

    def getExtensionsDirectory(self):
        """getExtensionsDirectory(self) -> char"""
        return _pymaxwell.CextensionManager_getExtensionsDirectory(self)

    def InitializeAllExtensions(self):
        """InitializeAllExtensions(self)"""
        return _pymaxwell.CextensionManager_InitializeAllExtensions(self)

    def addGeometryModifierExtension(self, *args):
        """addGeometryModifierExtension(self, CgeometryModifierExtension geometryExtension)"""
        return _pymaxwell.CextensionManager_addGeometryModifierExtension(self, *args)

    def createDefaultGeometryModifierExtension(self, *args):
        """createDefaultGeometryModifierExtension(self, char extensionName) -> CgeometryModifierExtension"""
        return _pymaxwell.CextensionManager_createDefaultGeometryModifierExtension(self, *args)

    def createGeometryModifierExtension(self, *args):
        """createGeometryModifierExtension(self, MXparamList extensionParameters) -> CgeometryModifierExtension"""
        return _pymaxwell.CextensionManager_createGeometryModifierExtension(self, *args)

    def getGeometryModifierExtensionsCount(self):
        """getGeometryModifierExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getGeometryModifierExtensionsCount(self)

    def getGeometryModifierExtensionAtIndex(self, *args):
        """getGeometryModifierExtensionAtIndex(self, size_t index) -> CgeometryModifierExtension"""
        return _pymaxwell.CextensionManager_getGeometryModifierExtensionAtIndex(self, *args)

    def addGeometryLoaderExtension(self, *args):
        """addGeometryLoaderExtension(self, CgeometryLoaderExtension geometryExtension)"""
        return _pymaxwell.CextensionManager_addGeometryLoaderExtension(self, *args)

    def createDefaultGeometryLoaderExtension(self, *args):
        """createDefaultGeometryLoaderExtension(self, char extensionNames) -> CgeometryLoaderExtension"""
        return _pymaxwell.CextensionManager_createDefaultGeometryLoaderExtension(self, *args)

    def createGeometryLoaderExtension(self, *args):
        """createGeometryLoaderExtension(self, MXparamList extensionParameters) -> CgeometryLoaderExtension"""
        return _pymaxwell.CextensionManager_createGeometryLoaderExtension(self, *args)

    def getGeometryLoaderExtensionsCount(self):
        """getGeometryLoaderExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getGeometryLoaderExtensionsCount(self)

    def getGeometryLoaderExtensionAtIndex(self, *args):
        """getGeometryLoaderExtensionAtIndex(self, size_t index) -> CgeometryLoaderExtension"""
        return _pymaxwell.CextensionManager_getGeometryLoaderExtensionAtIndex(self, *args)

    def addGeometryProceduralExtension(self, *args):
        """addGeometryProceduralExtension(self, CgeometryProceduralExtension geometryExtension)"""
        return _pymaxwell.CextensionManager_addGeometryProceduralExtension(self, *args)

    def createDefaultGeometryProceduralExtension(self, *args):
        """createDefaultGeometryProceduralExtension(self, char extensionName) -> CgeometryProceduralExtension"""
        return _pymaxwell.CextensionManager_createDefaultGeometryProceduralExtension(self, *args)

    def createGeometryProceduralExtension(self, *args):
        """createGeometryProceduralExtension(self, MXparamList extensionParameters) -> CgeometryProceduralExtension"""
        return _pymaxwell.CextensionManager_createGeometryProceduralExtension(self, *args)

    def getGeometryProceduralExtensionsCount(self):
        """getGeometryProceduralExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getGeometryProceduralExtensionsCount(self)

    def getGeometryProceduralExtensionAtIndex(self, *args):
        """getGeometryProceduralExtensionAtIndex(self, size_t index) -> CgeometryProceduralExtension"""
        return _pymaxwell.CextensionManager_getGeometryProceduralExtensionAtIndex(self, *args)

    def addMaterialModifierExtension(self, *args):
        """addMaterialModifierExtension(self, CmaterialModifierExtension materialModifierExtension)"""
        return _pymaxwell.CextensionManager_addMaterialModifierExtension(self, *args)

    def createDefaultMaterialModifierExtension(self, *args):
        """createDefaultMaterialModifierExtension(self, char extensionName) -> CmaterialModifierExtension"""
        return _pymaxwell.CextensionManager_createDefaultMaterialModifierExtension(self, *args)

    def createMaterialModifierExtension(self, *args):
        """createMaterialModifierExtension(self, MXparamList extensionParameters) -> CmaterialModifierExtension"""
        return _pymaxwell.CextensionManager_createMaterialModifierExtension(self, *args)

    def getMaterialModifierExtensionsCount(self):
        """getMaterialModifierExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getMaterialModifierExtensionsCount(self)

    def getMaterialModifierExtensionAtIndex(self, *args):
        """getMaterialModifierExtensionAtIndex(self, size_t index) -> CmaterialModifierExtension"""
        return _pymaxwell.CextensionManager_getMaterialModifierExtensionAtIndex(self, *args)

    def addSceneModifierExtension(self, *args):
        """addSceneModifierExtension(self, CsceneModifierExtension sceneModifierExtension)"""
        return _pymaxwell.CextensionManager_addSceneModifierExtension(self, *args)

    def createDefaultSceneModifierExtension(self, *args):
        """createDefaultSceneModifierExtension(self, char extensionName) -> CsceneModifierExtension"""
        return _pymaxwell.CextensionManager_createDefaultSceneModifierExtension(self, *args)

    def createSceneModifierExtension(self, *args):
        """createSceneModifierExtension(self, MXparamList extensionParameters) -> CsceneModifierExtension"""
        return _pymaxwell.CextensionManager_createSceneModifierExtension(self, *args)

    def getSceneModifierExtensionsCount(self):
        """getSceneModifierExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getSceneModifierExtensionsCount(self)

    def getSceneModifierExtensionAtIndex(self, *args):
        """getSceneModifierExtensionAtIndex(self, size_t index) -> CsceneModifierExtension"""
        return _pymaxwell.CextensionManager_getSceneModifierExtensionAtIndex(self, *args)

    def addSkyExtension(self, *args):
        """addSkyExtension(self, CskyExtension skyExtension)"""
        return _pymaxwell.CextensionManager_addSkyExtension(self, *args)

    def createDefaultSkyExtension(self, *args):
        """createDefaultSkyExtension(self, char extensionName) -> CskyExtension"""
        return _pymaxwell.CextensionManager_createDefaultSkyExtension(self, *args)

    def createSkyExtension(self, *args):
        """createSkyExtension(self, MXparamList extensionParameters) -> CskyExtension"""
        return _pymaxwell.CextensionManager_createSkyExtension(self, *args)

    def getSkyExtensionsCount(self):
        """getSkyExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getSkyExtensionsCount(self)

    def getSkyExtensionAtIndex(self, *args):
        """getSkyExtensionAtIndex(self, size_t index) -> CskyExtension"""
        return _pymaxwell.CextensionManager_getSkyExtensionAtIndex(self, *args)

    def addTextureExtension(self, *args):
        """addTextureExtension(self, CtextureExtension textExtension)"""
        return _pymaxwell.CextensionManager_addTextureExtension(self, *args)

    def createDefaultTextureExtension(self, *args):
        """createDefaultTextureExtension(self, char name) -> CtextureExtension"""
        return _pymaxwell.CextensionManager_createDefaultTextureExtension(self, *args)

    def createTextureExtension(self, *args):
        """createTextureExtension(self, MXparamList extensionParameters) -> CtextureExtension"""
        return _pymaxwell.CextensionManager_createTextureExtension(self, *args)

    def getTextureExtensionsCount(self):
        """getTextureExtensionsCount(self) -> size_t"""
        return _pymaxwell.CextensionManager_getTextureExtensionsCount(self)

    def getTextureExtensionAtIndex(self, *args):
        """getTextureExtensionAtIndex(self, size_t index) -> CtextureExtension"""
        return _pymaxwell.CextensionManager_getTextureExtensionAtIndex(self, *args)

    def addEventExtension(self, *args):
        """addEventExtension(self, CbaseExtension eventExtension)"""
        return _pymaxwell.CextensionManager_addEventExtension(self, *args)

    def registerExtensionForEvent(self, *args):
        """registerExtensionForEvent(self, CbaseExtension theExtension, char eventName)"""
        return _pymaxwell.CextensionManager_registerExtensionForEvent(self, *args)

    def unregisterExtensionForEvent(self, *args):
        """unregisterExtensionForEvent(self, CbaseExtension theExtension, char eventName)"""
        return _pymaxwell.CextensionManager_unregisterExtensionForEvent(self, *args)

    def sendExtensionEvent(self, *args):
        """
        sendExtensionEvent(self, char eventName, void param = None)
        sendExtensionEvent(self, char eventName)
        """
        return _pymaxwell.CextensionManager_sendExtensionEvent(self, *args)

    def registerGeometryModifierExtension(self, *args):
        """registerGeometryModifierExtension(self, CgeometryModifierExtension geometryExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerGeometryModifierExtension(self, *args)

    def registerTextureExtension(self, *args):
        """registerTextureExtension(self, CtextureExtension textExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerTextureExtension(self, *args)

    def registerSkyExtension(self, *args):
        """registerSkyExtension(self, CskyExtension skyExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerSkyExtension(self, *args)

    def registerSceneModifierExtension(self, *args):
        """registerSceneModifierExtension(self, CsceneModifierExtension sceneModifierExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerSceneModifierExtension(self, *args)

    def registerMaterialModifierExtension(self, *args):
        """registerMaterialModifierExtension(self, CmaterialModifierExtension materialModifierExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerMaterialModifierExtension(self, *args)

    def registerGeometryProceduralExtension(self, *args):
        """registerGeometryProceduralExtension(self, CgeometryProceduralExtension geometryExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerGeometryProceduralExtension(self, *args)

    def registerGeometryLoaderExtension(self, *args):
        """registerGeometryLoaderExtension(self, CgeometryLoaderExtension geometryExtension) -> bool"""
        return _pymaxwell.CextensionManager_registerGeometryLoaderExtension(self, *args)

    __swig_destroy__ = _pymaxwell.delete_CextensionManager
    __del__ = lambda self : None;
CextensionManager_swigregister = _pymaxwell.CextensionManager_swigregister
CextensionManager_swigregister(CextensionManager)

def CextensionManager_instance():
  """CextensionManager_instance() -> CextensionManager"""
  return _pymaxwell.CextensionManager_instance()

class CgeometryModifierExtension(CbaseExtension):
    """Proxy of C++ CgeometryModifierExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CgeometryModifierExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CgeometryModifierExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CgeometryModifierExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CgeometryModifierExtension_initializePreview(self, *args)

    def modifyMesh(self, *args):
        """modifyMesh(self, Cmaxwell::Cobject mesh) -> bool"""
        return _pymaxwell.CgeometryModifierExtension_modifyMesh(self, *args)

    def usesThisMaterial(self, *args):
        """usesThisMaterial(self, char materialName) -> bool"""
        return _pymaxwell.CgeometryModifierExtension_usesThisMaterial(self, *args)

    def getProxyDisplayPoints(self, *args):
        """
        getProxyDisplayPoints(self, Cmaxwell::Cobject originalMesh, dword percent, dword maxPoints, 
            dword nPoints, float points) -> bool
        """
        return _pymaxwell.CgeometryModifierExtension_getProxyDisplayPoints(self, *args)

    def getProxyDisplayLines(self, *args):
        """
        getProxyDisplayLines(self, Cmaxwell::Cobject originalMesh, dword percent, dword maxLines, 
            dword nPoints, float points, dword nLines, 
            dword pointsPerLine) -> bool
        """
        return _pymaxwell.CgeometryModifierExtension_getProxyDisplayLines(self, *args)

    def getProxyDisplayFaces(self, *args):
        """
        getProxyDisplayFaces(self, Cmaxwell::Cobject originalMesh, dword percent, dword maxFaces, 
            dword nPoints, float points, dword nFaces, 
            dword faces) -> bool
        """
        return _pymaxwell.CgeometryModifierExtension_getProxyDisplayFaces(self, *args)

    def __init__(self): 
        """__init__(self) -> CgeometryModifierExtension"""
        if self.__class__ == CgeometryModifierExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CgeometryModifierExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CgeometryModifierExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CgeometryModifierExtension(self)
        return weakref_proxy(self)
CgeometryModifierExtension_swigregister = _pymaxwell.CgeometryModifierExtension_swigregister
CgeometryModifierExtension_swigregister(CgeometryModifierExtension)

class CgeometryLoaderExtension(CbaseExtension):
    """Proxy of C++ CgeometryLoaderExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CgeometryLoaderExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CgeometryLoaderExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CgeometryLoaderExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CgeometryLoaderExtension_initializePreview(self, *args)

    def loadMesh(self, *args):
        """loadMesh(self, Cmaxwell::Cobject meshToLoad) -> bool"""
        return _pymaxwell.CgeometryLoaderExtension_loadMesh(self, *args)

    def getBoundingBox(self, *args):
        """getBoundingBox(self, Cpoint min, Cpoint max) -> bool"""
        return _pymaxwell.CgeometryLoaderExtension_getBoundingBox(self, *args)

    def getProxyDisplayPoints(self, *args):
        """getProxyDisplayPoints(self, dword percent, dword maxPoints, dword nPoints, float points) -> bool"""
        return _pymaxwell.CgeometryLoaderExtension_getProxyDisplayPoints(self, *args)

    def getProxyDisplayLines(self, *args):
        """
        getProxyDisplayLines(self, dword percent, dword maxLines, dword nPoints, float points, 
            dword nLines, dword pointsPerLine) -> bool
        """
        return _pymaxwell.CgeometryLoaderExtension_getProxyDisplayLines(self, *args)

    def getProxyDisplayFaces(self, *args):
        """
        getProxyDisplayFaces(self, dword percent, dword maxFaces, dword nPoints, float points, 
            dword nFaces, dword faces) -> bool
        """
        return _pymaxwell.CgeometryLoaderExtension_getProxyDisplayFaces(self, *args)

    def __init__(self): 
        """__init__(self) -> CgeometryLoaderExtension"""
        if self.__class__ == CgeometryLoaderExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CgeometryLoaderExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CgeometryLoaderExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CgeometryLoaderExtension(self)
        return weakref_proxy(self)
CgeometryLoaderExtension_swigregister = _pymaxwell.CgeometryLoaderExtension_swigregister
CgeometryLoaderExtension_swigregister(CgeometryLoaderExtension)

class CgeometryProceduralExtension(CbaseExtension):
    """Proxy of C++ CgeometryProceduralExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CgeometryProceduralExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CgeometryProceduralExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell, Cmaxwell::Cobject proceduralObject) -> bool"""
        return _pymaxwell.CgeometryProceduralExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell, Cmaxwell::Cobject proceduralObject) -> bool"""
        return _pymaxwell.CgeometryProceduralExtension_initializePreview(self, *args)

    def intersect(self, *args):
        """
        intersect(self, Cmaxwell::Cobject object, Cpoint rayOrigin, Cvector dir, 
            real time, dword subVolumeIndex, Cvector pNormal, 
            Cvector pLocalImpact, Crandom threadRandom, 
            CfVector data, Cvector parametricUVW, 
            Cvector tangentU, Cvector tangentV) -> bool
        """
        return _pymaxwell.CgeometryProceduralExtension_intersect(self, *args)

    def getBoundingBox(self, *args):
        """getBoundingBox(self, Cpoint bboxPoints, float time)"""
        return _pymaxwell.CgeometryProceduralExtension_getBoundingBox(self, *args)

    def getNumSubVolumes(self):
        """getNumSubVolumes(self) -> dword"""
        return _pymaxwell.CgeometryProceduralExtension_getNumSubVolumes(self)

    def getSubVolumeBoundingBox(self, *args):
        """getSubVolumeBoundingBox(self, Cpoint bboxPoints, dword subVolumeIndex, float time)"""
        return _pymaxwell.CgeometryProceduralExtension_getSubVolumeBoundingBox(self, *args)

    def getNumberOfUVGenerators(self):
        """getNumberOfUVGenerators(self) -> byte"""
        return _pymaxwell.CgeometryProceduralExtension_getNumberOfUVGenerators(self)

    def getUVGeneratorName(self, *args):
        """getUVGeneratorName(self, byte index) -> char"""
        return _pymaxwell.CgeometryProceduralExtension_getUVGeneratorName(self, *args)

    def getUVForChannel(self, *args):
        """
        getUVForChannel(self, CfVector uvw, Cpoint point, Cpoint normal, dword iGenerator, 
            dword subVolIndex, Cvector parametricUVW) -> byte
        """
        return _pymaxwell.CgeometryProceduralExtension_getUVForChannel(self, *args)

    def isOverlappingBoundingBox(self, *args):
        """isOverlappingBoundingBox(self, Cpoint bboxPoints, dword subVolumeIndex, bool forceHalfTime) -> bool"""
        return _pymaxwell.CgeometryProceduralExtension_isOverlappingBoundingBox(self, *args)

    def getProxyDisplayPoints(self, *args):
        """getProxyDisplayPoints(self, dword percent, dword maxPoints, dword nPoints, float points) -> bool"""
        return _pymaxwell.CgeometryProceduralExtension_getProxyDisplayPoints(self, *args)

    def getProxyDisplayLines(self, *args):
        """
        getProxyDisplayLines(self, dword percent, dword maxLines, dword nPoints, float points, 
            dword nLines, dword pointsPerLine) -> bool
        """
        return _pymaxwell.CgeometryProceduralExtension_getProxyDisplayLines(self, *args)

    def getProxyDisplayFaces(self, *args):
        """
        getProxyDisplayFaces(self, dword percent, dword maxFaces, dword nPoints, float points, 
            dword nFaces, dword faces) -> bool
        """
        return _pymaxwell.CgeometryProceduralExtension_getProxyDisplayFaces(self, *args)

    def __init__(self): 
        """__init__(self) -> CgeometryProceduralExtension"""
        if self.__class__ == CgeometryProceduralExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CgeometryProceduralExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CgeometryProceduralExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CgeometryProceduralExtension(self)
        return weakref_proxy(self)
CgeometryProceduralExtension_swigregister = _pymaxwell.CgeometryProceduralExtension_swigregister
CgeometryProceduralExtension_swigregister(CgeometryProceduralExtension)

class CmaterialModifierExtension(CbaseExtension):
    """Proxy of C++ CmaterialModifierExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaterialModifierExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmaterialModifierExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CmaterialModifierExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CmaterialModifierExtension_initializePreview(self, *args)

    def modifyMaterial(self, *args):
        """modifyMaterial(self, Cmaxwell::Cmaterial material) -> bool"""
        return _pymaxwell.CmaterialModifierExtension_modifyMaterial(self, *args)

    def __init__(self): 
        """__init__(self) -> CmaterialModifierExtension"""
        if self.__class__ == CmaterialModifierExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CmaterialModifierExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaterialModifierExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CmaterialModifierExtension(self)
        return weakref_proxy(self)
CmaterialModifierExtension_swigregister = _pymaxwell.CmaterialModifierExtension_swigregister
CmaterialModifierExtension_swigregister(CmaterialModifierExtension)

class CsceneModifierExtension(CbaseExtension):
    """Proxy of C++ CsceneModifierExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CsceneModifierExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CsceneModifierExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CsceneModifierExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CsceneModifierExtension_initializePreview(self, *args)

    def modifyScene(self, *args):
        """modifyScene(self, Cmaxwell scene) -> bool"""
        return _pymaxwell.CsceneModifierExtension_modifyScene(self, *args)

    def __init__(self): 
        """__init__(self) -> CsceneModifierExtension"""
        if self.__class__ == CsceneModifierExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CsceneModifierExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CsceneModifierExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CsceneModifierExtension(self)
        return weakref_proxy(self)
CsceneModifierExtension_swigregister = _pymaxwell.CsceneModifierExtension_swigregister
CsceneModifierExtension_swigregister(CsceneModifierExtension)

class CskyExtension(CbaseExtension):
    """Proxy of C++ CskyExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CskyExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CskyExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CskyExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell) -> bool"""
        return _pymaxwell.CskyExtension_initializePreview(self, *args)

    def getXYZ(self, *args):
        """getXYZ(self, Cxyz xyz, Cvector dir) -> bool"""
        return _pymaxwell.CskyExtension_getXYZ(self, *args)

    def __init__(self): 
        """__init__(self) -> CskyExtension"""
        if self.__class__ == CskyExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CskyExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CskyExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CskyExtension(self)
        return weakref_proxy(self)
CskyExtension_swigregister = _pymaxwell.CskyExtension_swigregister
CskyExtension_swigregister(CskyExtension)

class CtextureExtension(CbaseExtension):
    """Proxy of C++ CtextureExtension class"""
    __swig_setmethods__ = {}
    for _s in [CbaseExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CtextureExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [CbaseExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CtextureExtension, name)
    __repr__ = _swig_repr
    def initializeForRendering(self, *args):
        """initializeForRendering(self, Cmaxwell pMaxwell, CtextureMap map) -> bool"""
        return _pymaxwell.CtextureExtension_initializeForRendering(self, *args)

    def initializePreview(self, *args):
        """initializePreview(self, Cmaxwell pMaxwell, CtextureMap map) -> bool"""
        return _pymaxwell.CtextureExtension_initializePreview(self, *args)

    def getRGB(self, *args):
        """
        getRGB(self, Crgb rgb, real u, real v, IntersectionInfo intersectionInfo = None) -> bool
        getRGB(self, Crgb rgb, real u, real v) -> bool
        """
        return _pymaxwell.CtextureExtension_getRGB(self, *args)

    def __init__(self): 
        """__init__(self) -> CtextureExtension"""
        if self.__class__ == CtextureExtension:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_CtextureExtension(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CtextureExtension
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_CtextureExtension(self)
        return weakref_proxy(self)
CtextureExtension_swigregister = _pymaxwell.CtextureExtension_swigregister
CtextureExtension_swigregister(CtextureExtension)

class CextensionList(_object):
    """Proxy of C++ CmaxwellArray<(p.MXparamList)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CextensionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CextensionList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pymaxwell.delete_CextensionList
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> CextensionList
        __init__(self, CextensionList rhs) -> CextensionList
        """
        this = _pymaxwell.new_CextensionList(*args)
        try: self.this.append(this)
        except: self.this = this
    def elementAt(self, *args):
        """
        elementAt(self, int i) -> MXparamList
        elementAt(self, int i) -> MXparamList
        """
        return _pymaxwell.CextensionList_elementAt(self, *args)

    def first(self, *args):
        """
        first(self) -> MXparamList
        first(self) -> MXparamList
        """
        return _pymaxwell.CextensionList_first(self, *args)

    def back(self, *args):
        """
        back(self) -> MXparamList
        back(self) -> MXparamList
        """
        return _pymaxwell.CextensionList_back(self, *args)

    def push_first(self, *args):
        """push_first(self, MXparamList item)"""
        return _pymaxwell.CextensionList_push_first(self, *args)

    def push_back(self, *args):
        """push_back(self, MXparamList item)"""
        return _pymaxwell.CextensionList_push_back(self, *args)

    def push_before(self, *args):
        """push_before(self, int elem, MXparamList item)"""
        return _pymaxwell.CextensionList_push_before(self, *args)

    def push_after(self, *args):
        """push_after(self, int elem, MXparamList item)"""
        return _pymaxwell.CextensionList_push_after(self, *args)

    def pop_first(self):
        """pop_first(self)"""
        return _pymaxwell.CextensionList_pop_first(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pymaxwell.CextensionList_pop_back(self)

    def find(self, *args):
        """find(self, MXparamList item) -> int"""
        return _pymaxwell.CextensionList_find(self, *args)

    def contains(self, *args):
        """contains(self, MXparamList item) -> bool"""
        return _pymaxwell.CextensionList_contains(self, *args)

    def isIndexValid(self, *args):
        """isIndexValid(self, int i) -> bool"""
        return _pymaxwell.CextensionList_isIndexValid(self, *args)

    def isEmpty(self):
        """isEmpty(self) -> bool"""
        return _pymaxwell.CextensionList_isEmpty(self)

    def swap(self, *args):
        """swap(self, int index0, int index1)"""
        return _pymaxwell.CextensionList_swap(self, *args)

    def resize(self, *args):
        """resize(self, int newSize)"""
        return _pymaxwell.CextensionList_resize(self, *args)

    def enlarge(self, nItemsAdded = 1):
        """
        enlarge(self, int nItemsAdded = 1)
        enlarge(self)
        """
        return _pymaxwell.CextensionList_enlarge(self, nItemsAdded)

    def decrease(self):
        """decrease(self)"""
        return _pymaxwell.CextensionList_decrease(self)

    def remove(self, *args):
        """
        remove(self, int elem)
        remove(self, MXparamList item)
        """
        return _pymaxwell.CextensionList_remove(self, *args)

    def clear(self):
        """clear(self)"""
        return _pymaxwell.CextensionList_clear(self)

    def size(self):
        """size(self) -> int"""
        return _pymaxwell.CextensionList_size(self)

    def capacity(self):
        """capacity(self) -> int"""
        return _pymaxwell.CextensionList_capacity(self)

CextensionList_swigregister = _pymaxwell.CextensionList_swigregister
CextensionList_swigregister(CextensionList)


def new_dwordp():
  """new_dwordp() -> dword"""
  return _pymaxwell.new_dwordp()

def copy_dwordp(*args):
  """copy_dwordp(dword value) -> dword"""
  return _pymaxwell.copy_dwordp(*args)

def delete_dwordp(*args):
  """delete_dwordp(dword self)"""
  return _pymaxwell.delete_dwordp(*args)

def dwordp_assign(*args):
  """dwordp_assign(dword self, dword value)"""
  return _pymaxwell.dwordp_assign(*args)

def dwordp_value(*args):
  """dwordp_value(dword self) -> dword"""
  return _pymaxwell.dwordp_value(*args)
class CmaxwellMxi(_object):
    """Proxy of C++ CmaxwellMxi class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmaxwellMxi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmaxwellMxi, name)
    __repr__ = _swig_repr
    TYPE_COLOR_AND_LUMINANCE = _pymaxwell.CmaxwellMxi_TYPE_COLOR_AND_LUMINANCE
    TYPE_TEMPERATURE = _pymaxwell.CmaxwellMxi_TYPE_TEMPERATURE
    TYPE_MXI = _pymaxwell.CmaxwellMxi_TYPE_MXI
    TYPE_MULTIPLE_EMITTERS = _pymaxwell.CmaxwellMxi_TYPE_MULTIPLE_EMITTERS
    TYPE_IES = _pymaxwell.CmaxwellMxi_TYPE_IES
    TYPE_SKY_CONSTANT = _pymaxwell.CmaxwellMxi_TYPE_SKY_CONSTANT
    TYPE_SKY_PHYSICAL = _pymaxwell.CmaxwellMxi_TYPE_SKY_PHYSICAL
    TYPE_CONSTANT_SUN = _pymaxwell.CmaxwellMxi_TYPE_CONSTANT_SUN
    TYPE_IBL_ENVIRONMENT = _pymaxwell.CmaxwellMxi_TYPE_IBL_ENVIRONMENT
    def __init__(self): 
        """__init__(self) -> CmaxwellMxi"""
        this = _pymaxwell.new_CmaxwellMxi()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_CmaxwellMxi
    __del__ = lambda self : None;
    def getVersion(self):
        """
        Method:      getVersion() -> path
        Description: Gets the mxi version of the module. Useful for debugging.
        """
        return _pymaxwell.CmaxwellMxi_getVersion(self)

    def getFileVersion(self, *args):
        """
        Method:      getFileVersion( filename ) -> (float,Cerror)
        Description: Gets the file version of the MXI.
        """
        return _pymaxwell.CmaxwellMxi_getFileVersion(self, *args)

    def setScenePath(self, *args):
        """
        Method:      setScenePath( path ) -> void
        Description: Sets the path to the MXS file used to render this MXI.
        """
        return _pymaxwell.CmaxwellMxi_setScenePath(self, *args)

    def getScenePath(self):
        """
        Method:      getScenePath() -> path
        Description: Returns the path to the MXS file used to render this MXI if it exists.
        """
        return _pymaxwell.CmaxwellMxi_getScenePath(self)

    def getPreview(self):
        """
        Method:      getPreview() -> image
        Description: Gets a preview image of the render.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getPreview(self)

    def setPreview(self, *args):
        """
        Method:      setPreview( image ) -> bool
        Description: Sets the MXI preview image.
        Parameter:   image -> numpy ubyte array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_setPreview(self, *args)

    def isResumable(self):
        """isResumable(self) -> bool"""
        return _pymaxwell.CmaxwellMxi_isResumable(self)

    def getSamplingLevel(self):
        """getSamplingLevel(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getSamplingLevel(self)

    def getRenderTimeInSeconds(self):
        """
        Method:      getRenderTimeInSeconds() -> seconds
        Description: Returns the total render time (including any resume render) in seconds.
                     If the MXI was not generated through a render process but converting an
                     image the method returns 0
        """
        return _pymaxwell.CmaxwellMxi_getRenderTimeInSeconds(self)

    def xRes(self):
        """xRes(self) -> dword"""
        return _pymaxwell.CmaxwellMxi_xRes(self)

    def yRes(self):
        """yRes(self) -> dword"""
        return _pymaxwell.CmaxwellMxi_yRes(self)

    def filmWidth(self):
        """filmWidth(self) -> real"""
        return _pymaxwell.CmaxwellMxi_filmWidth(self)

    def filmHeight(self):
        """filmHeight(self) -> real"""
        return _pymaxwell.CmaxwellMxi_filmHeight(self)

    def getIso(self):
        """getIso(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getIso(self)

    def setIso(self, *args):
        """setIso(self, real iso)"""
        return _pymaxwell.CmaxwellMxi_setIso(self, *args)

    def getShutter(self):
        """getShutter(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getShutter(self)

    def setShutter(self, *args):
        """setShutter(self, real shutter)"""
        return _pymaxwell.CmaxwellMxi_setShutter(self, *args)

    def getFstop(self):
        """getFstop(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getFstop(self)

    def setFstop(self, *args):
        """setFstop(self, real Fstop)"""
        return _pymaxwell.CmaxwellMxi_setFstop(self, *args)

    def getExposure(self):
        """getExposure(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getExposure(self)

    def setExposure(self, *args):
        """setExposure(self, real intensity)"""
        return _pymaxwell.CmaxwellMxi_setExposure(self, *args)

    def getBurn(self):
        """getBurn(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getBurn(self)

    def setBurn(self, *args):
        """setBurn(self, real burn)"""
        return _pymaxwell.CmaxwellMxi_setBurn(self, *args)

    def getMonitorGamma(self):
        """getMonitorGamma(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getMonitorGamma(self)

    def setMonitorGamma(self, *args):
        """setMonitorGamma(self, real monitorGamma)"""
        return _pymaxwell.CmaxwellMxi_setMonitorGamma(self, *args)

    def getSharpness(self):
        """getSharpness(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getSharpness(self)

    def setSharpness(self, *args):
        """setSharpness(self, real mxiSharpness)"""
        return _pymaxwell.CmaxwellMxi_setSharpness(self, *args)

    def isSharpnessEnabled(self):
        """isSharpnessEnabled(self) -> bool"""
        return _pymaxwell.CmaxwellMxi_isSharpnessEnabled(self)

    def setSharpnessEnabled(self, *args):
        """setSharpnessEnabled(self, bool enabled)"""
        return _pymaxwell.CmaxwellMxi_setSharpnessEnabled(self, *args)

    def setColorSpace(self, *args):
        """setColorSpace(self, dword type) -> byte"""
        return _pymaxwell.CmaxwellMxi_setColorSpace(self, *args)

    def getColorSpace(self):
        """getColorSpace(self) -> dword"""
        return _pymaxwell.CmaxwellMxi_getColorSpace(self)

    def isDevignettingEnabled(self):
        """isDevignettingEnabled(self) -> bool"""
        return _pymaxwell.CmaxwellMxi_isDevignettingEnabled(self)

    def setDevignettingEnabled(self, *args):
        """setDevignettingEnabled(self, bool enabled)"""
        return _pymaxwell.CmaxwellMxi_setDevignettingEnabled(self, *args)

    def getDevignetting(self):
        """getDevignetting(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getDevignetting(self)

    def setDevignetting(self, *args):
        """setDevignetting(self, real devignetting)"""
        return _pymaxwell.CmaxwellMxi_setDevignetting(self, *args)

    def isDiffractionEnabled(self):
        """isDiffractionEnabled(self) -> bool"""
        return _pymaxwell.CmaxwellMxi_isDiffractionEnabled(self)

    def setDiffractionEnabled(self, *args):
        """setDiffractionEnabled(self, bool enabled)"""
        return _pymaxwell.CmaxwellMxi_setDiffractionEnabled(self, *args)

    def getDiffractionIntensity(self):
        """getDiffractionIntensity(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getDiffractionIntensity(self)

    def setDiffractionIntensity(self, *args):
        """setDiffractionIntensity(self, real intensity)"""
        return _pymaxwell.CmaxwellMxi_setDiffractionIntensity(self, *args)

    def getDiffractionFrequency(self):
        """getDiffractionFrequency(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getDiffractionFrequency(self)

    def setDiffractionFrequency(self, *args):
        """setDiffractionFrequency(self, real frequency)"""
        return _pymaxwell.CmaxwellMxi_setDiffractionFrequency(self, *args)

    def getApertureMap(self):
        """getApertureMap(self) -> char"""
        return _pymaxwell.CmaxwellMxi_getApertureMap(self)

    def setApertureMap(self, *args):
        """setApertureMap(self, char path)"""
        return _pymaxwell.CmaxwellMxi_setApertureMap(self, *args)

    def getObstacleMap(self):
        """getObstacleMap(self) -> char"""
        return _pymaxwell.CmaxwellMxi_getObstacleMap(self)

    def setObstacleMap(self, *args):
        """setObstacleMap(self, char path)"""
        return _pymaxwell.CmaxwellMxi_setObstacleMap(self, *args)

    def isScatteringEnabled(self):
        """isScatteringEnabled(self) -> bool"""
        return _pymaxwell.CmaxwellMxi_isScatteringEnabled(self)

    def setScatteringEnabled(self, *args):
        """setScatteringEnabled(self, bool enabled)"""
        return _pymaxwell.CmaxwellMxi_setScatteringEnabled(self, *args)

    def getScattering(self):
        """getScattering(self) -> real"""
        return _pymaxwell.CmaxwellMxi_getScattering(self)

    def setScattering(self, *args):
        """setScattering(self, real scattering)"""
        return _pymaxwell.CmaxwellMxi_setScattering(self, *args)

    def getCameraName(self):
        """getCameraName(self) -> char"""
        return _pymaxwell.CmaxwellMxi_getCameraName(self)

    def getCameraCoordinates(self, *args):
        """
        Method:      getCameraCoordinates( iStep ) -> (Cvector position, Cvector target, Cvector up,
                      ok)
        Description: Gets camera position data.
        Parameter:   iStep -> Subframe index. Return "" if iStep is invalid
        """
        return _pymaxwell.CmaxwellMxi_getCameraCoordinates(self, *args)

    def getCameraFocalLength(self, *args):
        """
        Method:      getCameraFocalLength( iStep ) -> (focalLenght,ok)
        Description: Gets camera focal length.
        Parameter:   iStep -> Subframe index. Return "" if iStep is invalid
        """
        return _pymaxwell.CmaxwellMxi_getCameraFocalLength(self, *args)

    def getCameraFStop(self, *args):
        """
        Method:      getCameraFStop( iStep ) -> (fStop,ok)
        Description: Gets camera fStop.
        Parameter:   iStep -> Subframe index. Return 'error' if iStep is invalid
        """
        return _pymaxwell.CmaxwellMxi_getCameraFStop(self, *args)

    def getCameraShutter(self):
        """
        Method:      getCameraShutter() -> shutter
        Description: Gets camera shutter.

        """
        return _pymaxwell.CmaxwellMxi_getCameraShutter(self)

    def getCameraIso(self):
        """
        Method:      getCameraIso( iStep ) -> iso
        Description: Gets camera Iso.

        """
        return _pymaxwell.CmaxwellMxi_getCameraIso(self)

    def getCameraDiaphragm(self):
        """
        Method:      getCameraDiaphragm() -> (str type, float angle, int nBlades)
        Description: Gets camera diaphragm info.

        """
        return _pymaxwell.CmaxwellMxi_getCameraDiaphragm(self)

    def getCameraFps(self):
        """
        Method:      getCameraFps() -> fps
        Description: Gets camera fps.

        """
        return _pymaxwell.CmaxwellMxi_getCameraFps(self)

    def getMultilightType(self):
        """
        Method:      getMultilightType() -> type
        Description: returns the multilight type of the MXI.
        Parameter:   type = 0 (No multilight), 1 (Intensity), 2 (Color + Intensity).
        """
        return _pymaxwell.CmaxwellMxi_getMultilightType(self)

    def getLightsCount(self):
        """
        Method:      getLightsCount() -> int
        Description: returns the number of lights contained in the MXI.
        """
        return _pymaxwell.CmaxwellMxi_getLightsCount(self)

    def getLightBuffersCount(self):
        """
        Method:      getLightBuffersCount() -> int
        Description: returns the number of light buffers contained in the MXI, including environment.
        """
        return _pymaxwell.CmaxwellMxi_getLightBuffersCount(self)

    def getLightsNames(self):
        """
        Method:      getLightsNames() -> list (str)
        Description: returns the light names list of the MXI.
        """
        return _pymaxwell.CmaxwellMxi_getLightsNames(self)

    def getLightName(self, *args):
        """
        Method:      getLightName( index ) -> name
        Description: Returns the name of the light with the given index. If the index is invalid
                     an empty string is returned.
        """
        return _pymaxwell.CmaxwellMxi_getLightName(self, *args)

    def getLightIndex(self, *args):
        """
        Method:      getLightIndex( name ) -> index
        Description: Returns the index of the light with the given name. Returns -1 if there are
                     no lights with this name.
        """
        return _pymaxwell.CmaxwellMxi_getLightIndex(self, *args)

    def getLightType(self, *args):
        """
        Method:      getLightType( index ) -> type
        Description: Returns the type of the light with the given index.
        Parameter:   type = CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE or
                            CmaxwellMxi.TYPE_TEMPERATURE or
                            CmaxwellMxi.TYPE_MXI or
                            CmaxwellMxi.TYPE_MULTIPLE_EMITTERS or
                            CmaxwellMxi.TYPE_IES or
                            CmaxwellMxi.TYPE_ENVIRONMENT 
        """
        return _pymaxwell.CmaxwellMxi_getLightType(self, *args)

    def getLightIntensity(self, *args):
        """
        Method:      getLightIntensity( index ) -> intensity
        Description: Returns the intensity of the light with the given index. Depending on the type
                     the returned intensity means different things.
                     - If type is CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE the intensity is the absolute
                       emission value in the units used (watts, lumens, etc.).
                     - If type is CmaxwellMxi.TYPE_TEMPERATURE the intensity is in kelvin.
                     - If type is anything else the returned intensity is a multiplier that affects
                       the original emission value.
                     If the index is invalid -1 is returned.

        """
        return _pymaxwell.CmaxwellMxi_getLightIntensity(self, *args)

    def setLightIntensity(self, *args):
        """
        Method:      setLightIntensity( index, intensity ) -> 1 = Success, 0 = Fail
        Description: Sets the intensity of the light with the given index.
                     - If type (getLightType(index)) is CmaxwellMxi.TYPE_COLOR_AND_LUMINANCE the
                       intensity is the absolute emission value in the units used (watts, lumens,
                       etc).
                     - If type is CmaxwellMxi.TYPE_TEMPERATURE the intensity is in kelvin.
                     - If type is anything else the returned intensity is a multiplier that affects
                       the original emission value.
                     If the index is invalid 0 is returned.

        """
        return _pymaxwell.CmaxwellMxi_setLightIntensity(self, *args)

    def getLightColor(self, *args):
        """
        Method:      getLightColor( index ) -> Crgb
        Description: Returns the Crgb color of the light with the given index. This call makes sense
                     only when lightType is TYPE_COLOR_AND_LUMINANCE and color type is set to rgb
                     color, otherwise white is returned.
        """
        return _pymaxwell.CmaxwellMxi_getLightColor(self, *args)

    def setLightColor(self, *args):
        """
        Method:      setLightColor( index, Crgb color ) -> Crgb
        Description: Sets the Crgb color of the light with the given index. This call makes sense
                     only when getLightType() is TYPE_COLOR_AND_LUMINANCE and color type is set to
                     rgb color, otherwise return 0.
        """
        return _pymaxwell.CmaxwellMxi_setLightColor(self, *args)

    def getLightTemperatureColor(self, *args):
        """
        Method:      getLightTemperatureColor( index ) -> color
        Description: Returns the temperature color in kelvins of the light with the given index.
                     This call makes sense only when lightType is TYPE_COLOR_AND_LUMINANCE and
                     color type is set to temperature color, otherwise -1.0 is returned.
        """
        return _pymaxwell.CmaxwellMxi_getLightTemperatureColor(self, *args)

    def setLightTemperatureColor(self, *args):
        """
        Method:      setLightTemperatureColor( index, temperature ) -> color
        Description: Setsthe temperature color in kelvins of the light with the given index.
                     This call makes sense only when getLightType() is TYPE_COLOR_AND_LUMINANCE and
                     color type is set to temperature color, otherwise -1.0 is returned.
        """
        return _pymaxwell.CmaxwellMxi_setLightTemperatureColor(self, *args)

    def getConstantSkyLuminance(self):
        """
        Method:      getConstantSkyLuminance() -> (luminance,ok)
        Description: Returns the constant sky luminance (in cd/m2). Returns -1 if there
                     is no sky or if it is not constant.
        """
        return _pymaxwell.CmaxwellMxi_getConstantSkyLuminance(self)

    def setConstantSkyLuminance(self, *args):
        """
        Method:      setConstantSkyLuminance( value ) -> 1 = Success, 0 = Fail
        Description: Sets the constant sky luminance (in cd/m2). Returns 0 if there
                     is no sky or if it is not constant.
        """
        return _pymaxwell.CmaxwellMxi_setConstantSkyLuminance(self, *args)

    def getPhysicalSkyLuminance(self):
        """
        Method:      getPhysicalSkyLuminance() -> (luminance,ok)
        Description: Returns the physical sky luminance which is represented by the
                     sun power factor in the scene. Returns -1 if there is no sky or if it is not
                     constant.
        """
        return _pymaxwell.CmaxwellMxi_getPhysicalSkyLuminance(self)

    def setPhysicalSkyLuminance(self, *args):
        """
        Method:      setPhysicalSkyLuminance( value ) -> 1 = Success, 0 = Fail
        Description: Sets the physical sky luminance which is represented by the
                     sun power factor in the scene. Returns -1 if there is no sky or if it is not
                     constant.
        """
        return _pymaxwell.CmaxwellMxi_setPhysicalSkyLuminance(self, *args)

    def getSunPowerFactor(self):
        """
        Method:      getSunPowerFactor() -> (float,ok)
        Description: Returns by reference the sun power factor used when there is constant sky plus
                     sun. Returns -1 if there is no sun in the scene.
        """
        return _pymaxwell.CmaxwellMxi_getSunPowerFactor(self)

    def setSunPowerFactor(self, *args):
        """
        Method:      setSunPowerFactor( value ) -> 1 = Success, 0 = Fail
        Description: Sets the sun power factor used when there is constant sky plus sun.
                     Returns 0 if there is no sun in the scene.
        """
        return _pymaxwell.CmaxwellMxi_setSunPowerFactor(self, *args)

    def getEnvironmentWeight(self):
        """
        Method:      getEnvironmentWeight() -> (weight,ok)
        Description: Returns by reference the environment weight factor. Returns -1 if there is no
                     environment in the scene
        """
        return _pymaxwell.CmaxwellMxi_getEnvironmentWeight(self)

    def setEnvironmentWeight(self, *args):
        """
        Method:      setEnvironmentWeight( value ) -> 1 = Success, 0 = Fail
        Description: Sets the environment weight factor. Returns 0 if there is no
                     environment in the scene
        """
        return _pymaxwell.CmaxwellMxi_setEnvironmentWeight(self, *args)

    def getEmixerVersion():
        """
        Method:      getEmixerVersion() -> version
        Description: Returns the emixer version file used in this version of the SDK
        """
        return _pymaxwell.CmaxwellMxi_getEmixerVersion()

    if _newclass:getEmixerVersion = staticmethod(getEmixerVersion)
    __swig_getmethods__["getEmixerVersion"] = lambda x: getEmixerVersion
    def loadEmixer(self, *args):
        """
        Method:      loadEmixer( filename, frame = 0 ) -> bool
        Description: reads the given emixer file and applies its settings to the MXI. Returns True
                     if succeed, False if not.
        Parameter:   filename = Path of the emitter file.
        Parameter:   frame = frame of the emitter file (if there is more than one).
        Method:      loadEmixer( filename, frame = 0 ) -> bool
        Description: reads the given emixer file and applies its settings to the MXI. Returns True
                     if succeed, False if not.
        Parameter:   filename = Path of the emitter file.
        Parameter:   frame = frame of the emitter file (if there is more than one).
        """
        return _pymaxwell.CmaxwellMxi_loadEmixer(self, *args)

    def saveEmixer(self, *args):
        """
        Method:      saveEmixer( filename ) -> bool
        Description: Saves the current MXI settings into a emixer file. Returns True if succeed,
                     False if not.
        Parameter:   path = Path of the emixer file.
        """
        return _pymaxwell.CmaxwellMxi_saveEmixer(self, *args)

    def exportMultilightSettingsToScene(self, *args):
        """
        Method:      exportMultilightSettingsToScene( Cmaxwell scene ) -> bool
        Description: imports the current MXI settings back into the MXS scene. This method assumes
                     'scene' is valid and contains a valid scene. Returns True if succeed, False
                     if not.
        Parameter:   scene = Cmaxwell scene object.

        """
        return _pymaxwell.CmaxwellMxi_exportMultilightSettingsToScene(self, *args)

    def read(self, *args):
        """
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALPHA |
                      FLAG_ID_OBJECT | FLAG_ID_MATERIAL | FLAG_SHADOW_PASS | FLAG_MOTION |
                      FLAG_ROUGHNESS | FLAG_Z | FLAG_FRESNEL | FLAG_NORMALS | FLAG_POSITION |
                      FLAG_FALSE_COLOR | FLAG_DEEP | FLAG_UV | FLAG_ALPHA_CUSTOM )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels (All by default). Available
                     channels: FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION,
                     FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV and/or FLAG_ALPHA_CUSTOM.
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALPHA |
                      FLAG_ID_OBJECT | FLAG_ID_MATERIAL | FLAG_SHADOW_PASS | FLAG_MOTION |
                      FLAG_ROUGHNESS | FLAG_Z | FLAG_FRESNEL | FLAG_NORMALS | FLAG_POSITION |
                      FLAG_FALSE_COLOR | FLAG_DEEP | FLAG_UV | FLAG_ALPHA_CUSTOM )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels (All by default). Available
                     channels: FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION,
                     FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV and/or FLAG_ALPHA_CUSTOM.
        Method:      read( filename, readHeaderOnly = False, selectedChannels = FLAG_ALPHA |
                      FLAG_ID_OBJECT | FLAG_ID_MATERIAL | FLAG_SHADOW_PASS | FLAG_MOTION |
                      FLAG_ROUGHNESS | FLAG_Z | FLAG_FRESNEL | FLAG_NORMALS | FLAG_POSITION |
                      FLAG_FALSE_COLOR | FLAG_DEEP | FLAG_UV | FLAG_ALPHA_CUSTOM )
                     -> Cerror
        Description: Reads an MXI file from disk.
        Parameter:   filename -> Path of the MXI file to read.
        Parameter:   readHeaderOnly -> If this flag is true the function reads only the header of the
                     file. Useful for performance reasons when reading the main image buffer is not
                     needed.
        Parameter:   selectedChannels -> Selected render channels (All by default). Available
                     channels: FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION,
                     FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV and/or FLAG_ALPHA_CUSTOM.
        """
        return _pymaxwell.CmaxwellMxi_read(self, *args)

    def write(self, *args):
        """
        Method:      write( filename ) -> Cerror
        Description: writes an MXI file to disk.
        Parameter:   fileName -> Path of the MXI file to write.
        """
        return _pymaxwell.CmaxwellMxi_write(self, *args)

    def getFileSize(self):
        """
        Method:      getFileSize() -> bytes
        Description: Returns the number of bytes that this MXI will have, even if it has not been
                     saved yet. It takes into account the buffers, channels and multilight options
                     enabled.
        """
        return _pymaxwell.CmaxwellMxi_getFileSize(self)

    def readImage(self, *args):
        """
        Method:      readImage( filename ) -> True = Success, False = Fail
        Description: Reads an image file and fills the Cmxi buffer with it.
        """
        return _pymaxwell.CmaxwellMxi_readImage(self, *args)

    def extractChannels(self, *args):
        """
        Method:      extractChannels( filename, destFolder, extension, depth ) -> True = Success, False = Fail
        Description: Extracts all the channels embeded in the MXI to disk.
        Parameter:   fileName -> File name (not full path) of the destination files.
        Parameter:   destFolder -> Folder where the channels will be saved.
        Parameter:   extension -> File extension of the saved channels.
        Parameter:   depth -> Channels bitDepth.
        """
        return _pymaxwell.CmaxwellMxi_extractChannels(self, *args)

    def getLightBuffer(self, *args):
        """
        Method:      getLightBuffer( index, bitDepth ) -> (image,name,ok)
        Description: Returns the light buffer of index iLight (name, resolution and extension).
        Parameter:   index -> Index of the light.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getLightBuffer(self, *args)

    def getRenderBuffer(self, *args):
        """
        Method:      getRenderBuffer( bitDepth ) -> (image,ok)
        Description: Returns a render buffer with the given bitDepth.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getRenderBuffer(self, *args)

    def getExtraBuffer(self, *args):
        """
        Method:      getExtraBuffer( name, bitDepth ) -> (image,ok)
        Description: Returns a render extra buffer with the given buffer name and bitdepth.
        Parameter:   name -> 'ALPHA', 'Z', 'MOTION', 'ID_MATERIAL', 'ID_OBJECT', 'ROUGHNESS',
                             'FRESNEL', 'NORMALS', 'POSITION'.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,3). In case of MOTION the shape
                              is (width,height,4).
        Method:      getExtraBuffer( bufferId, bitDepth ) -> (image,ok)
        Description: Returns a render extra buffer with the given buffer index and bitdepth.
        Parameter:   bufferId -> FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION
                     or FLAG_UV.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,n), where 'n' is the number of
                     color components (1 (greyscale),3 (RGB) or 4 (RGBA)).
        """
        return _pymaxwell.CmaxwellMxi_getExtraBuffer(self, *args)

    def getShadowBuffers(self, *args):
        """
        Method:      getShadowBuffers( bitDepth ) -> (image list,ok)
        Description: Returns a list of nShadow shadow buffers with the given bitDepth.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height)
        """
        return _pymaxwell.CmaxwellMxi_getShadowBuffers(self, *args)

    def getShadowBuffer(self, *args):
        """
        Method:      getShadowBuffer( index, bitDepth ) -> (image,ok)
        Description: Returns a shadow image with the given bitDepth.
        Parameter:   index -> selects the light that produces the shadows. If no multilight, must be 0.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height)
        Method:      getShadowBuffer( bitDepth ) -> (image,ok)
        Description: Returns a shadow image with the given bitDepth. Gets all shadows combined when
                     ML=ON, or regular shadow channel when ML=OFF.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getShadowBuffer(self, *args)

    def getNumberOfShadowBuffers(self):
        """
        Method:      getNumberOfShadowBuffers() -> int
        Description: Get the number of shadows in the MXI.

        """
        return _pymaxwell.CmaxwellMxi_getNumberOfShadowBuffers(self)

    def getAlphaCustomBuffers(self, *args):
        """
        Method:      getAlphaCustomBuffers( bitDepth ) -> (image list,ok)
        Description: Returns a list of alpha custom buffers with the given bitDepth.
        Parameter:   bitDepth -> 8, 16, 32.
        Parameter:   image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getAlphaCustomBuffers(self, *args)

    def getAlphaCustomBuffer(self, *args):
        """
        Method:      getAlphaCustomBuffer( index, bitDepth ) -> (image,ok)
        Description: Returns a custom alpha image with the given bitDepth.
        Parameter:   index -> custom alpha requested index.Parameter:   bitDepth -> 8, 16, 32.
        Output:      image -> numpy array. shape is (width,height,3)
        """
        return _pymaxwell.CmaxwellMxi_getAlphaCustomBuffer(self, *args)

    def getNumberOfAlphaCustomBuffers(self):
        """
        Method:      getNumberOfAlphaCustomBuffers() -> int
        Description: Gets the number of alpha custom buffers available.
        """
        return _pymaxwell.CmaxwellMxi_getNumberOfAlphaCustomBuffers(self)

    def getAlphaCustomName(self, *args):
        """
        Method:      getAlphaCustomName( index ) -> (name,ok)
        Description: Gets the name of an alpha custom channel by index.
        """
        return _pymaxwell.CmaxwellMxi_getAlphaCustomName(self, *args)

    def getFalseColorBuffer(self):
        """
        Method:      getFalseColorBuffer() -> (image,type,min,max,ok)
        Description: Returns a list of alpha custom buffers with the given bitDepth.
        Parameter:   image -> numpy array. shape is (width,height).
        Parameter:   type -> TYPE_LINEAR, TYPE_CUADRATIC, TYPE_CUBIC, TYPE_QUARTIC or TYPE_LOGARYTHMIC.
        Parameter:   min -> min value in 'image'.
        Parameter:   max -> max value in 'image'.
        """
        return _pymaxwell.CmaxwellMxi_getFalseColorBuffer(self)

    def getChannelName(self, *args):
        """
        Method:      getChannelName( channel ) -> name
        Description: Returns the name of a channel.
        Parameter:   channel -> FLAG_RENDER, FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL,
                      FLAG_SHADOW_PASS, FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL,
                      FLAG_NORMALS, FLAG_POSITION, FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV or
                      FLAG_ALPHA_CUSTOM.
        """
        return _pymaxwell.CmaxwellMxi_getChannelName(self, *args)

    def getExtraBuffersEnabledMask(self):
        """
        Method:      getExtraBuffersEnabledMask() -> mask
        Description: Returns a bitwise mask with the extra buffers rendered. Useful with the following
                     flags: FLAG_ALPHA, FLAG_ID_OBJECT, FLAG_ID_MATERIAL, FLAG_SHADOW_PASS,
                     FLAG_MOTION, FLAG_ROUGHNESS, FLAG_Z, FLAG_FRESNEL, FLAG_NORMALS, FLAG_POSITION,
                     FLAG_FALSE_COLOR, FLAG_DEEP, FLAG_UV or FLAG_ALPHA_CUSTOM.
        Sample code: mxi = CmaxwellMxi();
                     mxi.read('sample.mxi');
                     mask = mxi.getExtraBuffersEnabledMask();
                     haveZ = mask & FLAG_Z;
                     if haveZ:
                       print('Z channel available');
        """
        return _pymaxwell.CmaxwellMxi_getExtraBuffersEnabledMask(self)

    def createImages(self, *args):
        """
        Method:      createImages( nImagges, xRes, yRes )
        Description: Create nImages buffers of xRes, yRes resolution.

        """
        return _pymaxwell.CmaxwellMxi_createImages(self, *args)

    def setBufferRGB(self, *args):
        """
        Method:      setBufferRGB( data, xRes, yRes )
        Description: Fills the selected image buffer with the given floating RGB buffer. This
                     function recalculates the image buffer taking into account all the parameters
                     as Iso, Shutter, etc.. so it assumes all of them are initialized to the proper
                     values. Also assumes that the buffer size fits with the MXI resolution.
        Parameter:   pRgb -> numpy float array. shape must be (width,height,3).
        Parameter:   iImage -> selected light buffer.
        """
        return _pymaxwell.CmaxwellMxi_setBufferRGB(self, *args)

    def updateDisplay(self):
        """
        Method:      updateDisplay()
        Description: Updates the render image buffer and all the render channels.
        """
        return _pymaxwell.CmaxwellMxi_updateDisplay(self)

    def updatePreview(self):
        """
        Method:      updatePreview()
        Description: Updates the preview buffer.
        """
        return _pymaxwell.CmaxwellMxi_updatePreview(self)

    def updateLightInPreview(self, *args):
        """
        Method:      updateLightInPreview( index )
        Description: Updates the given light in the preview buffer.
        """
        return _pymaxwell.CmaxwellMxi_updateLightInPreview(self, *args)

    def updateAllLightsInPreview(self):
        """
        Method:      updateAllLightsInPreview()
        Description: Updates all the lights in the preview buffer.
        """
        return _pymaxwell.CmaxwellMxi_updateAllLightsInPreview(self)

    def getRenderPreviewResolution(self, *args):
        """
        Method:      getPreviesResolution( xRes, yRes ) -> (xResPreview, yResPreview)
        Description: Given a render resolution (xRes & yRes) returns the preview resolution.
        """
        return _pymaxwell.CmaxwellMxi_getRenderPreviewResolution(self, *args)

    def getRenderPreviewBuffer(self):
        """
        Method:      getRenderPreviewBuffer() -> Crgb8
        Description: Returns the preview render buffer used for interactive purposes.
        """
        return _pymaxwell.CmaxwellMxi_getRenderPreviewBuffer(self)

    def isMerged(self):
        """
        Method:      isMerged() -> bool
        Description: Returns true if the MXI file is the result of a merge process and false if not.

        """
        return _pymaxwell.CmaxwellMxi_isMerged(self)

    def getUsedIdCpusCount(self):
        """
        Method:      getUsedIdCpusCount() -> int
        Description: Returns the number of MXIs used to generate this MXI if it is the result of a
                     merge process. Returns 0 if the MXI was not generated through a merge process.

        """
        return _pymaxwell.CmaxwellMxi_getUsedIdCpusCount(self)

    def getUsedIdCpus(self):
        """
        Method:      getUsedIdCpus() -> (list (int),merged)
        Description: Fills a list with the cpu ids (seeds) used to generate this MXI file. 'merged' is
                     0 if the MXI was not generated through a merge process.

        """
        return _pymaxwell.CmaxwellMxi_getUsedIdCpus(self)

    def mergeMxis(self, *args):
        """
        Method:      mergeMxis( targetMxi, sources ) -> 1 = Success, 0 = Fail
        Description: merges all the MXI files given in the sources array that contains all the
                     paths to the mxis to merge.
        Parameter:   targetMxi -> filename of the MXI where the merge process will be saved.
        Parameter:   sources -> list of MXI pathnames to merge.
        """
        return _pymaxwell.CmaxwellMxi_mergeMxis(self, *args)

CmaxwellMxi_swigregister = _pymaxwell.CmaxwellMxi_swigregister
CmaxwellMxi_swigregister(CmaxwellMxi)

def CmaxwellMxi_getEmixerVersion():
  """
    Method:      getEmixerVersion() -> version
    Description: Returns the emixer version file used in this version of the SDK
    """
  return _pymaxwell.CmaxwellMxi_getEmixerVersion()

mwcallback_cb = _pymaxwell.mwcallback_cb

def mwcallback(*args):
  """mwcallback(byte type, char pMethod, char pError, void pValue) -> byte"""
  return _pymaxwell.mwcallback(*args)
mwcallback = _pymaxwell.mwcallback
class Cmaxwell(_object):
    """
    Class Cmaxwell

      Contains the maxwell scene.

      Example code:

        scene = Cmaxwell(mwcallback);
        scene.readMXS('myscene.mxs');
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cmaxwell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cmaxwell, name)
    __repr__ = _swig_repr
    CALLBACK_WARNING = _pymaxwell.Cmaxwell_CALLBACK_WARNING
    CALLBACK_ERROR = _pymaxwell.Cmaxwell_CALLBACK_ERROR
    CALLBACK_WRITE_USER_DATA = _pymaxwell.Cmaxwell_CALLBACK_WRITE_USER_DATA
    CALLBACK_READ_USER_DATA = _pymaxwell.Cmaxwell_CALLBACK_READ_USER_DATA
    ALL_CLEAN = _pymaxwell.Cmaxwell_ALL_CLEAN
    CAMERA_DIRTY = _pymaxwell.Cmaxwell_CAMERA_DIRTY
    MATERIAL_DIRTY = _pymaxwell.Cmaxwell_MATERIAL_DIRTY
    MATERIAL_ASSIGNMENTS_DIRTY = _pymaxwell.Cmaxwell_MATERIAL_ASSIGNMENTS_DIRTY
    GEOMETRY_DIRTY = _pymaxwell.Cmaxwell_GEOMETRY_DIRTY
    VOXELIZATION_DIRTY = _pymaxwell.Cmaxwell_VOXELIZATION_DIRTY
    SKY_OR_HDR_DIRTY = _pymaxwell.Cmaxwell_SKY_OR_HDR_DIRTY
    DEFAULT_OR_OVERRIDE_MATERIAL_DIRTY = _pymaxwell.Cmaxwell_DEFAULT_OR_OVERRIDE_MATERIAL_DIRTY
    ALL_DIRTY = _pymaxwell.Cmaxwell_ALL_DIRTY
    __swig_setmethods__["_interactiveFlags"] = _pymaxwell.Cmaxwell__interactiveFlags_set
    __swig_getmethods__["_interactiveFlags"] = _pymaxwell.Cmaxwell__interactiveFlags_get
    if _newclass:_interactiveFlags = _swig_property(_pymaxwell.Cmaxwell__interactiveFlags_get, _pymaxwell.Cmaxwell__interactiveFlags_set)
    def __init__(self, *args): 
        """
        Description: Maxwell scene constructor
        Example code:

          scene = Cmaxwell(mwcallback);
          help(scene); #help(Cmaxwell);
          # mwcallback is supplied by the Maxwell Python module
          # User don't needs to define it.
        """
        if self.__class__ == Cmaxwell:
            _self = None
        else:
            _self = self
        this = _pymaxwell.new_Cmaxwell(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymaxwell.delete_Cmaxwell
    __del__ = lambda self : None;
    __swig_getmethods__["getEngineVersion"] = lambda x: _pymaxwell.Cmaxwell_getEngineVersion
    if _newclass:getEngineVersion = staticmethod(_pymaxwell.Cmaxwell_getEngineVersion)
    __swig_getmethods__["getSdkVersionString"] = lambda x: _pymaxwell.Cmaxwell_getSdkVersionString
    if _newclass:getSdkVersionString = staticmethod(_pymaxwell.Cmaxwell_getSdkVersionString)
    __swig_getmethods__["getSdkVersion"] = lambda x: _pymaxwell.Cmaxwell_getSdkVersion
    if _newclass:getSdkVersion = staticmethod(_pymaxwell.Cmaxwell_getSdkVersion)
    def getMxsVersion(self):
        """
        Method:      getMxsVersion() -> float
        Description : Returns the version number of the current MXS file loaded.
        """
        return _pymaxwell.Cmaxwell_getMxsVersion(self)

    def getMostRecentVersionMXS(self):
        """
        Method:      getMostRecentVersionMXS() -> float
        Description: Returns the highest version of MXS files that can be read with this SDK.
        """
        return _pymaxwell.Cmaxwell_getMostRecentVersionMXS(self)

    __swig_getmethods__["isDepthSupportedForThisFormat"] = lambda x: _pymaxwell.Cmaxwell_isDepthSupportedForThisFormat
    if _newclass:isDepthSupportedForThisFormat = staticmethod(_pymaxwell.Cmaxwell_isDepthSupportedForThisFormat)
    __swig_getmethods__["getHighestDepthSupportedForThisFormat"] = lambda x: _pymaxwell.Cmaxwell_getHighestDepthSupportedForThisFormat
    if _newclass:getHighestDepthSupportedForThisFormat = staticmethod(_pymaxwell.Cmaxwell_getHighestDepthSupportedForThisFormat)
    __swig_getmethods__["isEmbeddingAlphaSupportedForThisFormat"] = lambda x: _pymaxwell.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat
    if _newclass:isEmbeddingAlphaSupportedForThisFormat = staticmethod(_pymaxwell.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat)
    __swig_getmethods__["isEmbeddingAllChannelsSupportedForThisFormat"] = lambda x: _pymaxwell.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat
    if _newclass:isEmbeddingAllChannelsSupportedForThisFormat = staticmethod(_pymaxwell.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat)
    __swig_getmethods__["isTextureExtensionSupported"] = lambda x: _pymaxwell.Cmaxwell_isTextureExtensionSupported
    if _newclass:isTextureExtensionSupported = staticmethod(_pymaxwell.Cmaxwell_isTextureExtensionSupported)
    def getPluginID(self):
        """
        Method:      getPluginID() - > string
        Description: Gets the plugin identifier (string stored in the scene file to know which
                     exporter has generated the MXS file).

        """
        return _pymaxwell.Cmaxwell_getPluginID(self)

    def setPluginID(self, *args):
        """
        Method:      setPluginID( string )
        Description: Sets the plugin identifier (string stored in the scene file to know which
                     exporter has generated the MXS file).

        """
        return _pymaxwell.Cmaxwell_setPluginID(self, *args)

    def isProtectionEnabled(self):
        """
        Method:      isProtectionEnabled() -> bool
        Description: Checks whether the ability to export to other formats in Studio is enabled
                     (protection is enabled by default).
        """
        return _pymaxwell.Cmaxwell_isProtectionEnabled(self)

    def enableProtection(self, *args):
        """
        Method:      enableProtection( bool )
        Description: Enables/Disables the ability to export to other formats in Studio (protection
                     is enabled by default).
        """
        return _pymaxwell.Cmaxwell_enableProtection(self, *args)

    def freeGeometry(self):
        """freeGeometry(self)"""
        return _pymaxwell.Cmaxwell_freeGeometry(self)

    def freeScene(self):
        """freeScene(self)"""
        return _pymaxwell.Cmaxwell_freeScene(self)

    def getScenePreview(self):
        """
        Method:      getScenePreview() -> (numpy,ok)
        Description: Preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell.Cmaxwell_getScenePreview(self)

    def setScenePreview(self, *args):
        """
        Method:      setScenePreview( image ) -> bool
        Description: Sets preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell.Cmaxwell_setScenePreview(self, *args)

    def readPreview(self, *args):
        """
        Method:      readPreview( filename ) -> image
        Description: Preview image of the scene stored in the file (useful for thums).
        Parameter:   image -> numpy ubyte array. shape is (width,height,3).
        """
        return _pymaxwell.Cmaxwell_readPreview(self, *args)

    def setAxisConversion(self, *args):
        """
        Method:      setAxisConversion( type ) -> 1 = Success, 0 = Fail
        Description: Get the axis orientation of the scene.
        Parameter:   type = 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     Plug-in names can be used as well:
                      'YZXRH' -> 'MAXWELL', 'MAYA', 'XSI', 'HOUDINI', 'RHINO', 'SOLIDWORKS'
                      'ZXYLH' -> 'FORMZ', '3DSMAX'
                      'YXZLH' -> 'CINEMA'
                      'YZXLH' -> 'LIGHTWAVE'.
        """
        return _pymaxwell.Cmaxwell_setAxisConversion(self, *args)

    def getAxisConversion(self, *args):
        """
        Method:      getAxisConversion() -> (type,base)
        Description: Get the axis orientation of the scene.
        Return:      type -> 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     base -> axis conversion, filled with the axis change matrix used in
                      MXParamList.setFloatArrayn and MXParamList.setDoubleArray
        Method:      getAxisConversion() -> (type,base)
        Description: Get the axis orientation of the scene.
        Return:      type -> 'YZXRH', 'ZXYLH', 'YXZLH' or 'YZXLH'.
                     base -> axis conversion, filled with the axis change matrix used in
                      MXParamList.setFloatArrayn and MXParamList.setDoubleArray
        """
        return _pymaxwell.Cmaxwell_getAxisConversion(self, *args)

    def setSinglePrecisionOfGeometry(self):
        """
        Method:      setSinglePrecisionOfGeometry()
        Description: Uses floats instead doubles for geometry.
        """
        return _pymaxwell.Cmaxwell_setSinglePrecisionOfGeometry(self)

    def setSceneUserData(self):
        """setSceneUserData(self) -> byte"""
        return _pymaxwell.Cmaxwell_setSceneUserData(self)

    def getObject(self, *args):
        """
        Method:      getObject( name ) -> CmaxwellObject [reference]
        Description: Returns the CmaxwellObject with the given name or a null object
                     if there is not an object with that name.
        """
        return _pymaxwell.Cmaxwell_getObject(self, *args)

    def createMesh(self, *args):
        """
        Method:      createMesh( name, nVertexes, nNormals,
                                 nTriangles, nPositionsPerVertex )
                     -> CmaxwellObject [reference]
        Description: Creates a mesh with the given parameters and adds it to the scene. If nVertex,
                     nNormals and nTriangles are equal to 0, a null object is created.
                     nPositionsPerVertex sets the number of deformation motion blur substeps
                    (1 or 2, 1 means no deformation blur)
        """
        return _pymaxwell.Cmaxwell_createMesh(self, *args)

    def createNullObject(self, *args):
        """
        Method:      createNullObject( name ) -> CmaxwellObject [reference]
        Description: Convenience function to create NULL objects.
        """
        return _pymaxwell.Cmaxwell_createNullObject(self, *args)

    def createInstancement(self, *args):
        """
        Method:      createInstancement( name, object ) -> CmaxwellObject [reference]
        Description: Creates an instance of 'object'. 'object' must be a mesh. Returns the
                     instance created.
        """
        return _pymaxwell.Cmaxwell_createInstancement(self, *args)

    def createReferencedObject(self, *args):
        """
        Method:      createReferencedObject( name, mxsPath ) -> CmaxwellObject [reference]
        Description: Creates a MXS referenced object that points to the given MXS path.
        """
        return _pymaxwell.Cmaxwell_createReferencedObject(self, *args)

    def addObject(self, *args):
        """
        Method:      addObject( CmaxwellObject ) -> CmaxwellObject [reference]
        Description: Adds an existent object into the scene. It is useful for instance for
                     importing objects from one scene to other.
        """
        return _pymaxwell.Cmaxwell_addObject(self, *args)

    def mergeMeshes(self, *args):
        """
        Method:      mergeMeshes( targetObjectName, CmaxwellObject[] meshes )
                     -> CmaxwellObject [reference], 0 = Fail
        Description: Merges an array of meshes into a single mesh The original meshes are not
                     removed (it can be done later calling CmaxwellOobject.free() ).
                     Note: the target object 'targetObjectName' must not be one of the objects
                     included in 'meshes'. In that case the script will crash.
        """
        return _pymaxwell.Cmaxwell_mergeMeshes(self, *args)

    def addCamera(self, *args):
        """
        Method:      addCamera( name, nSteps, shutter, filmWidth, filmHeight, iso, diaphragmType,
                                angle, nBlades, fps, xRes, yRes, pixelAspect, lensType = TYPE_THIN_LENS,
                                proyectionType = TYPE_PERSPECTIVE )
                     -> CmaxwellCamera [reference]
        Description: Adds a new camera to the scene with the given parameters
        Parameter:   lensType = TYPE_THIN_LENS (default), TYPE_PINHOLE, TYPE_ORTHO, TYPE_FISHEYE,
                     TYPE_SPHERICAL, TYPE_CYLINDRICAL.
        Parameter:   projectionType = TYPE_PERSPECTIVE (default), TYPE_FRONT, TYPE_TOP, TYPE_LEFT,
                     TYPE_BACK, TYPE_BOTTOM, TYPE_RIGHT
        Method:      addCamera( name, nSteps, shutter, filmWidth, filmHeight, iso, diaphragmType,
                                angle, nBlades, fps, xRes, yRes, pixelAspect, lensType = TYPE_THIN_LENS,
                                proyectionType = TYPE_PERSPECTIVE )
                     -> CmaxwellCamera [reference]
        Description: Adds a new camera to the scene with the given parameters
        Parameter:   lensType = TYPE_THIN_LENS (default), TYPE_PINHOLE, TYPE_ORTHO, TYPE_FISHEYE,
                     TYPE_SPHERICAL, TYPE_CYLINDRICAL.
        Parameter:   projectionType = TYPE_PERSPECTIVE (default), TYPE_FRONT, TYPE_TOP, TYPE_LEFT,
                     TYPE_BACK, TYPE_BOTTOM, TYPE_RIGHT
        """
        return _pymaxwell.Cmaxwell_addCamera(self, *args)

    def getCamera(self, *args):
        """
        Method:      getCamera( name ) -> CmaxwellCamera [reference]
        Description: Given the name of a camera this function returns its CmaxwellCamera reference.
        """
        return _pymaxwell.Cmaxwell_getCamera(self, *args)

    def getActiveCamera(self):
        """
        Method:      getActiveCamera() -> CmaxwellCamera [reference]
        Description: Returns a reference to the active camera of the scene.
        """
        return _pymaxwell.Cmaxwell_getActiveCamera(self)

    def setPath(self, *args):
        """
        Method:      setPath( type, path, outputBitDepthMode ) -> (outputBitDepthMode,ok)
        Description: Sets the path and depth for the given channel.
        Parameter:   type = 'RENDER', 'ALPHA', 'SHADOW', 'OBJECT', 'MATERIAL', 'MOTION', 'Z',
                      'ROUGHNESS', 'FRESNEL', 'NORMALS', 'POSITION', 'DEEP', 'UV', 'ALPHA_CUSTOM'.
                      ('BITMAPS' is deprecated, use addSearchingPath() instead ).
        Parameter:   path = Output path of the channel.
        Parameter:   outputBitDepthMode = Bits depth per pixel (8/16/32).
                     If the depth is not correct for the given format the engine tries to change
                     outputBitDepthMode. i.e setPath( "image.jpg", 32 ) is not correct because jpg
                     does not support 32 bits so the engine will change it to 8. Check the manual to
                     get more info about supported image formats.
        """
        return _pymaxwell.Cmaxwell_setPath(self, *args)

    def getPath(self, *args):
        """
        Method:      getPath( type ) -> (path,outputBitDepthMode)
        Description: Gets the path and depth for the given channel.
        Parameter:   type = 'RENDER', 'ALPHA', 'SHADOW', 'OBJECT', 'MATERIAL', 'MOTION', 'Z',
                      'ROUGHNESS', 'FRESNEL', 'NORMALS', 'POSITION', 'DEEP', 'UV', 'ALPHA_CUSTOM'.
                      ('BITMAPS' is deprecated, use addSearchingPath() instead ).
        Parameter:   path = Output path of the channel.
        Parameter:   outputBitDepthMode = Bits depth per pixel (8/16/32)
                     If the depth is not correct for the given format the engine tries to change
                     outputBitDepthMode. i.e setPath('image.jpg', 32 ) is not correct because jpg
                     does not support 32 bits so the engine will change it to 8. Check the manual to
                     get more info about supported image formats.
        """
        return _pymaxwell.Cmaxwell_getPath(self, *args)

    def addSearchingPath(self, *args):
        """
        Method:      addSearchingPath( path ) -> 1 = Succeed, 0 = Fail
        Description: Adds a path to look for missing textures, ior and ies files.
        """
        return _pymaxwell.Cmaxwell_addSearchingPath(self, *args)

    def getSearchingPaths(self):
        """
        Method:      getSearchingPaths() -> (list,ok)
        Description: Returns a list of strings with all searching paths of the scene (textures, ior
                     files, hdr files, ies etc).
        """
        return _pymaxwell.Cmaxwell_getSearchingPaths(self)

    def getEnvironment(self):
        """
        Method:      getEnvironment() -> CmaxwellEnvironment [reference]
        Description: RReturns a reference to the environment data of the scene.
        """
        return _pymaxwell.Cmaxwell_getEnvironment(self)

    def readMaterial(self, *args):
        """
        Method:      readMaterial( filename ) -> CmaxwellMaterial
        Description: Reads a material from disk.
        """
        return _pymaxwell.Cmaxwell_readMaterial(self, *args)

    def createMaterial(self, *args):
        """
        Method:      createMaterial( name, addToScene = True ) -> CmaxwellMaterial [reference]
        Description: Creates a material with the given name and adds it to the scene if the flag
                     addToScene is True (default).
        Method:      createMaterial( name, addToScene = True ) -> CmaxwellMaterial [reference]
        Description: Creates a material with the given name and adds it to the scene if the flag
                     addToScene is True (default).
        """
        return _pymaxwell.Cmaxwell_createMaterial(self, *args)

    def getMaterial(self, *args):
        """
        Method:      getMaterial( name ) -> CmaxwellMaterial [reference]
        Description: Given the name of a material, returns its CmaxwellMaterial reference.
        """
        return _pymaxwell.Cmaxwell_getMaterial(self, *args)

    def addMaterial(self, *args):
        """
        Method:      addMaterial( CmaxwellMaterial ) -> CmaxwellMaterial [reference]
        Description: Adds a material to the scene and returns a reference to the added material.
        """
        return _pymaxwell.Cmaxwell_addMaterial(self, *args)

    def eraseUnusedMaterials(self):
        """
        Method:      eraseUnusedMaterials() -> 1 = Success, 0 = Fail
        Description: Removes unused materials from the scene.
        """
        return _pymaxwell.Cmaxwell_eraseUnusedMaterials(self)

    def getOverrideMaterial(self):
        """
        Method:      getOverrideMaterial() -> name
        Description: Gets the material that overrides all the materials of the scene (except
                     emitter materials).
        """
        return _pymaxwell.Cmaxwell_getOverrideMaterial(self)

    def getOverrideMaterialEnabled(self):
        """
        Method:      getOverrideMaterialEnabled() -> bool
        Description: Checks whether the override material is enabled.
        """
        return _pymaxwell.Cmaxwell_getOverrideMaterialEnabled(self)

    def setOverrideMaterial(self, *args):
        """
        Method:      setOverrideMaterial( name )
        Description: Sets the material that overrides all the materials of the scene (except
                     emitter materials).
        Method:      setOverrideMaterial( bool )
        Description: Sets the override material on/off.
        """
        return _pymaxwell.Cmaxwell_setOverrideMaterial(self, *args)

    def getDefaultMaterial(self):
        """
        Method:      getDefaultMaterial() -> path
        Description: Gets the path of the material that will be used for all the objects/triangles
                     without material.
        """
        return _pymaxwell.Cmaxwell_getDefaultMaterial(self)

    def getDefaultMaterialEnabled(self):
        """
        Method:      getDefaultMaterialEnabled() -> bool
        Description: Checks whether the default material is enabled
        """
        return _pymaxwell.Cmaxwell_getDefaultMaterialEnabled(self)

    def setDefaultMaterial(self, *args):
        """
        Method:      setDefaultMaterial( path )
        Description: Sets the path of the material that will be used for all the objects/triangles
                     without material
        Method:      setDefaultMaterial( bool )
        Description: Sets the default material on/off
        """
        return _pymaxwell.Cmaxwell_setDefaultMaterial(self, *args)

    def getRenderParameter(self, *args):
        """
        Method:      getRenderParameter( parameterName ) -> (value,ok)
        Description: Gets the value of the render parameter given by parameterName. Allowed render
                     parameters and its values are:
                     'ENGINE': 'RS0' or 'RS1'
                     'NUM THREADS': 0-1024
                     'STOP TIME': 1-50000 (in seconds)
                     'SAMPLING LEVEL: 1.0-50.0'
                     'USE MULTILIGHT': 0 = No multilight
                                       1 = Intensity multilight
                                       2 = Color multilight
                     'SAVE LIGHTS IN SEPARATE FILES': (0 or 1)
                     'MXI FULLNAME': String that specifies the MXI path
                     'DO NOT SAVE MXI FILE': (0 or 1)
                     'DO NOT SAVE IMAGE FILE': (0 or 1)
                     'RENAME AFTER SAVING': (0 or 1)
                     'COPY MXI AFTER RENDER': String that specifies the MXI path where output will be copied
                     'COPY IMAGE AFTER RENDER': String that specifies the image path where output will be copied
                     'REMOVE FILES AFTER COPY': ,(0 or 1)
                     'DO MOTION BLUR': (0 or 1)
                     'DO DISPLACEMENT': (0 or 1)
                     'DO DISPERSION': (0 or 1)
                     'DO DIFFUSE LAYER': (0 or 1)
                     'DO REFLECTION LAYER': (0 or 1)
                     'DO DIRECT LAYER': (0 or 1)
                     'DO INDIRECT LAYER': (0 or 1)
                     'DO DIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO DIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO RENDER CHANNEL': (0 or 1)
                     'DO ALPHA CHANNEL': (0 or 1)
                     'OPAQUE ALPHA': (0 or 1)
                     'EMBED CHANNELS': (0 or 1)
                     'DO IDOBJECT CHANNEL': (0 or 1)
                     'DO IDMATERIAL CHANNEL': (0 or 1)
                     'DO SHADOW PASS CHANNEL': (0 or 1)
                     'DO MOTION CHANNEL': (0 or 1)
                     'DO ROUGHNESS CHANNEL': (0 or 1)
                     'DO FRESNEL CHANNEL': (0 or 1)
                     'DO NORMALS CHANNEL': (0 or 1)
                     'NORMALS CHANNEL SPACE': (0 or 1) -> World (default) or Camera
                     'POSITION CHANNEL SPACE': (0 or 1) -> World (default) or Camera
                     'MOTION CHANNEL TYPE': (0 or 1) -> RealSmart (default) or Other
                     'DO POSITION CHANNEL': (0 or 1)
                     'DO ZBUFFER CHANNEL': (0 or 1)
                     'ZBUFFER RANGE': tuple (min,max)
                     'DO DEEP CHANNEL': (0 or 1)
                     'DEEP CHANNEL TYPE': (0 or 1) -> 0 = Alpha (default); 1 = RGBA
                     'DEEP MIN DISTANCE: (float)
                     'DEEP MAX SAMPLES': >0
                     'DO UV CHANNEL': (0 or 1)
                     'DO ALPHA CUSTOM CHANNEL': (0 or 1)
                     'DO DEVIGNETTING': (0 or 1)
                     'DEVIGNETTING': 0.0-100.0 (percent)
                     'DO SCATTERING_LENS': (0 or 1)
                     'SCATTERING_LENS': 0.0-1.0
                     'DO SHARPNESS': (0 or 1)
                     'SHARPNESS': (float)
                     'STOP RENDER IF NO PHYSICAL MEMORY': (0 or 1)
                     'STOP RENDER IF EXTENSION ERROR': (0 or 1)
        """
        return _pymaxwell.Cmaxwell_getRenderParameter(self, *args)

    def setRenderParameter(self, *args):
        """
        Method:      setRenderParameter( parameterName, value ) -> 1 = Success, 0 = Fail
        Description: Sets the value of the render parameter given by parameterName. Allowed render
                     parameters and its values are:
                     'ENGINE': 'RS0' or 'RS1'
                     'NUM THREADS': 0-1024
                     'STOP TIME': 1-50000 (in seconds)
                     'SAMPLING LEVEL: 1.0-50.0'
                     'USE MULTILIGHT': 0 = No multilight
                                       1 = Intensity multilight
                                       2 = Color multilight
                     'SAVE LIGHTS IN SEPARATE FILES': (0 or 1)
                     'MXI FULLNAME': String that specifies the MXI path
                     'DO NOT SAVE MXI FILE': (0 or 1)
                     'DO NOT SAVE IMAGE FILE': (0 or 1)
                     'RENAME AFTER SAVING': (0 or 1)
                     'COPY MXI AFTER RENDER': String that specifies the MXI path where output will be copied
                     'COPY IMAGE AFTER RENDER': String that specifies the image path where output will be copied
                     'REMOVE FILES AFTER COPY': ,(0 or 1)
                     'DO MOTION BLUR': (0 or 1)
                     'DO DISPLACEMENT': (0 or 1)
                     'DO DISPERSION': (0 or 1)
                     'DO DIFFUSE LAYER': (0 or 1)
                     'DO REFLECTION LAYER': (0 or 1)
                     'DO DIRECT LAYER': (0 or 1)
                     'DO INDIRECT LAYER': (0 or 1)
                     'DO DIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFLECTION CAUSTIC LAYER': (0 or 1)
                     'DO DIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO INDIRECT REFRACTION CAUSTIC LAYER': (0 or 1)
                     'DO RENDER CHANNEL': (0 or 1)
                     'DO ALPHA CHANNEL': (0 or 1)
                     'OPAQUE ALPHA': (0 or 1)
                     'EMBED CHANNELS': (0 or 1)
                     'DO IDOBJECT CHANNEL': (0 or 1)
                     'DO IDMATERIAL CHANNEL': (0 or 1)
                     'DO SHADOW PASS CHANNEL': (0 or 1)
                     'DO MOTION CHANNEL': (0 or 1)
                     'DO ROUGHNESS CHANNEL': (0 or 1)
                     'DO FRESNEL CHANNEL': (0 or 1)
                     'DO NORMALS CHANNEL': (0 or 1)
                     'NORMALS CHANNEL SPACE': (0 or 1) -> World (default) or Camera
                     'POSITION CHANNEL SPACE': (0 or 1) -> World (default) or Camera
                     'MOTION CHANNEL TYPE': (0 or 1) -> RealSmart (default) or Other
                     'DO POSITION CHANNEL': (0 or 1)
                     'DO ZBUFFER CHANNEL': (0 or 1)
                     'ZBUFFER RANGE': tuple (min,max)
                     'DO DEEP CHANNEL': (0 or 1)
                     'DEEP CHANNEL TYPE': (0 or 1) -> 0 = Alpha (default); 1 = RGBA
                     'DEEP MIN DISTANCE: (float)
                     'DEEP MAX SAMPLES': >0
                     'DO UV CHANNEL': (0 or 1)
                     'DO ALPHA CUSTOM CHANNEL': (0 or 1)
                     'DO DEVIGNETTING': (0 or 1)
                     'DEVIGNETTING': 0.0-100.0 (percent)
                     'DO SCATTERING_LENS': (0 or 1)
                     'SCATTERING_LENS': 0.0-1.0
                     'DO SHARPNESS': (0 or 1)
                     'SHARPNESS': (float)
                     'STOP RENDER IF NO PHYSICAL MEMORY': (0 or 1)
                     'STOP RENDER IF EXTENSION ERROR': (0 or 1)
        """
        return _pymaxwell.Cmaxwell_setRenderParameter(self, *args)

    def getToneMapping(self):
        """
        Method:      getToneMapping() -> (monitorGamma,burn,ok)
        Description: Gets the tonemapping values.
        Parameter:   burn from 0.0 to 1.0, default = 0.8
        Parameter:   monitorGamma 0.1 to 3.5, default = 2.2
        """
        return _pymaxwell.Cmaxwell_getToneMapping(self)

    def setToneMapping(self, *args):
        """
        Method:      setToneMapping(monitorGamma,burn) -> 1 = Success, 0 = Fail
        Description: sets the tonemapping values.
        Parameter:   burn from 0.0 to 1.0, default = 0.8
        Parameter:   monitorGamma 0.1 to 3.5, default = 2.2
        """
        return _pymaxwell.Cmaxwell_setToneMapping(self, *args)

    def getActiveToneMapping(self):
        """
        Method: getActiveToneMapping() -> 'BASIC' or 'ADVANCED'

        """
        return _pymaxwell.Cmaxwell_getActiveToneMapping(self)

    READ_ALL = _pymaxwell.Cmaxwell_READ_ALL
    SKIP_OBJECTS = _pymaxwell.Cmaxwell_SKIP_OBJECTS
    SKIP_MESHES = _pymaxwell.Cmaxwell_SKIP_MESHES
    def setMxsPath(self, *args):
        """
        Method :     setMxsPath( path )
        Description: Sets the path where the mxs file will be written.
        """
        return _pymaxwell.Cmaxwell_setMxsPath(self, *args)

    def getMxsPath(self):
        """
        Method :     readMXS() -> path
        Description: Gets the path where the mxs file will be written.
        """
        return _pymaxwell.Cmaxwell_getMxsPath(self)

    def readMXS(self, *args):
        """
        Method :     readMXS( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk.
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        Method :     readMXS( path, readOptions = READ_ALL ) -> 1 = Success, 0 = Fail
        Description: Read a MXS file from disk.
        Parameter:   readOptions -> READ_ALL, SKIP_OBJECTS, SKIP_MESHES.
        """
        return _pymaxwell.Cmaxwell_readMXS(self, *args)

    def writeMXS(self, mxsPath = None):
        """
        Method :     writeMXS( path ) -> 1 = Success, 0 = Fail
        Description: Write the scene to a MXS file on disk.
        Parameter:   mxsPath: file path. If mxsPath is '', the path set in Cmaxwell.setMxsPath() is used.
        Method :     writeMXS( path ) -> 1 = Success, 0 = Fail
        Description: Write the scene to a MXS file on disk.
        Parameter:   mxsPath: file path. If mxsPath is '', the path set in Cmaxwell.setMxsPath() is used.
        """
        return _pymaxwell.Cmaxwell_writeMXS(self, mxsPath)

    def getDiffraction(self):
        """
        Method:      getDiffraction() -> (isEnabled,intensity,frequence,aperture,obstacle,ok)
        Description: Gets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0.
        Parameter:   apperture, obstacle -> Paths to the aperture and obstacle maps.
        """
        return _pymaxwell.Cmaxwell_getDiffraction(self)

    def setDiffraction(self, *args):
        """
        Method :     setDiffraction( intensity, frequency, apperture, obstacle )
                     -> 1 = Success, 0 = Fail
        Description: Sets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0
        Parameter:   apperture, obstacle -> Paths to the aperture and obstacle maps.
                     obstacle is optional.
        Method :     setDiffraction( intensity, frequency, apperture, obstacle )
                     -> 1 = Success, 0 = Fail
        Description: Sets diffraction parameters.
        Parameter:   intensity and frequency -> from 0.0 to 1.0, default = 0.0
        Parameter:   apperture, obstacle -> Paths to the aperture and obstacle maps.
                     obstacle is optional.
        """
        return _pymaxwell.Cmaxwell_setDiffraction(self, *args)

    def enableDiffraction(self):
        """
        Method:      enableDiffraction() -> 1 = Success, 0 = Fail
        Description: Enables diffraction.
        """
        return _pymaxwell.Cmaxwell_enableDiffraction(self)

    def disableDiffraction(self):
        """
        Method:      disableDiffraction() -> 1 = Success, 0 = Fail
        Description: Disables diffraction.
        """
        return _pymaxwell.Cmaxwell_disableDiffraction(self)

    def getColorSpace(self):
        """
        Method: getColorSpace() -> int
        Description: Gets the output color space used by the render engine.
        Parameter:   type -> possible values:
                     0 = COLOR_SPACE_SRGB ( D65 ) - CIE REC 709, default
                     1 = COLOR_SPACE_ADOBE98 ( D65 )
                     2 = COLOR_SPACE_APPLE ( D65 )
                     3 = COLOR_SPACE_PAL ( D65 )
                     4 = COLOR_SPACE_NTSC ( C )
                     5 = COLOR_SPACE_NTSC1979
                     6 = COLOR_SPACE_WIDEGAMUT
                     7 = COLOR_SPACE_PROPHOTO
                     8 = COLOR_SPACE_ECIRRGB
                     9 = COLOR_SPACE_CIE1931
                     10 = COLOR_SPACE_BRUCERGB
                     11 = COLOR_SPACE_COLORMATCH
                     12 = COLOR_SPACE_BESTRGB
                     13 = COLOR_SPACE_DONRGB4
                     0xFF = COLOR_SPACE_UNKNOWN
        """
        return _pymaxwell.Cmaxwell_getColorSpace(self)

    def setColorSpace(self, *args):
        """
        Method: setColorSpace( type ) -> 1 = Success, 0 = Fail
        Description: Sets the output color space used by the render engine.
        Parameter:   type -> possible values:
                     0 = COLOR_SPACE_SRGB ( D65 ) - CIE REC 709, default
                     1 = COLOR_SPACE_ADOBE98 ( D65 )
                     2 = COLOR_SPACE_APPLE ( D65 )
                     3 = COLOR_SPACE_PAL ( D65 )
                     4 = COLOR_SPACE_NTSC ( C )
                     5 = COLOR_SPACE_NTSC1979
                     6 = COLOR_SPACE_WIDEGAMUT
                     7 = COLOR_SPACE_PROPHOTO
                     8 = COLOR_SPACE_ECIRRGB
                     9 = COLOR_SPACE_CIE1931
                     10 = COLOR_SPACE_BRUCERGB
                     11 = COLOR_SPACE_COLORMATCH
                     12 = COLOR_SPACE_BESTRGB
                     13 = COLOR_SPACE_DONRGB4
                     0xFF = COLOR_SPACE_UNKNOWN
        """
        return _pymaxwell.Cmaxwell_setColorSpace(self, *args)

    def getColorSpaceGamma(self):
        """
        Method:      getColorSpaceGamma() -> gamma
        Description: Returns the gamma used by the active color space.
        """
        return _pymaxwell.Cmaxwell_getColorSpaceGamma(self)

    def isInteractiveModeEnabled(self):
        """isInteractiveModeEnabled(self) -> bool"""
        return _pymaxwell.Cmaxwell_isInteractiveModeEnabled(self)

    def isInteractiveFlagEnabled(self, *args):
        """isInteractiveFlagEnabled(self, InteractiveFlags flag) -> bool"""
        return _pymaxwell.Cmaxwell_isInteractiveFlagEnabled(self, *args)

    def setInteractiveFlagDirty(self, *args):
        """setInteractiveFlagDirty(self, InteractiveFlags flag)"""
        return _pymaxwell.Cmaxwell_setInteractiveFlagDirty(self, *args)

    def getLastError(self):
        """
        Method:      getLastError() -> int
        Description: Returns the latest error occurred. Useful for finding out i/o problems
                     when reading/writing MXS/MXI files. To obtain 'human readable' errors
                     use Cmaxwell.getLastErrorString().
        """
        return _pymaxwell.Cmaxwell_getLastError(self)

    def getLastErrorString(self):
        """
        Method:      getLastErrorString() -> string
        Description: Returns an human readable string containing the latest error occurred
        """
        return _pymaxwell.Cmaxwell_getLastErrorString(self)

    def getDependencies(self):
        """
        Method:      getDependencies() -> (list (str),ok)
        Description: Returns an array of strings with all the extern
                     dependencies of the scene (textures, ior files, hdr files, etc).
                     User must load extensions (CextensionManager.instance().loadAllExtensions())
                     before call getDependencies to be able to get dependencies of MaterialModifiers
                     extension materials.
        """
        return _pymaxwell.Cmaxwell_getDependencies(self)

    def getOverlayTextOptions(self):
        """
        Method:      getOverlayTextOptions() -> CoverlayTextOptions
        Description: Gets the render overlay text options.
        """
        return _pymaxwell.Cmaxwell_getOverlayTextOptions(self)

    def setOverlayTextOptions(self, *args):
        """
        Method:      setOverlayTextOptions( CoverlayTextOptions ) -> 1 = Success, 0 = Fail
        Description: Sets the render overlay text options.
        """
        return _pymaxwell.Cmaxwell_setOverlayTextOptions(self, *args)

    def getObjectsCount(self):
        """
        Method:      getObjectsCount() -> (int,ok)
        Description: Returns the number of objects in the scene.
        """
        return _pymaxwell.Cmaxwell_getObjectsCount(self)

    def getMaterialsCount(self):
        """
        Method:      getMaterialsCount() -> (int,ok)
        Description: Returns the number of materials in the scene.
        """
        return _pymaxwell.Cmaxwell_getMaterialsCount(self)

    def getCamerasCount(self):
        """
        Method:      getCamerasCount() -> (int,ok)
        Description: Returns the number of cameras in the scene
        """
        return _pymaxwell.Cmaxwell_getCamerasCount(self)

    def getSceneInfo(self):
        """
        Method:      getSceneInfo() -> (CsceneInfo,ok)
        Description: Returns a structure with information about the scene.
        """
        return _pymaxwell.Cmaxwell_getSceneInfo(self)

    def computeFresnelGraph(self, *args):
        """
        Method:      computeFresnelGraph(int n, float iorOutgoing) -> (numpy X, numpy Y, ok)
        Description: Compute a fresnel graph.
        """
        return _pymaxwell.Cmaxwell_computeFresnelGraph(self, *args)

    def computeAbbeGraph(self, *args):
        """
        Method:      computeAbbeGraph(int n, float nd, real abbe) -> (numpy X, numpy Y, ok)
        Description: Compute a abbe graph.
        """
        return _pymaxwell.Cmaxwell_computeAbbeGraph(self, *args)

    def getCorrelatedcolorTemperature(self, *args):
        """Method:      getCorrelatedColorTemperature( temperature ) -> (Crgb,ok)"""
        return _pymaxwell.Cmaxwell_getCorrelatedcolorTemperature(self, *args)

    __swig_getmethods__["getSquareSwatchIES"] = lambda x: _pymaxwell.Cmaxwell_getSquareSwatchIES
    if _newclass:getSquareSwatchIES = staticmethod(_pymaxwell.Cmaxwell_getSquareSwatchIES)
    __swig_getmethods__["getSolidLobeIES"] = lambda x: _pymaxwell.Cmaxwell_getSolidLobeIES
    if _newclass:getSolidLobeIES = staticmethod(_pymaxwell.Cmaxwell_getSolidLobeIES)
    def generateUuid(self):
        """
        Method:      generateUuid() -> (string,ok)
        Description: Generates a free unique id, useful for storing unique identifiers in scene
                     entities using setUuid() method.
        """
        return _pymaxwell.Cmaxwell_generateUuid(self)

    def searchFileInCommonPaths(self, *args):
        """
        Method:      searchFileInCommonPaths( filename ) -> (filenamefound,ok)
        Description: Looks for the given file in all of the searching paths of the scene,
                     returns the filename if found one, returns 0 if did not find it.
        """
        return _pymaxwell.Cmaxwell_searchFileInCommonPaths(self, *args)

    def replaceMacrosInString(self, *args):
        """
        Method:      replaceMacrosInString( str ) -> (str,ok)
        Description: Returns a string with the macros replaced. Returns 0 if the string is invalid or
                     there is not active scene.
        """
        return _pymaxwell.Cmaxwell_replaceMacrosInString(self, *args)

    def printMessage(self, *args):
        """
        Method:      printMessage( text, code )
        Description: Prints a message in the render console or in the message handler installed
                     Can be reimplemented in subclasses to install handlers.
        Parameter:   code -> 0 = Info. 1 = Error. 2 = Warning.
        """
        return _pymaxwell.Cmaxwell_printMessage(self, *args)

    def createGeometryLoaderObject(self, *args):
        """createGeometryLoaderObject(self, char objName, MXparamList extensionParams) -> CmaxwellObject"""
        return _pymaxwell.Cmaxwell_createGeometryLoaderObject(self, *args)

    def createGeometryProceduralObject(self, *args):
        """createGeometryProceduralObject(self, char objName, MXparamList extensionParams) -> CmaxwellObject"""
        return _pymaxwell.Cmaxwell_createGeometryProceduralObject(self, *args)

    def applySkyExtension(self, *args):
        """applySkyExtension(self, MXparamList extensionParams) -> byte"""
        return _pymaxwell.Cmaxwell_applySkyExtension(self, *args)

    def applySceneModifierExtension(self, *args):
        """applySceneModifierExtension(self, MXparamList extensionParams) -> byte"""
        return _pymaxwell.Cmaxwell_applySceneModifierExtension(self, *args)

    def transformToMaxwell(self, *args):
        """
        Method:      transformToMaxwell( Cvector pos ) -> (Cvector,ok)
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformToMaxwell( CfVector pos ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformToMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        """
        return _pymaxwell.Cmaxwell_transformToMaxwell(self, *args)

    def transformFromMaxwell(self, *args):
        """
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        Method:      transformFromMaxwell( Cbase base ) -> 1 = Success, 0 = Fail
        Description: Transform to maxwell axis system using the current axis conversion set with
                     Cmaxwell.setAxisConversion().
        """
        return _pymaxwell.Cmaxwell_transformFromMaxwell(self, *args)

    def createCustomAlphaChannel(self, *args):
        """
        Method:      createCustomAlphaChannel( name, opaque ) -> 1 = Success, 0 = Fail
        Description: Creates new custom alpha channel on the scene.
        Parameter:   name -> name of the custom alpha channel.
        Parameter:   opaque -> boolean to set opaque alpha state of the channel.
        """
        return _pymaxwell.Cmaxwell_createCustomAlphaChannel(self, *args)

    def removeCustomAlphaChannel(self, *args):
        """
        Method:      removeCustomAlphaChannel( name ) -> 1 = Success, 0 = Fail
        Description: Removes custom alpha channel from the scene.
        Parameter:   name -> name of the custom alpha channel.
        """
        return _pymaxwell.Cmaxwell_removeCustomAlphaChannel(self, *args)

    def getNumCustomAlphaChannels(self, *args):
        """
        Method:      getNumCustomAlphaChannels() -> (int,ok)
        Description: Gets the number of custom alpha channels in the scene.
        """
        return _pymaxwell.Cmaxwell_getNumCustomAlphaChannels(self, *args)

    def getCustomAlphaChannelNames(self, *args):
        """
        Method:      getCustomAlphaChannelNames() -> (list,ok)
        Description: Gets the custom alpha channels names.
        """
        return _pymaxwell.Cmaxwell_getCustomAlphaChannelNames(self, *args)

    def renameCustomAlphaChannel(self, *args):
        """
        Method:      renameCustomAlphaChannel( oldName, newName ) -> 1 = Success, 0 = Fail
        Description: Renames a custom alpha channel.
        """
        return _pymaxwell.Cmaxwell_renameCustomAlphaChannel(self, *args)

    def setCustomAlphaOpaque(self, *args):
        """
        Method:      setCustomAlphaOpaque( name, opaque ) -> 1 = Success, 0 = Fail
        Description: Sets opaque state of a custom alpha channel.
        Parameter:   name -> name of the custom alpha channel.
        Parameter:   opaque -> boolean to set opaque alpha state of the channel.
        """
        return _pymaxwell.Cmaxwell_setCustomAlphaOpaque(self, *args)

    def getCustomAlphaOpaque(self, *args):
        """
        Method:      getCustomAlphaOpaque( name ) (bool,ok)
        Description: Gets custom alpha channel opaque state.
        """
        return _pymaxwell.Cmaxwell_getCustomAlphaOpaque(self, *args)

    def getMaterialNames(self, *args):
        """
        Method:    getMaterialNames() -> string list
        Description: get all material names of the scene

        """
        return _pymaxwell.Cmaxwell_getMaterialNames(self, *args)

    def getCameraNames(self, *args):
        """
        Method:    getCameraNames() -> string list
        Description: get all camera names of the scene

        """
        return _pymaxwell.Cmaxwell_getCameraNames(self, *args)

    def getObjectNames(self, *args):
        """
        Method:    getObjectNames() -> string list
        Description: get all object names of the scene

        """
        return _pymaxwell.Cmaxwell_getObjectNames(self, *args)

    __swig_getmethods__["readACO"] = lambda x: _pymaxwell.Cmaxwell_readACO
    if _newclass:readACO = staticmethod(_pymaxwell.Cmaxwell_readACO)
    def __disown__(self):
        self.this.disown()
        _pymaxwell.disown_Cmaxwell(self)
        return weakref_proxy(self)
Cmaxwell_swigregister = _pymaxwell.Cmaxwell_swigregister
Cmaxwell_swigregister(Cmaxwell)

def Cmaxwell_getEngineVersion():
  """
    Method:      getEngineVersion() -> string
    Description : Returns the current version of Maxwell.
    """
  return _pymaxwell.Cmaxwell_getEngineVersion()
Cmaxwell_getEngineVersion = _pymaxwell.Cmaxwell_getEngineVersion

def Cmaxwell_getSdkVersionString():
  """
    Method:      getSdkVersionString() -> string
    Description : Returns the current version of the Maxwell SDK.
    """
  return _pymaxwell.Cmaxwell_getSdkVersionString()
Cmaxwell_getSdkVersionString = _pymaxwell.Cmaxwell_getSdkVersionString

def Cmaxwell_getSdkVersion():
  """
    Method:      getSdkVersion() -> int
    Description : Returns the current version of the Maxwell SDK.
    """
  return _pymaxwell.Cmaxwell_getSdkVersion()
Cmaxwell_getSdkVersion = _pymaxwell.Cmaxwell_getSdkVersion

def Cmaxwell_isDepthSupportedForThisFormat(*args):
  """
    Method:      isDepthSupportedForThisFormat( extension, depth ) -> bool
    Description: Returns true if for the given extension the depth is valid
                 isDepthSupportedForThisFormat( 'exr' 32 ) returns true
                 isDepthSupportedForThisFormat( 'jpg' 16 ) returns false
    """
  return _pymaxwell.Cmaxwell_isDepthSupportedForThisFormat(*args)
Cmaxwell_isDepthSupportedForThisFormat = _pymaxwell.Cmaxwell_isDepthSupportedForThisFormat

def Cmaxwell_getHighestDepthSupportedForThisFormat(*args):
  """
    Method:      getHighestDepthSupportedForThisFormat( extension ) -> int
    Description: Returns the highest bits per plane supported for the given format
                 getHighestDepthSupportedForThisFormat( 'exr' ) returns 32
                 getHighestDepthSupportedForThisFormat( 'jpg' ) returns 8
    """
  return _pymaxwell.Cmaxwell_getHighestDepthSupportedForThisFormat(*args)
Cmaxwell_getHighestDepthSupportedForThisFormat = _pymaxwell.Cmaxwell_getHighestDepthSupportedForThisFormat

def Cmaxwell_isEmbeddingAlphaSupportedForThisFormat(*args):
  """
    Method:      isEmbeddingAlphaSupportedForThisFormat( extension ) -> bool
    Description: Returns true if for the given format it is possible embedding the alpha
                 channel. isEmbeddingAlphaSupportedForThisFormat( 'tga' ) returns true,
                 isEmbeddingAlphaSupportedForThisFormat( 'jpg' ) returns false
    """
  return _pymaxwell.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat(*args)
Cmaxwell_isEmbeddingAlphaSupportedForThisFormat = _pymaxwell.Cmaxwell_isEmbeddingAlphaSupportedForThisFormat

def Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat(*args):
  """
    Method:      isEmbeddingAllChannelsSupportedForThisFormat( extension ) -> bool
    Description: Returns true if for the given format it is possible embedding
                 all channels in a multilayer file.
                 isEmbeddingAllChannelsSupportedForThisFormat( 'tif' ) returns true
                 isEmbeddingAllChannelsSupportedForThisFormat( 'exr' ) returns true
    """
  return _pymaxwell.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat(*args)
Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat = _pymaxwell.Cmaxwell_isEmbeddingAllChannelsSupportedForThisFormat

def Cmaxwell_isTextureExtensionSupported(*args):
  """
    Method:      isTextureExtensionSupported( extension ) -> bool
    Description: Returns true if the extension of the given texture path
                 is supported by the render engine

    """
  return _pymaxwell.Cmaxwell_isTextureExtensionSupported(*args)
Cmaxwell_isTextureExtensionSupported = _pymaxwell.Cmaxwell_isTextureExtensionSupported

def Cmaxwell_getSquareSwatchIES(*args):
  """
    Method:      getSquareSwatchIES( filename, resolution ) (list (3-tuple),ok)
    Description: Used to get the IES/EULUM emission pattern plotted into a square rgb buffer
                 of size 'resolution'.
    """
  return _pymaxwell.Cmaxwell_getSquareSwatchIES(*args)
Cmaxwell_getSquareSwatchIES = _pymaxwell.Cmaxwell_getSquareSwatchIES

def Cmaxwell_getSolidLobeIES(*args):
  """
    Method:      getSolidLobeIES( filename, axisSystem ) -> (int numPoints, list points,
                                                             int numTriangles, list faces, ok)
    Description: Used to get the IES/EULUM emission pattern plotted as a 3d object.
    Parameter:   faces, 0-based indices into points array : v00, v01, v02, v10, v11, v12, ......
    Parameter:   points, array of vertices, x0, y0, z0, x1, y1, z1, .....
    Parameter:   axisSystem, same as setInputDataType (type 'help(Cmaxwell.setInputDataType)'.
    Method:      getSolidLobeIES( filename, axisSystem ) -> (int numPoints, list points,
                                                             int numTriangles, list faces, ok)
    Description: Used to get the IES/EULUM emission pattern plotted as a 3d object.
    Parameter:   faces, 0-based indices into points array : v00, v01, v02, v10, v11, v12, ......
    Parameter:   points, array of vertices, x0, y0, z0, x1, y1, z1, .....
    Parameter:   axisSystem, same as setInputDataType (type 'help(Cmaxwell.setInputDataType)'.
    """
  return _pymaxwell.Cmaxwell_getSolidLobeIES(*args)
Cmaxwell_getSolidLobeIES = _pymaxwell.Cmaxwell_getSolidLobeIES

def Cmaxwell_readACO(*args):
  """
    Function:    readACO(filename) -> (Crgb16[], string[])
    Description: Reads an Adobe Color (.aco) file containing a set of color swatches.
                 Supports RGB, CMYK and Greyscale colors, but CMYK and Grayscale may
                 not be accurate. Better export all swatches in RGB using the script
                 provided with the Maxwell Render plug-in for Photoshop:
                   SaveSwatchesRGB.jsx
                 http://www.maxwellrender.com/index.php/products/maxwell_render_suite/plugins/#/ps
    """
  return _pymaxwell.Cmaxwell_readACO(*args)
Cmaxwell_readACO = _pymaxwell.Cmaxwell_readACO

# This file is compatible with both classic and new-style classes.


